"""
    BIMData API

    BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.  # noqa: E501

    The version of the OpenAPI document: v1 (v1)
    Contact: support@bimdata.io
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bimdata_api_client.api_client import ApiClient, Endpoint as _Endpoint
from bimdata_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bimdata_api_client.model.check_project_access import CheckProjectAccess
from bimdata_api_client.model.classification import Classification
from bimdata_api_client.model.classification_request import ClassificationRequest
from bimdata_api_client.model.cloud import Cloud
from bimdata_api_client.model.cloud_invitation import CloudInvitation
from bimdata_api_client.model.cloud_invitation_request import CloudInvitationRequest
from bimdata_api_client.model.cloud_request import CloudRequest
from bimdata_api_client.model.document import Document
from bimdata_api_client.model.document_preview_file import DocumentPreviewFile
from bimdata_api_client.model.document_text import DocumentText
from bimdata_api_client.model.folder import Folder
from bimdata_api_client.model.folder_tree import FolderTree
from bimdata_api_client.model.folder_user_project import FolderUserProject
from bimdata_api_client.model.folder_without_children import FolderWithoutChildren
from bimdata_api_client.model.folder_without_children_request import FolderWithoutChildrenRequest
from bimdata_api_client.model.group import Group
from bimdata_api_client.model.group_folder import GroupFolder
from bimdata_api_client.model.group_request import GroupRequest
from bimdata_api_client.model.import_group_request import ImportGroupRequest
from bimdata_api_client.model.log_entry import LogEntry
from bimdata_api_client.model.patched_classification_request import PatchedClassificationRequest
from bimdata_api_client.model.patched_cloud_request import PatchedCloudRequest
from bimdata_api_client.model.patched_document_request import PatchedDocumentRequest
from bimdata_api_client.model.patched_document_text_request import PatchedDocumentTextRequest
from bimdata_api_client.model.patched_folder_without_children_request import PatchedFolderWithoutChildrenRequest
from bimdata_api_client.model.patched_group_folder_request import PatchedGroupFolderRequest
from bimdata_api_client.model.patched_group_request import PatchedGroupRequest
from bimdata_api_client.model.patched_project_request import PatchedProjectRequest
from bimdata_api_client.model.patched_tag_request import PatchedTagRequest
from bimdata_api_client.model.patched_user_cloud_update_request import PatchedUserCloudUpdateRequest
from bimdata_api_client.model.patched_user_project_update_request import PatchedUserProjectUpdateRequest
from bimdata_api_client.model.patched_visa_comment_request import PatchedVisaCommentRequest
from bimdata_api_client.model.patched_visa_request import PatchedVisaRequest
from bimdata_api_client.model.patched_visa_validation_request import PatchedVisaValidationRequest
from bimdata_api_client.model.project import Project
from bimdata_api_client.model.project_access_token import ProjectAccessToken
from bimdata_api_client.model.project_access_token_request import ProjectAccessTokenRequest
from bimdata_api_client.model.project_import_request import ProjectImportRequest
from bimdata_api_client.model.project_invitation import ProjectInvitation
from bimdata_api_client.model.project_invitation_request import ProjectInvitationRequest
from bimdata_api_client.model.project_request import ProjectRequest
from bimdata_api_client.model.project_size import ProjectSize
from bimdata_api_client.model.self_user import SelfUser
from bimdata_api_client.model.size import Size
from bimdata_api_client.model.tag import Tag
from bimdata_api_client.model.tag_id_request import TagIdRequest
from bimdata_api_client.model.tag_request import TagRequest
from bimdata_api_client.model.user import User
from bimdata_api_client.model.user_invitation import UserInvitation
from bimdata_api_client.model.user_project import UserProject
from bimdata_api_client.model.user_project_id_request import UserProjectIdRequest
from bimdata_api_client.model.visa import Visa
from bimdata_api_client.model.visa_attachment import VisaAttachment
from bimdata_api_client.model.visa_comment import VisaComment
from bimdata_api_client.model.visa_comment_request import VisaCommentRequest
from bimdata_api_client.model.visa_request import VisaRequest
from bimdata_api_client.model.visa_validation import VisaValidation
from bimdata_api_client.model.visa_validation_request import VisaValidationRequest
from bimdata_api_client.model.visa_with_document import VisaWithDocument
from bimdata_api_client.model.write_folder_request import WriteFolderRequest


class CollaborationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.accept_user_invitation_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/user/invitations/{id}/accept',
                'operation_id': 'accept_user_invitation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.accept_validation_endpoint = _Endpoint(
            settings={
                'response_type': (VisaAttachment,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}/accept',
                'operation_id': 'accept_validation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                    'visa_pk',
                    'attachment',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                    'visa_pk',
                ],
                'nullable': [
                    'attachment',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'visa_pk':
                        (int,),
                    'attachment':
                        (file_type, none_type,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                    'visa_pk': 'visa_pk',
                    'attachment': 'attachment',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'visa_pk': 'path',
                    'attachment': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data',
                    'application/x-www-form-urlencoded',
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.add_document_tag_endpoint = _Endpoint(
            settings={
                'response_type': (Document,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/tag',
                'operation_id': 'add_document_tag',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'project_pk',
                    'tag_id_request',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'project_pk',
                    'tag_id_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'tag_id_request':
                        (TagIdRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'project_pk': 'path',
                    'tag_id_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.add_group_member_endpoint = _Endpoint(
            settings={
                'response_type': (UserProject,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/group/{group_pk}/member',
                'operation_id': 'add_group_member',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'group_pk',
                    'project_pk',
                    'user_project_id_request',
                ],
                'required': [
                    'cloud_pk',
                    'group_pk',
                    'project_pk',
                    'user_project_id_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'group_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'user_project_id_request':
                        (UserProjectIdRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'group_pk': 'group_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'group_pk': 'path',
                    'project_pk': 'path',
                    'user_project_id_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.cancel_cloud_user_invitation_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/invitation/{id}',
                'operation_id': 'cancel_cloud_user_invitation',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.cancel_project_user_invitation_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/invitation/{id}',
                'operation_id': 'cancel_project_user_invitation',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.check_access_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{id}/check-access',
                'operation_id': 'check_access',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.check_project_access_endpoint = _Endpoint(
            settings={
                'response_type': (CheckProjectAccess,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{id}/check-access',
                'operation_id': 'check_project_access',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.close_visa_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}/close',
                'operation_id': 'close_visa',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_classification_endpoint = _Endpoint(
            settings={
                'response_type': ([Classification],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/classification',
                'operation_id': 'create_classification',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'classification_request',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                    'classification_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'classification_request':
                        ([ClassificationRequest],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'classification_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_cloud_endpoint = _Endpoint(
            settings={
                'response_type': (Cloud,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud',
                'operation_id': 'create_cloud',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_request',
                ],
                'required': [
                    'cloud_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_request':
                        (CloudRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'cloud_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_demo_endpoint = _Endpoint(
            settings={
                'response_type': (Project,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{id}/create-demo',
                'operation_id': 'create_demo',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_dms_tree_endpoint = _Endpoint(
            settings={
                'response_type': (Folder,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{id}/dms-tree',
                'operation_id': 'create_dms_tree',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'write_folder_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'write_folder_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'write_folder_request':
                        ([WriteFolderRequest],),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'write_folder_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_document_endpoint = _Endpoint(
            settings={
                'response_type': (Document,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document',
                'operation_id': 'create_document',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'name',
                    'file',
                    'parent_id',
                    'file_name',
                    'description',
                    'model_source',
                    'ifc_source',
                    'successor_of',
                    'process_hint',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                    'name',
                    'file',
                ],
                'nullable': [
                    'parent_id',
                    'description',
                ],
                'enum': [
                    'model_source',
                    'ifc_source',
                    'process_hint',
                ],
                'validation': [
                    'name',
                    'file_name',
                ]
            },
            root_map={
                'validations': {
                    ('name',): {
                        'max_length': 512,
                        'min_length': 1,
                    },
                    ('file_name',): {
                        'max_length': 512,
                        'min_length': 1,
                    },
                },
                'allowed_values': {
                    ('model_source',): {

                        "UPLOAD": "UPLOAD",
                        "SPLIT": "SPLIT",
                        "MERGE": "MERGE",
                        "EXPORT": "EXPORT",
                        "OPTIMIZED": "OPTIMIZED"
                    },
                    ('ifc_source',): {

                        "UPLOAD": "UPLOAD",
                        "SPLIT": "SPLIT",
                        "MERGE": "MERGE",
                        "EXPORT": "EXPORT",
                        "OPTIMIZED": "OPTIMIZED"
                    },
                    ('process_hint',): {

                        "PHOTOSPHERE": "PHOTOSPHERE"
                    },
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'name':
                        (str,),
                    'file':
                        (file_type,),
                    'parent_id':
                        (int, none_type,),
                    'file_name':
                        (str,),
                    'description':
                        (str, none_type,),
                    'model_source':
                        (str,),
                    'ifc_source':
                        (str,),
                    'successor_of':
                        (int,),
                    'process_hint':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                    'name': 'name',
                    'file': 'file',
                    'parent_id': 'parent_id',
                    'file_name': 'file_name',
                    'description': 'description',
                    'model_source': 'model_source',
                    'ifc_source': 'ifc_source',
                    'successor_of': 'successor_of',
                    'process_hint': 'process_hint',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'name': 'form',
                    'file': 'form',
                    'parent_id': 'form',
                    'file_name': 'form',
                    'description': 'form',
                    'model_source': 'form',
                    'ifc_source': 'form',
                    'successor_of': 'form',
                    'process_hint': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data',
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client
        )
        self.create_folder_endpoint = _Endpoint(
            settings={
                'response_type': (FolderWithoutChildren,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/folder',
                'operation_id': 'create_folder',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'folder_without_children_request',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                    'folder_without_children_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'folder_without_children_request':
                        (FolderWithoutChildrenRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'folder_without_children_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_manage_group_endpoint = _Endpoint(
            settings={
                'response_type': (Group,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/group',
                'operation_id': 'create_manage_group',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'group_request',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                    'group_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'group_request':
                        (GroupRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'group_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_project_endpoint = _Endpoint(
            settings={
                'response_type': (Project,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project',
                'operation_id': 'create_project',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_request',
                ],
                'required': [
                    'cloud_pk',
                    'project_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_request':
                        (ProjectRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_project_access_token_endpoint = _Endpoint(
            settings={
                'response_type': (ProjectAccessToken,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/access-token',
                'operation_id': 'create_project_access_token',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'project_access_token_request',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                    'project_access_token_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'project_access_token_request':
                        (ProjectAccessTokenRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'project_access_token_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_tag_endpoint = _Endpoint(
            settings={
                'response_type': (Tag,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/tag',
                'operation_id': 'create_tag',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'tag_request',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                    'tag_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'tag_request':
                        (TagRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'tag_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_validation_endpoint = _Endpoint(
            settings={
                'response_type': (VisaValidation,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation',
                'operation_id': 'create_validation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'project_pk',
                    'visa_pk',
                    'visa_validation_request',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'project_pk',
                    'visa_pk',
                    'visa_validation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'visa_pk':
                        (int,),
                    'visa_validation_request':
                        (VisaValidationRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'project_pk': 'project_pk',
                    'visa_pk': 'visa_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'project_pk': 'path',
                    'visa_pk': 'path',
                    'visa_validation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_visa_endpoint = _Endpoint(
            settings={
                'response_type': (Visa,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa',
                'operation_id': 'create_visa',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'project_pk',
                    'visa_request',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'visa_request':
                        (VisaRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'project_pk': 'path',
                    'visa_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_visa_comment_endpoint = _Endpoint(
            settings={
                'response_type': (VisaComment,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment',
                'operation_id': 'create_visa_comment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'project_pk',
                    'visa_pk',
                    'visa_comment_request',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'project_pk',
                    'visa_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'visa_pk':
                        (int,),
                    'visa_comment_request':
                        (VisaCommentRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'project_pk': 'project_pk',
                    'visa_pk': 'visa_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'project_pk': 'path',
                    'visa_pk': 'path',
                    'visa_comment_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.delete_all_document_history_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history/delete',
                'operation_id': 'delete_all_document_history',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_classification_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/classification/{id}',
                'operation_id': 'delete_classification',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_cloud_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{id}',
                'operation_id': 'delete_cloud',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_cloud_user_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/user/{id}',
                'operation_id': 'delete_cloud_user',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_document_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{id}',
                'operation_id': 'delete_document',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_document_tag_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/tag/{id}',
                'operation_id': 'delete_document_tag',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_folder_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/folder/{id}',
                'operation_id': 'delete_folder',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_group_member_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/group/{group_pk}/member/{id}',
                'operation_id': 'delete_group_member',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'group_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'group_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'group_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'group_pk': 'group_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'group_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_manage_group_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/group/{id}',
                'operation_id': 'delete_manage_group',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_project_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{id}',
                'operation_id': 'delete_project',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_project_access_token_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/access-token/{token}',
                'operation_id': 'delete_project_access_token',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'token',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                    'token': 'token',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'token': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_project_user_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/user/{id}',
                'operation_id': 'delete_project_user',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_tag_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/tag/{id}',
                'operation_id': 'delete_tag',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_validation_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}',
                'operation_id': 'delete_validation',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                    'visa_pk',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                    'visa_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'visa_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                    'visa_pk': 'visa_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'visa_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_visa_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}',
                'operation_id': 'delete_visa',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_visa_comment_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment/{id}',
                'operation_id': 'delete_visa_comment',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                    'visa_pk',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                    'visa_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'visa_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                    'visa_pk': 'visa_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'visa_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.deny_user_invitation_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/user/invitations/{id}/deny',
                'operation_id': 'deny_user_invitation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.deny_validation_endpoint = _Endpoint(
            settings={
                'response_type': (VisaAttachment,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}/deny',
                'operation_id': 'deny_validation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                    'visa_pk',
                    'attachment',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                    'visa_pk',
                ],
                'nullable': [
                    'attachment',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'visa_pk':
                        (int,),
                    'attachment':
                        (file_type, none_type,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                    'visa_pk': 'visa_pk',
                    'attachment': 'attachment',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'visa_pk': 'path',
                    'attachment': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data',
                    'application/x-www-form-urlencoded',
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_classification_endpoint = _Endpoint(
            settings={
                'response_type': (Classification,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/classification/{id}',
                'operation_id': 'get_classification',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_classifications_endpoint = _Endpoint(
            settings={
                'response_type': ([Classification],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/classification',
                'operation_id': 'get_classifications',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_cloud_endpoint = _Endpoint(
            settings={
                'response_type': (Cloud,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{id}',
                'operation_id': 'get_cloud',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_cloud_invitations_endpoint = _Endpoint(
            settings={
                'response_type': ([CloudInvitation],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/invitation',
                'operation_id': 'get_cloud_invitations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                ],
                'required': [
                    'cloud_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_cloud_size_endpoint = _Endpoint(
            settings={
                'response_type': (Size,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{id}/size',
                'operation_id': 'get_cloud_size',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_cloud_user_endpoint = _Endpoint(
            settings={
                'response_type': (User,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/user/{id}',
                'operation_id': 'get_cloud_user',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_cloud_users_endpoint = _Endpoint(
            settings={
                'response_type': ([User],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/user',
                'operation_id': 'get_cloud_users',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'email',
                    'email__contains',
                    'email__endswith',
                    'email__startswith',
                ],
                'required': [
                    'cloud_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'email':
                        (str,),
                    'email__contains':
                        (str,),
                    'email__endswith':
                        (str,),
                    'email__startswith':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'email': 'email',
                    'email__contains': 'email__contains',
                    'email__endswith': 'email__endswith',
                    'email__startswith': 'email__startswith',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'email': 'query',
                    'email__contains': 'query',
                    'email__endswith': 'query',
                    'email__startswith': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_clouds_endpoint = _Endpoint(
            settings={
                'response_type': ([Cloud],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud',
                'operation_id': 'get_clouds',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_document_endpoint = _Endpoint(
            settings={
                'response_type': (Document,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{id}',
                'operation_id': 'get_document',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_document_histories_endpoint = _Endpoint(
            settings={
                'response_type': ([Document],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history',
                'operation_id': 'get_document_histories',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_documents_endpoint = _Endpoint(
            settings={
                'response_type': ([Document],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document',
                'operation_id': 'get_documents',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'created_after',
                    'created_before',
                    'creator_email',
                    'description',
                    'description__contains',
                    'description__endswith',
                    'description__startswith',
                    'file_name',
                    'file_name__contains',
                    'file_name__endswith',
                    'file_name__startswith',
                    'has__visa',
                    'id__in',
                    'name',
                    'name__contains',
                    'name__endswith',
                    'name__startswith',
                    'parent_id__in',
                    'search',
                    'size_max',
                    'size_min',
                    'tags',
                    'text',
                    'visa__creator_email',
                    'visa__deadline_after',
                    'visa__deadline_before',
                    'visa__past__deadline',
                    'visa__past__deadline__strict',
                    'visa__status',
                    'visa__status__strict',
                    'visa__validation_status',
                    'visa__validator_email',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                ],
                'nullable': [
                    'size_max',
                    'size_min',
                ],
                'enum': [
                    'visa__status',
                    'visa__status__strict',
                ],
                'validation': [
                    'size_max',
                    'size_min',
                ]
            },
            root_map={
                'validations': {
                    ('size_max',): {

                        'inclusive_maximum': 9223372036854775807,
                        'inclusive_minimum': 0,
                    },
                    ('size_min',): {

                        'inclusive_maximum': 9223372036854775807,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('visa__status',): {

                        "C": "C",
                        "O": "O",
                        "P": "P"
                    },
                    ('visa__status__strict',): {

                        "C": "C",
                        "O": "O",
                        "P": "P"
                    },
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'created_after':
                        (datetime,),
                    'created_before':
                        (datetime,),
                    'creator_email':
                        (str,),
                    'description':
                        (str,),
                    'description__contains':
                        (str,),
                    'description__endswith':
                        (str,),
                    'description__startswith':
                        (str,),
                    'file_name':
                        (str,),
                    'file_name__contains':
                        (str,),
                    'file_name__endswith':
                        (str,),
                    'file_name__startswith':
                        (str,),
                    'has__visa':
                        (bool,),
                    'id__in':
                        ([int],),
                    'name':
                        (str,),
                    'name__contains':
                        (str,),
                    'name__endswith':
                        (str,),
                    'name__startswith':
                        (str,),
                    'parent_id__in':
                        ([float],),
                    'search':
                        (str,),
                    'size_max':
                        (int, none_type,),
                    'size_min':
                        (int, none_type,),
                    'tags':
                        ([str],),
                    'text':
                        (bool,),
                    'visa__creator_email':
                        (str,),
                    'visa__deadline_after':
                        (date,),
                    'visa__deadline_before':
                        (date,),
                    'visa__past__deadline':
                        (bool,),
                    'visa__past__deadline__strict':
                        (bool,),
                    'visa__status':
                        (str,),
                    'visa__status__strict':
                        (str,),
                    'visa__validation_status':
                        (str,),
                    'visa__validator_email':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                    'created_after': 'created_after',
                    'created_before': 'created_before',
                    'creator_email': 'creator_email',
                    'description': 'description',
                    'description__contains': 'description__contains',
                    'description__endswith': 'description__endswith',
                    'description__startswith': 'description__startswith',
                    'file_name': 'file_name',
                    'file_name__contains': 'file_name__contains',
                    'file_name__endswith': 'file_name__endswith',
                    'file_name__startswith': 'file_name__startswith',
                    'has__visa': 'has__visa',
                    'id__in': 'id__in',
                    'name': 'name',
                    'name__contains': 'name__contains',
                    'name__endswith': 'name__endswith',
                    'name__startswith': 'name__startswith',
                    'parent_id__in': 'parent_id__in',
                    'search': 'search',
                    'size_max': 'size_max',
                    'size_min': 'size_min',
                    'tags': 'tags',
                    'text': 'text',
                    'visa__creator_email': 'visa__creator_email',
                    'visa__deadline_after': 'visa__deadline_after',
                    'visa__deadline_before': 'visa__deadline_before',
                    'visa__past__deadline': 'visa__past__deadline',
                    'visa__past__deadline__strict': 'visa__past__deadline__strict',
                    'visa__status': 'visa__status',
                    'visa__status__strict': 'visa__status__strict',
                    'visa__validation_status': 'visa__validation_status',
                    'visa__validator_email': 'visa__validator_email',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'created_after': 'query',
                    'created_before': 'query',
                    'creator_email': 'query',
                    'description': 'query',
                    'description__contains': 'query',
                    'description__endswith': 'query',
                    'description__startswith': 'query',
                    'file_name': 'query',
                    'file_name__contains': 'query',
                    'file_name__endswith': 'query',
                    'file_name__startswith': 'query',
                    'has__visa': 'query',
                    'id__in': 'query',
                    'name': 'query',
                    'name__contains': 'query',
                    'name__endswith': 'query',
                    'name__startswith': 'query',
                    'parent_id__in': 'query',
                    'search': 'query',
                    'size_max': 'query',
                    'size_min': 'query',
                    'tags': 'query',
                    'text': 'query',
                    'visa__creator_email': 'query',
                    'visa__deadline_after': 'query',
                    'visa__deadline_before': 'query',
                    'visa__past__deadline': 'query',
                    'visa__past__deadline__strict': 'query',
                    'visa__status': 'query',
                    'visa__status__strict': 'query',
                    'visa__validation_status': 'query',
                    'visa__validator_email': 'query',
                },
                'collection_format_map': {
                    'id__in': 'csv',
                    'parent_id__in': 'csv',
                    'tags': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_folder_endpoint = _Endpoint(
            settings={
                'response_type': (FolderWithoutChildren,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/folder/{id}',
                'operation_id': 'get_folder',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_folder_documents_endpoint = _Endpoint(
            settings={
                'response_type': ([Document],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/folder/{folder_pk}/document',
                'operation_id': 'get_folder_documents',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'folder_pk',
                    'project_pk',
                    'created_after',
                    'created_before',
                    'creator_email',
                    'description',
                    'description__contains',
                    'description__endswith',
                    'description__startswith',
                    'file_name',
                    'file_name__contains',
                    'file_name__endswith',
                    'file_name__startswith',
                    'has__visa',
                    'id__in',
                    'name',
                    'name__contains',
                    'name__endswith',
                    'name__startswith',
                    'parent_id__in',
                    'search',
                    'size_max',
                    'size_min',
                    'tags',
                    'visa__creator_email',
                    'visa__deadline_after',
                    'visa__deadline_before',
                    'visa__past__deadline',
                    'visa__past__deadline__strict',
                    'visa__status',
                    'visa__status__strict',
                    'visa__validation_status',
                    'visa__validator_email',
                ],
                'required': [
                    'cloud_pk',
                    'folder_pk',
                    'project_pk',
                ],
                'nullable': [
                    'size_max',
                    'size_min',
                ],
                'enum': [
                    'visa__status',
                    'visa__status__strict',
                ],
                'validation': [
                    'size_max',
                    'size_min',
                ]
            },
            root_map={
                'validations': {
                    ('size_max',): {

                        'inclusive_maximum': 9223372036854775807,
                        'inclusive_minimum': 0,
                    },
                    ('size_min',): {

                        'inclusive_maximum': 9223372036854775807,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('visa__status',): {

                        "C": "C",
                        "O": "O",
                        "P": "P"
                    },
                    ('visa__status__strict',): {

                        "C": "C",
                        "O": "O",
                        "P": "P"
                    },
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'folder_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'created_after':
                        (datetime,),
                    'created_before':
                        (datetime,),
                    'creator_email':
                        (str,),
                    'description':
                        (str,),
                    'description__contains':
                        (str,),
                    'description__endswith':
                        (str,),
                    'description__startswith':
                        (str,),
                    'file_name':
                        (str,),
                    'file_name__contains':
                        (str,),
                    'file_name__endswith':
                        (str,),
                    'file_name__startswith':
                        (str,),
                    'has__visa':
                        (bool,),
                    'id__in':
                        ([int],),
                    'name':
                        (str,),
                    'name__contains':
                        (str,),
                    'name__endswith':
                        (str,),
                    'name__startswith':
                        (str,),
                    'parent_id__in':
                        ([float],),
                    'search':
                        (str,),
                    'size_max':
                        (int, none_type,),
                    'size_min':
                        (int, none_type,),
                    'tags':
                        ([str],),
                    'visa__creator_email':
                        (str,),
                    'visa__deadline_after':
                        (date,),
                    'visa__deadline_before':
                        (date,),
                    'visa__past__deadline':
                        (bool,),
                    'visa__past__deadline__strict':
                        (bool,),
                    'visa__status':
                        (str,),
                    'visa__status__strict':
                        (str,),
                    'visa__validation_status':
                        (str,),
                    'visa__validator_email':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'folder_pk': 'folder_pk',
                    'project_pk': 'project_pk',
                    'created_after': 'created_after',
                    'created_before': 'created_before',
                    'creator_email': 'creator_email',
                    'description': 'description',
                    'description__contains': 'description__contains',
                    'description__endswith': 'description__endswith',
                    'description__startswith': 'description__startswith',
                    'file_name': 'file_name',
                    'file_name__contains': 'file_name__contains',
                    'file_name__endswith': 'file_name__endswith',
                    'file_name__startswith': 'file_name__startswith',
                    'has__visa': 'has__visa',
                    'id__in': 'id__in',
                    'name': 'name',
                    'name__contains': 'name__contains',
                    'name__endswith': 'name__endswith',
                    'name__startswith': 'name__startswith',
                    'parent_id__in': 'parent_id__in',
                    'search': 'search',
                    'size_max': 'size_max',
                    'size_min': 'size_min',
                    'tags': 'tags',
                    'visa__creator_email': 'visa__creator_email',
                    'visa__deadline_after': 'visa__deadline_after',
                    'visa__deadline_before': 'visa__deadline_before',
                    'visa__past__deadline': 'visa__past__deadline',
                    'visa__past__deadline__strict': 'visa__past__deadline__strict',
                    'visa__status': 'visa__status',
                    'visa__status__strict': 'visa__status__strict',
                    'visa__validation_status': 'visa__validation_status',
                    'visa__validator_email': 'visa__validator_email',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'folder_pk': 'path',
                    'project_pk': 'path',
                    'created_after': 'query',
                    'created_before': 'query',
                    'creator_email': 'query',
                    'description': 'query',
                    'description__contains': 'query',
                    'description__endswith': 'query',
                    'description__startswith': 'query',
                    'file_name': 'query',
                    'file_name__contains': 'query',
                    'file_name__endswith': 'query',
                    'file_name__startswith': 'query',
                    'has__visa': 'query',
                    'id__in': 'query',
                    'name': 'query',
                    'name__contains': 'query',
                    'name__endswith': 'query',
                    'name__startswith': 'query',
                    'parent_id__in': 'query',
                    'search': 'query',
                    'size_max': 'query',
                    'size_min': 'query',
                    'tags': 'query',
                    'visa__creator_email': 'query',
                    'visa__deadline_after': 'query',
                    'visa__deadline_before': 'query',
                    'visa__past__deadline': 'query',
                    'visa__past__deadline__strict': 'query',
                    'visa__status': 'query',
                    'visa__status__strict': 'query',
                    'visa__validation_status': 'query',
                    'visa__validator_email': 'query',
                },
                'collection_format_map': {
                    'id__in': 'csv',
                    'parent_id__in': 'csv',
                    'tags': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_folder_project_users_endpoint = _Endpoint(
            settings={
                'response_type': ([FolderUserProject],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/folder/{folder_pk}/user',
                'operation_id': 'get_folder_project_users',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'folder_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'folder_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'folder_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'folder_pk': 'folder_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'folder_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_folders_endpoint = _Endpoint(
            settings={
                'response_type': ([FolderWithoutChildren],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/folder',
                'operation_id': 'get_folders',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_group_endpoint = _Endpoint(
            settings={
                'response_type': (Group,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/me/group/{id}',
                'operation_id': 'get_group',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_groups_endpoint = _Endpoint(
            settings={
                'response_type': ([Group],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/me/group',
                'operation_id': 'get_groups',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_logs_endpoint = _Endpoint(
            settings={
                'response_type': ([LogEntry],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/logs',
                'operation_id': 'get_logs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_manage_group_endpoint = _Endpoint(
            settings={
                'response_type': (Group,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/group/{id}',
                'operation_id': 'get_manage_group',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_manage_groups_endpoint = _Endpoint(
            settings={
                'response_type': ([Group],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/group',
                'operation_id': 'get_manage_groups',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_project_endpoint = _Endpoint(
            settings={
                'response_type': (Project,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{id}',
                'operation_id': 'get_project',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_project_access_token_endpoint = _Endpoint(
            settings={
                'response_type': (ProjectAccessToken,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/access-token/{token}',
                'operation_id': 'get_project_access_token',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'token',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                    'token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                    'token': 'token',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'token': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_project_access_tokens_endpoint = _Endpoint(
            settings={
                'response_type': ([ProjectAccessToken],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/access-token',
                'operation_id': 'get_project_access_tokens',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_project_creator_visas_endpoint = _Endpoint(
            settings={
                'response_type': ([VisaWithDocument],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/me/visa/creator',
                'operation_id': 'get_project_creator_visas',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'deadline_after',
                    'deadline_before',
                    'has__past_deadline',
                    'status',
                    'validation_status',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                    'status',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('status',): {

                        "C": "C",
                        "O": "O",
                        "P": "P"
                    },
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'deadline_after':
                        (date,),
                    'deadline_before':
                        (date,),
                    'has__past_deadline':
                        (bool,),
                    'status':
                        (str,),
                    'validation_status':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                    'deadline_after': 'deadline_after',
                    'deadline_before': 'deadline_before',
                    'has__past_deadline': 'has__past_deadline',
                    'status': 'status',
                    'validation_status': 'validation_status',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'deadline_after': 'query',
                    'deadline_before': 'query',
                    'has__past_deadline': 'query',
                    'status': 'query',
                    'validation_status': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_project_dms_tree_endpoint = _Endpoint(
            settings={
                'response_type': (Folder,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{id}/dms-tree',
                'operation_id': 'get_project_dms_tree',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_project_folder_tree_endpoint = _Endpoint(
            settings={
                'response_type': ([FolderTree],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{id}/folder-tree',
                'operation_id': 'get_project_folder_tree',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_project_invitations_endpoint = _Endpoint(
            settings={
                'response_type': ([ProjectInvitation],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/invitation',
                'operation_id': 'get_project_invitations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_project_size_endpoint = _Endpoint(
            settings={
                'response_type': (ProjectSize,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{id}/size',
                'operation_id': 'get_project_size',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_project_tree_endpoint = _Endpoint(
            settings={
                'response_type': (Folder,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{id}/tree',
                'operation_id': 'get_project_tree',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_project_users_endpoint = _Endpoint(
            settings={
                'response_type': ([UserProject],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/user',
                'operation_id': 'get_project_users',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'email',
                    'email__contains',
                    'email__endswith',
                    'email__startswith',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'email':
                        (str,),
                    'email__contains':
                        (str,),
                    'email__endswith':
                        (str,),
                    'email__startswith':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                    'email': 'email',
                    'email__contains': 'email__contains',
                    'email__endswith': 'email__endswith',
                    'email__startswith': 'email__startswith',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'email': 'query',
                    'email__contains': 'query',
                    'email__endswith': 'query',
                    'email__startswith': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_project_validator_visas_endpoint = _Endpoint(
            settings={
                'response_type': ([VisaWithDocument],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/me/visa/validator',
                'operation_id': 'get_project_validator_visas',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'deadline_after',
                    'deadline_before',
                    'has__past_deadline',
                    'status',
                    'validation_status',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                    'status',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('status',): {

                        "C": "C",
                        "O": "O",
                        "P": "P"
                    },
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'deadline_after':
                        (date,),
                    'deadline_before':
                        (date,),
                    'has__past_deadline':
                        (bool,),
                    'status':
                        (str,),
                    'validation_status':
                        (str,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                    'deadline_after': 'deadline_after',
                    'deadline_before': 'deadline_before',
                    'has__past_deadline': 'has__past_deadline',
                    'status': 'status',
                    'validation_status': 'validation_status',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'deadline_after': 'query',
                    'deadline_before': 'query',
                    'has__past_deadline': 'query',
                    'status': 'query',
                    'validation_status': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_projects_endpoint = _Endpoint(
            settings={
                'response_type': ([Project],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project',
                'operation_id': 'get_projects',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                ],
                'required': [
                    'cloud_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_self_projects_endpoint = _Endpoint(
            settings={
                'response_type': ([Project],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/user/projects',
                'operation_id': 'get_self_projects',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_self_user_endpoint = _Endpoint(
            settings={
                'response_type': (SelfUser,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/user',
                'operation_id': 'get_self_user',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_tag_endpoint = _Endpoint(
            settings={
                'response_type': (Tag,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/tag/{id}',
                'operation_id': 'get_tag',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_tags_endpoint = _Endpoint(
            settings={
                'response_type': ([Tag],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/tag',
                'operation_id': 'get_tags',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_user_invitation_endpoint = _Endpoint(
            settings={
                'response_type': (UserInvitation,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/user/invitations/{id}',
                'operation_id': 'get_user_invitation',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_user_invitations_endpoint = _Endpoint(
            settings={
                'response_type': ([UserInvitation],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/user/invitations',
                'operation_id': 'get_user_invitations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_validation_endpoint = _Endpoint(
            settings={
                'response_type': (VisaValidation,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}',
                'operation_id': 'get_validation',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                    'visa_pk',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                    'visa_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'visa_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                    'visa_pk': 'visa_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'visa_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_validations_endpoint = _Endpoint(
            settings={
                'response_type': ([VisaValidation],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation',
                'operation_id': 'get_validations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'project_pk',
                    'visa_pk',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'project_pk',
                    'visa_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'visa_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'project_pk': 'project_pk',
                    'visa_pk': 'visa_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'project_pk': 'path',
                    'visa_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_visa_endpoint = _Endpoint(
            settings={
                'response_type': (Visa,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}',
                'operation_id': 'get_visa',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_visa_comment_endpoint = _Endpoint(
            settings={
                'response_type': (VisaComment,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment/{id}',
                'operation_id': 'get_visa_comment',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                    'visa_pk',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                    'visa_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'visa_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                    'visa_pk': 'visa_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'visa_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_visa_comments_endpoint = _Endpoint(
            settings={
                'response_type': ([VisaComment],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment',
                'operation_id': 'get_visa_comments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'project_pk',
                    'visa_pk',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'project_pk',
                    'visa_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'visa_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'project_pk': 'project_pk',
                    'visa_pk': 'visa_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'project_pk': 'path',
                    'visa_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_visas_endpoint = _Endpoint(
            settings={
                'response_type': ([Visa],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa',
                'operation_id': 'get_visas',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.import_from_project_endpoint = _Endpoint(
            settings={
                'response_type': (Project,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{id}/import_from',
                'operation_id': 'import_from_project',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_import_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_import_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_import_request':
                        (ProjectImportRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_import_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.import_manage_group_endpoint = _Endpoint(
            settings={
                'response_type': ([Group],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/group/import',
                'operation_id': 'import_manage_group',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'import_group_request',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                    'import_group_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'import_group_request':
                        (ImportGroupRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'import_group_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.invite_cloud_user_endpoint = _Endpoint(
            settings={
                'response_type': (CloudInvitation,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/invitation',
                'operation_id': 'invite_cloud_user',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'cloud_invitation_request',
                ],
                'required': [
                    'cloud_pk',
                    'cloud_invitation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'cloud_invitation_request':
                        (CloudInvitationRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'cloud_invitation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.invite_project_user_endpoint = _Endpoint(
            settings={
                'response_type': (ProjectInvitation,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/invitation',
                'operation_id': 'invite_project_user',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'project_invitation_request',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                    'project_invitation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'project_invitation_request':
                        (ProjectInvitationRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'project_invitation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.leave_project_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{id}/leave',
                'operation_id': 'leave_project',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.leave_version_document_history_endpoint = _Endpoint(
            settings={
                'response_type': (Document,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history/{id}/leave',
                'operation_id': 'leave_version_document_history',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.make_head_version_document_history_endpoint = _Endpoint(
            settings={
                'response_type': (Document,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history/{id}/head-version',
                'operation_id': 'make_head_version_document_history',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.pause_visa_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}/pause',
                'operation_id': 'pause_visa',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.reset_validation_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}/reset',
                'operation_id': 'reset_validation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                    'visa_pk',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                    'visa_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'visa_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                    'visa_pk': 'visa_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'visa_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.resume_visa_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}/resume',
                'operation_id': 'resume_visa',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_classification_endpoint = _Endpoint(
            settings={
                'response_type': (Classification,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/classification/{id}',
                'operation_id': 'update_classification',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'patched_classification_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_classification_request':
                        (PatchedClassificationRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'patched_classification_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_cloud_endpoint = _Endpoint(
            settings={
                'response_type': (Cloud,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{id}',
                'operation_id': 'update_cloud',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'patched_cloud_request',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'patched_cloud_request':
                        (PatchedCloudRequest,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'patched_cloud_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_cloud_user_endpoint = _Endpoint(
            settings={
                'response_type': (User,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/user/{id}',
                'operation_id': 'update_cloud_user',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'patched_user_cloud_update_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'patched_user_cloud_update_request':
                        (PatchedUserCloudUpdateRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'patched_user_cloud_update_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_document_endpoint = _Endpoint(
            settings={
                'response_type': (Document,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{id}',
                'operation_id': 'update_document',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'patched_document_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_document_request':
                        (PatchedDocumentRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'patched_document_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_document_text_endpoint = _Endpoint(
            settings={
                'response_type': (DocumentText,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{id}/text',
                'operation_id': 'update_document_text',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'patched_document_text_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_document_text_request':
                        (PatchedDocumentTextRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'patched_document_text_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_folder_endpoint = _Endpoint(
            settings={
                'response_type': (FolderWithoutChildren,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/folder/{id}',
                'operation_id': 'update_folder',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'patched_folder_without_children_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_folder_without_children_request':
                        (PatchedFolderWithoutChildrenRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'patched_folder_without_children_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_group_folder_endpoint = _Endpoint(
            settings={
                'response_type': (GroupFolder,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/folder/{folder_pk}/group/{id}',
                'operation_id': 'update_group_folder',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'folder_pk',
                    'id',
                    'project_pk',
                    'patched_group_folder_request',
                ],
                'required': [
                    'cloud_pk',
                    'folder_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'folder_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_group_folder_request':
                        (PatchedGroupFolderRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'folder_pk': 'folder_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'folder_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'patched_group_folder_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_manage_group_endpoint = _Endpoint(
            settings={
                'response_type': (Group,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/group/{id}',
                'operation_id': 'update_manage_group',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'patched_group_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_group_request':
                        (PatchedGroupRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'patched_group_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_preview_file_endpoint = _Endpoint(
            settings={
                'response_type': (DocumentPreviewFile,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{id}/preview-file',
                'operation_id': 'update_preview_file',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'office_preview',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'office_preview':
                        (file_type,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                    'office_preview': 'office_preview',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'office_preview': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data',
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client
        )
        self.update_project_endpoint = _Endpoint(
            settings={
                'response_type': (Project,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{id}',
                'operation_id': 'update_project',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'patched_project_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'patched_project_request':
                        (PatchedProjectRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'patched_project_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_project_user_endpoint = _Endpoint(
            settings={
                'response_type': (UserProject,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/user/{id}',
                'operation_id': 'update_project_user',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'patched_user_project_update_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_user_project_update_request':
                        (PatchedUserProjectUpdateRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'patched_user_project_update_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_tag_endpoint = _Endpoint(
            settings={
                'response_type': (Tag,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/tag/{id}',
                'operation_id': 'update_tag',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'patched_tag_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_tag_request':
                        (PatchedTagRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'patched_tag_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_validation_endpoint = _Endpoint(
            settings={
                'response_type': (VisaValidation,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}',
                'operation_id': 'update_validation',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                    'visa_pk',
                    'patched_visa_validation_request',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                    'visa_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'visa_pk':
                        (int,),
                    'patched_visa_validation_request':
                        (PatchedVisaValidationRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                    'visa_pk': 'visa_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'visa_pk': 'path',
                    'patched_visa_validation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_visa_endpoint = _Endpoint(
            settings={
                'response_type': (Visa,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}',
                'operation_id': 'update_visa',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                    'patched_visa_request',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_visa_request':
                        (PatchedVisaRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'patched_visa_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_visa_comment_endpoint = _Endpoint(
            settings={
                'response_type': (VisaComment,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment/{id}',
                'operation_id': 'update_visa_comment',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                    'visa_pk',
                    'patched_visa_comment_request',
                ],
                'required': [
                    'cloud_pk',
                    'document_pk',
                    'id',
                    'project_pk',
                    'visa_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'document_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'visa_pk':
                        (int,),
                    'patched_visa_comment_request':
                        (PatchedVisaCommentRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'document_pk': 'document_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                    'visa_pk': 'visa_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'document_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'visa_pk': 'path',
                    'patched_visa_comment_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )

    def accept_user_invitation(
        self,
        id,
        **kwargs
    ):
        """Accept an invitation  # noqa: E501

        The user is added to the cloud and projet.  Required scopes: user:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.accept_user_invitation(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this invitation.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.accept_user_invitation_endpoint.call_with_http_info(**kwargs)

    def accept_validation(
        self,
        cloud_pk,
        document_pk,
        id,
        project_pk,
        visa_pk,
        **kwargs
    ):
        """Accept a validation  # noqa: E501

        Accept a validation  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.accept_validation(cloud_pk, document_pk, id, project_pk, visa_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            id (int): A unique integer value identifying this visa validation.
            project_pk (int): A unique integer value identifying this project.
            visa_pk (int): A unique integer value identifying this visa.

        Keyword Args:
            attachment (file_type, none_type): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            VisaAttachment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        kwargs['visa_pk'] = \
            visa_pk
        return self.accept_validation_endpoint.call_with_http_info(**kwargs)

    def add_document_tag(
        self,
        cloud_pk,
        document_pk,
        project_pk,
        tag_id_request,
        **kwargs
    ):
        """Add a tag to a document  # noqa: E501

        Add a tag to a document  Required scopes: document:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_document_tag(cloud_pk, document_pk, project_pk, tag_id_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            document_pk (int): A unique integer value identifying this document.
            project_pk (int):
            tag_id_request (TagIdRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Document
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['tag_id_request'] = \
            tag_id_request
        return self.add_document_tag_endpoint.call_with_http_info(**kwargs)

    def add_group_member(
        self,
        cloud_pk,
        group_pk,
        project_pk,
        user_project_id_request,
        **kwargs
    ):
        """Add a user to a group  # noqa: E501

        Add a userproject to a group. Must be an admin of the project  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_group_member(cloud_pk, group_pk, project_pk, user_project_id_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            group_pk (int): A unique integer value identifying this group.
            project_pk (int):
            user_project_id_request (UserProjectIdRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UserProject
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['group_pk'] = \
            group_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['user_project_id_request'] = \
            user_project_id_request
        return self.add_group_member_endpoint.call_with_http_info(**kwargs)

    def cancel_cloud_user_invitation(
        self,
        cloud_pk,
        id,
        **kwargs
    ):
        """Cancel a pending invitation  # noqa: E501

        Cancel a pending invitation  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_cloud_user_invitation(cloud_pk, id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this invitation.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        return self.cancel_cloud_user_invitation_endpoint.call_with_http_info(**kwargs)

    def cancel_project_user_invitation(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Cancel a pending invitation  # noqa: E501

        Cancel a pending invitation  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.cancel_project_user_invitation(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this invitation.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.cancel_project_user_invitation_endpoint.call_with_http_info(**kwargs)

    def check_access(
        self,
        id,
        **kwargs
    ):
        """Check app access from cloud  # noqa: E501

        Return code 200 if the cloud has access to the marketplace app  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.check_access(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.check_access_endpoint.call_with_http_info(**kwargs)

    def check_project_access(
        self,
        cloud_pk,
        id,
        **kwargs
    ):
        """Check if the current token has access to the requested project  # noqa: E501

                         The response gives you details about the right of the user or app, the scopes of the token and the usable scopes (scopes filtered by the right of the user).                 It works with user tokens, app tokens and ProjectAccessToken               # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.check_project_access(cloud_pk, id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CheckProjectAccess
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        return self.check_project_access_endpoint.call_with_http_info(**kwargs)

    def close_visa(
        self,
        cloud_pk,
        document_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Close a visa of a document  # noqa: E501

        Close a visa of a document  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.close_visa(cloud_pk, document_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            id (int): A unique integer value identifying this visa.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.close_visa_endpoint.call_with_http_info(**kwargs)

    def create_classification(
        self,
        cloud_pk,
        project_pk,
        classification_request,
        **kwargs
    ):
        """Create a classification  # noqa: E501

         Bulk create available. You can either post an object or a list of objects. Is you post a list, the response will be a list (in the same order) of created objects or of errors if any If at least one create succeeded, the status code will be 201. If every create failed, the status code we'll be 400 with the list of errors  If created classification already exists, it will not be duplicated and the previous one will be returned. You also can add a 'classification' filter on this endpoint. By ex: /classification?name='untec'. The name is case sensitive  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_classification(cloud_pk, project_pk, classification_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.
            classification_request ([ClassificationRequest]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Classification]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['classification_request'] = \
            classification_request
        return self.create_classification_endpoint.call_with_http_info(**kwargs)

    def create_cloud(
        self,
        cloud_request,
        **kwargs
    ):
        """Create a cloud  # noqa: E501

        Create a cloud  Required scopes: cloud:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_cloud(cloud_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_request (CloudRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Cloud
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_request'] = \
            cloud_request
        return self.create_cloud_endpoint.call_with_http_info(**kwargs)

    def create_demo(
        self,
        id,
        **kwargs
    ):
        """Create a Demo project in a cloud  # noqa: E501

        Create a project name 'Demo' with an already processed model in it  Required scopes: cloud:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_demo(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Project
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.create_demo_endpoint.call_with_http_info(**kwargs)

    def create_dms_tree(
        self,
        cloud_pk,
        id,
        write_folder_request,
        **kwargs
    ):
        """Create a complete DMS tree  # noqa: E501

        Create a DMS structure of folders  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_dms_tree(cloud_pk, id, write_folder_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this project.
            write_folder_request ([WriteFolderRequest]):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Folder
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['write_folder_request'] = \
            write_folder_request
        return self.create_dms_tree_endpoint.call_with_http_info(**kwargs)

    def create_document(
        self,
        cloud_pk,
        project_pk,
        name,
        file,
        **kwargs
    ):
        """Create a document  # noqa: E501

        Create a document. If the document is one of {'DXF', 'GLTF', 'POINT_CLOUD', 'OBJ', 'DWG', 'IFC'}, a model will be created and attached to this document  Required scopes: document:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_document(cloud_pk, project_pk, name, file, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.
            name (str): Shown name of the file
            file (file_type):

        Keyword Args:
            parent_id (int, none_type): [optional]
            file_name (str): Full name of the file. [optional]
            description (str, none_type): Description of the file. [optional]
            model_source (str): Define the model.source field if the upload is a Model (IFC, PDF, DWG...)  * `UPLOAD` - UPLOAD * `SPLIT` - SPLIT * `MERGE` - MERGE * `EXPORT` - EXPORT * `OPTIMIZED` - OPTIMIZED. [optional]
            ifc_source (str): DEPRECATED: Use 'model_source' instead. Define the model.source field if the upload is a Model (IFC, PDF, DWG...)  * `UPLOAD` - UPLOAD * `SPLIT` - SPLIT * `MERGE` - MERGE * `EXPORT` - EXPORT * `OPTIMIZED` - OPTIMIZED. [optional]
            successor_of (int): Old document version to replace. Only for create. [optional]
            process_hint (str): Provide a info about the document in order to customize the way it is processed.  * `PHOTOSPHERE` - PHOTOSPHERE. [optional] if omitted the server will use the default value of "PHOTOSPHERE"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Document
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['name'] = \
            name
        kwargs['file'] = \
            file
        return self.create_document_endpoint.call_with_http_info(**kwargs)

    def create_folder(
        self,
        cloud_pk,
        project_pk,
        folder_without_children_request,
        **kwargs
    ):
        """Create a folder  # noqa: E501

        If the created folder have no parent, it will be put as a child of the default root folder of the project  Required scopes: document:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_folder(cloud_pk, project_pk, folder_without_children_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.
            folder_without_children_request (FolderWithoutChildrenRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            FolderWithoutChildren
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['folder_without_children_request'] = \
            folder_without_children_request
        return self.create_folder_endpoint.call_with_http_info(**kwargs)

    def create_manage_group(
        self,
        cloud_pk,
        project_pk,
        group_request,
        **kwargs
    ):
        """Create a group  # noqa: E501

        Create a group. Must be an admin of the project  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_manage_group(cloud_pk, project_pk, group_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.
            group_request (GroupRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Group
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['group_request'] = \
            group_request
        return self.create_manage_group_endpoint.call_with_http_info(**kwargs)

    def create_project(
        self,
        cloud_pk,
        project_request,
        **kwargs
    ):
        """Create a project  # noqa: E501

        Create a project  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_project(cloud_pk, project_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            project_request (ProjectRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Project
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_request'] = \
            project_request
        return self.create_project_endpoint.call_with_http_info(**kwargs)

    def create_project_access_token(
        self,
        cloud_pk,
        project_pk,
        project_access_token_request,
        **kwargs
    ):
        """Create a token for this project  # noqa: E501

        Tokens are valid 1 day by default  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_project_access_token(cloud_pk, project_pk, project_access_token_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.
            project_access_token_request (ProjectAccessTokenRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ProjectAccessToken
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['project_access_token_request'] = \
            project_access_token_request
        return self.create_project_access_token_endpoint.call_with_http_info(**kwargs)

    def create_tag(
        self,
        cloud_pk,
        project_pk,
        tag_request,
        **kwargs
    ):
        """Create a tag  # noqa: E501

        Create a tag  Required scopes: document:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_tag(cloud_pk, project_pk, tag_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.
            tag_request (TagRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Tag
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['tag_request'] = \
            tag_request
        return self.create_tag_endpoint.call_with_http_info(**kwargs)

    def create_validation(
        self,
        cloud_pk,
        document_pk,
        project_pk,
        visa_pk,
        visa_validation_request,
        **kwargs
    ):
        """Add a validation to a visa  # noqa: E501

        Add a validation to a visa  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_validation(cloud_pk, document_pk, project_pk, visa_pk, visa_validation_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            project_pk (int): A unique integer value identifying this project.
            visa_pk (int): A unique integer value identifying this visa.
            visa_validation_request (VisaValidationRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            VisaValidation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['visa_pk'] = \
            visa_pk
        kwargs['visa_validation_request'] = \
            visa_validation_request
        return self.create_validation_endpoint.call_with_http_info(**kwargs)

    def create_visa(
        self,
        cloud_pk,
        document_pk,
        project_pk,
        **kwargs
    ):
        """Create a visa  # noqa: E501

        Create a visa  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_visa(cloud_pk, document_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            visa_request (VisaRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Visa
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['project_pk'] = \
            project_pk
        return self.create_visa_endpoint.call_with_http_info(**kwargs)

    def create_visa_comment(
        self,
        cloud_pk,
        document_pk,
        project_pk,
        visa_pk,
        **kwargs
    ):
        """Add a comment  # noqa: E501

        Add a comment  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_visa_comment(cloud_pk, document_pk, project_pk, visa_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            project_pk (int): A unique integer value identifying this project.
            visa_pk (int): A unique integer value identifying this visa.

        Keyword Args:
            visa_comment_request (VisaCommentRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            VisaComment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['visa_pk'] = \
            visa_pk
        return self.create_visa_comment_endpoint.call_with_http_info(**kwargs)

    def delete_all_document_history(
        self,
        cloud_pk,
        document_pk,
        project_pk,
        **kwargs
    ):
        """Delete all document history  # noqa: E501

        Delete the document from the head version and all its history  Required scopes: document:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_all_document_history(cloud_pk, document_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['project_pk'] = \
            project_pk
        return self.delete_all_document_history_endpoint.call_with_http_info(**kwargs)

    def delete_classification(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Delete a classification  # noqa: E501

        All elements having this classification will lose it  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_classification(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this classification.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.delete_classification_endpoint.call_with_http_info(**kwargs)

    def delete_cloud(
        self,
        id,
        **kwargs
    ):
        """Delete a cloud  # noqa: E501

        Delete a cloud  Required scopes: cloud:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_cloud(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.delete_cloud_endpoint.call_with_http_info(**kwargs)

    def delete_cloud_user(
        self,
        cloud_pk,
        id,
        **kwargs
    ):
        """Remove a user from a cloud  # noqa: E501

        The user will also be removed from all the projects of the cloud  Required scopes: cloud:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_cloud_user(cloud_pk, id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this fos user.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        return self.delete_cloud_user_endpoint.call_with_http_info(**kwargs)

    def delete_document(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Delete the document  # noqa: E501

        Delete the document  Required scopes: document:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_document(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this document.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.delete_document_endpoint.call_with_http_info(**kwargs)

    def delete_document_tag(
        self,
        cloud_pk,
        document_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Delete a tag from a document  # noqa: E501

        Delete a tag from a document  Required scopes: document:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_document_tag(cloud_pk, document_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            document_pk (int): A unique integer value identifying this document.
            id (int): A unique integer value identifying this document.
            project_pk (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.delete_document_tag_endpoint.call_with_http_info(**kwargs)

    def delete_folder(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Delete a folder  # noqa: E501

        All files and subfolders will be deleted too. If folder is a project's root folder, only children are deleted  Required scopes: document:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_folder(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this folder.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.delete_folder_endpoint.call_with_http_info(**kwargs)

    def delete_group_member(
        self,
        cloud_pk,
        group_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Delete a user from a group  # noqa: E501

        Delete a userproject from a group. Id is the userproject_id. Must be an admin of the project.  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_group_member(cloud_pk, group_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            group_pk (int): A unique integer value identifying this group.
            id (int): A unique integer value identifying this group.
            project_pk (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['group_pk'] = \
            group_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.delete_group_member_endpoint.call_with_http_info(**kwargs)

    def delete_manage_group(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Delete a group  # noqa: E501

        Delete a group. Must be an admin of the project  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_manage_group(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this group.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.delete_manage_group_endpoint.call_with_http_info(**kwargs)

    def delete_project(
        self,
        cloud_pk,
        id,
        **kwargs
    ):
        """Delete a project  # noqa: E501

        It can take a long time to respond because we may need to delete all properties of all elements of all models in the project  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_project(cloud_pk, id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        return self.delete_project_endpoint.call_with_http_info(**kwargs)

    def delete_project_access_token(
        self,
        cloud_pk,
        project_pk,
        token,
        **kwargs
    ):
        """Delete a token  # noqa: E501

        Deleting a token will revoke it  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_project_access_token(cloud_pk, project_pk, token, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.
            token (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['token'] = \
            token
        return self.delete_project_access_token_endpoint.call_with_http_info(**kwargs)

    def delete_project_user(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Remove a user from a project  # noqa: E501

        Remove a user from a project  Required scopes: cloud:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_project_user(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this user project.
            project_pk (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.delete_project_user_endpoint.call_with_http_info(**kwargs)

    def delete_tag(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Delete the tag  # noqa: E501

        Delete the tag  Required scopes: document:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_tag(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this tag.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.delete_tag_endpoint.call_with_http_info(**kwargs)

    def delete_validation(
        self,
        cloud_pk,
        document_pk,
        id,
        project_pk,
        visa_pk,
        **kwargs
    ):
        """Remove a validation  # noqa: E501

        Remove a validation  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_validation(cloud_pk, document_pk, id, project_pk, visa_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            id (int): A unique integer value identifying this visa validation.
            project_pk (int): A unique integer value identifying this project.
            visa_pk (int): A unique integer value identifying this visa.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        kwargs['visa_pk'] = \
            visa_pk
        return self.delete_validation_endpoint.call_with_http_info(**kwargs)

    def delete_visa(
        self,
        cloud_pk,
        document_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Remove a visa  # noqa: E501

        Remove a visa  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_visa(cloud_pk, document_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            id (int): A unique integer value identifying this visa.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.delete_visa_endpoint.call_with_http_info(**kwargs)

    def delete_visa_comment(
        self,
        cloud_pk,
        document_pk,
        id,
        project_pk,
        visa_pk,
        **kwargs
    ):
        """Remove a comment  # noqa: E501

        Remove a comment  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_visa_comment(cloud_pk, document_pk, id, project_pk, visa_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            id (int): A unique integer value identifying this visa comment.
            project_pk (int): A unique integer value identifying this project.
            visa_pk (int): A unique integer value identifying this visa.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        kwargs['visa_pk'] = \
            visa_pk
        return self.delete_visa_comment_endpoint.call_with_http_info(**kwargs)

    def deny_user_invitation(
        self,
        id,
        **kwargs
    ):
        """Deny an invitation  # noqa: E501

        The invitation status change to DENIED and the user is not added to the cloud. You can accept an invitation previously denied  Required scopes: user:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.deny_user_invitation(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this invitation.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.deny_user_invitation_endpoint.call_with_http_info(**kwargs)

    def deny_validation(
        self,
        cloud_pk,
        document_pk,
        id,
        project_pk,
        visa_pk,
        **kwargs
    ):
        """Deny a validation  # noqa: E501

        Deny a validation  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.deny_validation(cloud_pk, document_pk, id, project_pk, visa_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            id (int): A unique integer value identifying this visa validation.
            project_pk (int): A unique integer value identifying this project.
            visa_pk (int): A unique integer value identifying this visa.

        Keyword Args:
            attachment (file_type, none_type): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            VisaAttachment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        kwargs['visa_pk'] = \
            visa_pk
        return self.deny_validation_endpoint.call_with_http_info(**kwargs)

    def get_classification(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Retrieve a classification  # noqa: E501

        Retrieve a classification  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_classification(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this classification.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Classification
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.get_classification_endpoint.call_with_http_info(**kwargs)

    def get_classifications(
        self,
        cloud_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all classifications  # noqa: E501

        Retrieve all classifications of all models in the project  Required scopes: ifc:read, model:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_classifications(cloud_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Classification]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_classifications_endpoint.call_with_http_info(**kwargs)

    def get_cloud(
        self,
        id,
        **kwargs
    ):
        """Retrieve one cloud  # noqa: E501

        Retrieve one cloud  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cloud(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Cloud
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.get_cloud_endpoint.call_with_http_info(**kwargs)

    def get_cloud_invitations(
        self,
        cloud_pk,
        **kwargs
    ):
        """Retrieve all pending invitations in the cloud  # noqa: E501

        Returns app's invitations only  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cloud_invitations(cloud_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [CloudInvitation]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        return self.get_cloud_invitations_endpoint.call_with_http_info(**kwargs)

    def get_cloud_size(
        self,
        id,
        **kwargs
    ):
        """Get size of the cloud  # noqa: E501

         Returns the sizes of the cloud in Bytes. The response fields depends on the role of the user. If the user is an admin, all field will be returned. If the user is a standard user, only `remaining_total_size` and `remaining_smart_data_size` will be set. If the call is made from an API access, role admin (100) will be returned and all fields will be set. The fields `managed by` indicate if the subscription for this cloud is an API subscription or a BIMData Platform subscription. If the cloud is managed by an API plan, the remaining sizes will take others organizations's clouds size into account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cloud_size(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Size
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.get_cloud_size_endpoint.call_with_http_info(**kwargs)

    def get_cloud_user(
        self,
        cloud_pk,
        id,
        **kwargs
    ):
        """Retrieve a user in a cloud  # noqa: E501

        Only administrators can see a cloud member  Required scopes: cloud:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cloud_user(cloud_pk, id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this fos user.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            User
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        return self.get_cloud_user_endpoint.call_with_http_info(**kwargs)

    def get_cloud_users(
        self,
        cloud_pk,
        **kwargs
    ):
        """Retrieve all users in a cloud, or a list with a filter by email  # noqa: E501

        Only administrators can see cloud members.  Required scopes: cloud:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cloud_users(cloud_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):

        Keyword Args:
            email (str): [optional]
            email__contains (str): [optional]
            email__endswith (str): [optional]
            email__startswith (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [User]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        return self.get_cloud_users_endpoint.call_with_http_info(**kwargs)

    def get_clouds(
        self,
        **kwargs
    ):
        """Retrieve all clouds  # noqa: E501

        Returns user's (or app's) clouds only  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_clouds(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Cloud]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_clouds_endpoint.call_with_http_info(**kwargs)

    def get_document(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Retrieve a document  # noqa: E501

        Retrieve a document in the project  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_document(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this document.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Document
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.get_document_endpoint.call_with_http_info(**kwargs)

    def get_document_histories(
        self,
        cloud_pk,
        document_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all document histories  # noqa: E501

        Retrieve all documents from the header document history  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_document_histories(cloud_pk, document_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Document]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_document_histories_endpoint.call_with_http_info(**kwargs)

    def get_documents(
        self,
        cloud_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all documents  # noqa: E501

        Retrieve all documents in the project. Filters are case insentive. Search filter only works if AI features are enabled.  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_documents(cloud_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            created_after (datetime): [optional]
            created_before (datetime): [optional]
            creator_email (str): [optional]
            description (str): [optional]
            description__contains (str): [optional]
            description__endswith (str): [optional]
            description__startswith (str): [optional]
            file_name (str): [optional]
            file_name__contains (str): [optional]
            file_name__endswith (str): [optional]
            file_name__startswith (str): [optional]
            has__visa (bool): [optional]
            id__in ([int]): Multiple values may be separated by commas.. [optional]
            name (str): [optional]
            name__contains (str): [optional]
            name__endswith (str): [optional]
            name__startswith (str): [optional]
            parent_id__in ([float]): Multiple values may be separated by commas.. [optional]
            search (str): [optional]
            size_max (int, none_type): Size of the file.. [optional]
            size_min (int, none_type): Size of the file.. [optional]
            tags ([str]): Multiple values may be separated by commas.. [optional]
            text (bool): If this field is present (with any value), the full text representation of the documents will be added to the response under the field `text`. [optional]
            visa__creator_email (str): [optional]
            visa__deadline_after (date): [optional]
            visa__deadline_before (date): [optional]
            visa__past__deadline (bool): if True, Get documents that have at least one visa opened with a deadline in past. [optional]
            visa__past__deadline__strict (bool): if True, Get documents that *only* have visa opened with a deadline in past. [optional]
            visa__status (str): Get documents that have at least one visa in the requested status  * `O` - opened * `P` - paused * `C` - closed. [optional]
            visa__status__strict (str): Get documents that *exclusively* have visa in the requested status  * `O` - opened * `P` - paused * `C` - closed. [optional]
            visa__validation_status (str): [optional]
            visa__validator_email (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Document]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_documents_endpoint.call_with_http_info(**kwargs)

    def get_folder(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Retrieve a folder  # noqa: E501

        Retrieve a folder  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_folder(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this folder.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            FolderWithoutChildren
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.get_folder_endpoint.call_with_http_info(**kwargs)

    def get_folder_documents(
        self,
        cloud_pk,
        folder_pk,
        project_pk,
        **kwargs
    ):
        """Get all documents of a folder  # noqa: E501

        Get all documents of a folder  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_folder_documents(cloud_pk, folder_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            folder_pk (int):
            project_pk (int):

        Keyword Args:
            created_after (datetime): [optional]
            created_before (datetime): [optional]
            creator_email (str): [optional]
            description (str): [optional]
            description__contains (str): [optional]
            description__endswith (str): [optional]
            description__startswith (str): [optional]
            file_name (str): [optional]
            file_name__contains (str): [optional]
            file_name__endswith (str): [optional]
            file_name__startswith (str): [optional]
            has__visa (bool): [optional]
            id__in ([int]): Multiple values may be separated by commas.. [optional]
            name (str): [optional]
            name__contains (str): [optional]
            name__endswith (str): [optional]
            name__startswith (str): [optional]
            parent_id__in ([float]): Multiple values may be separated by commas.. [optional]
            search (str): [optional]
            size_max (int, none_type): Size of the file.. [optional]
            size_min (int, none_type): Size of the file.. [optional]
            tags ([str]): Multiple values may be separated by commas.. [optional]
            visa__creator_email (str): [optional]
            visa__deadline_after (date): [optional]
            visa__deadline_before (date): [optional]
            visa__past__deadline (bool): if True, Get documents that have at least one visa opened with a deadline in past. [optional]
            visa__past__deadline__strict (bool): if True, Get documents that *only* have visa opened with a deadline in past. [optional]
            visa__status (str): Get documents that have at least one visa in the requested status  * `O` - opened * `P` - paused * `C` - closed. [optional]
            visa__status__strict (str): Get documents that *exclusively* have visa in the requested status  * `O` - opened * `P` - paused * `C` - closed. [optional]
            visa__validation_status (str): [optional]
            visa__validator_email (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Document]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['folder_pk'] = \
            folder_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_folder_documents_endpoint.call_with_http_info(**kwargs)

    def get_folder_project_users(
        self,
        cloud_pk,
        folder_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all users in a project with the permission on the folder  # noqa: E501

        Retrieve all users in a project with the permission on the folder  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_folder_project_users(cloud_pk, folder_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            folder_pk (int): A unique integer value identifying this folder.
            project_pk (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [FolderUserProject]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['folder_pk'] = \
            folder_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_folder_project_users_endpoint.call_with_http_info(**kwargs)

    def get_folders(
        self,
        cloud_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all folders  # noqa: E501

        Retrieve all folders in the project. This is an array of folder. If you want to get the tree of all folders, see getProjectTree  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_folders(cloud_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [FolderWithoutChildren]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_folders_endpoint.call_with_http_info(**kwargs)

    def get_group(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Retrieve a group  # noqa: E501

        Retrieve a group to which the user belongs  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_group(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this group.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Group
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.get_group_endpoint.call_with_http_info(**kwargs)

    def get_groups(
        self,
        cloud_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all groups  # noqa: E501

        Retrieves all groups to which the user belongs  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_groups(cloud_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Group]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_groups_endpoint.call_with_http_info(**kwargs)

    def get_logs(
        self,
        cloud_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all logs of the project  # noqa: E501

        Retrieve all logs of the project  Required scopes: logs:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_logs(cloud_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            project_pk (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [LogEntry]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_logs_endpoint.call_with_http_info(**kwargs)

    def get_manage_group(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Retrieve a group  # noqa: E501

        Retrieve a group. Must be an admin of the project  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_manage_group(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this group.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Group
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.get_manage_group_endpoint.call_with_http_info(**kwargs)

    def get_manage_groups(
        self,
        cloud_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all groups  # noqa: E501

        Retrieve all groups in the project. Must be an admin of the project  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_manage_groups(cloud_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Group]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_manage_groups_endpoint.call_with_http_info(**kwargs)

    def get_project(
        self,
        cloud_pk,
        id,
        **kwargs
    ):
        """Retrieve a project  # noqa: E501

        Retrieve a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project(cloud_pk, id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Project
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        return self.get_project_endpoint.call_with_http_info(**kwargs)

    def get_project_access_token(
        self,
        cloud_pk,
        project_pk,
        token,
        **kwargs
    ):
        """Retrieve one token created for this project  # noqa: E501

        Retrieve one token created for this project  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project_access_token(cloud_pk, project_pk, token, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.
            token (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ProjectAccessToken
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['token'] = \
            token
        return self.get_project_access_token_endpoint.call_with_http_info(**kwargs)

    def get_project_access_tokens(
        self,
        cloud_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all tokens created for this project  # noqa: E501

        Retrieve all tokens created for this project  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project_access_tokens(cloud_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ProjectAccessToken]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_project_access_tokens_endpoint.call_with_http_info(**kwargs)

    def get_project_creator_visas(
        self,
        cloud_pk,
        project_pk,
        **kwargs
    ):
        """List visas created by user  # noqa: E501

        List visas created by user in a project  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project_creator_visas(cloud_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            deadline_after (date): [optional]
            deadline_before (date): [optional]
            has__past_deadline (bool): [optional]
            status (str): * `O` - opened * `P` - paused * `C` - closed. [optional]
            validation_status (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [VisaWithDocument]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_project_creator_visas_endpoint.call_with_http_info(**kwargs)

    def get_project_dms_tree(
        self,
        cloud_pk,
        id,
        **kwargs
    ):
        """Retrieve the complete DMS tree  # noqa: E501

        Retrieve the complete DMS tree (all folders and all documents in the project)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project_dms_tree(cloud_pk, id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Folder
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        return self.get_project_dms_tree_endpoint.call_with_http_info(**kwargs)

    def get_project_folder_tree(
        self,
        cloud_pk,
        id,
        **kwargs
    ):
        """Retrieve folder tree of the project  # noqa: E501

        Retrieve folder tree of the project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project_folder_tree(cloud_pk, id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [FolderTree]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        return self.get_project_folder_tree_endpoint.call_with_http_info(**kwargs)

    def get_project_invitations(
        self,
        cloud_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all pending invitations in the project  # noqa: E501

        Returns app's invitations only  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project_invitations(cloud_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ProjectInvitation]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_project_invitations_endpoint.call_with_http_info(**kwargs)

    def get_project_size(
        self,
        cloud_pk,
        id,
        **kwargs
    ):
        """Get size of all model files in the project  # noqa: E501

        Returns the size of the project in Bytes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project_size(cloud_pk, id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ProjectSize
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        return self.get_project_size_endpoint.call_with_http_info(**kwargs)

    def get_project_tree(
        self,
        cloud_pk,
        id,
        **kwargs
    ):
        """Retrieve the complete DMS tree  # noqa: E501

        Retrieve the complete DMS tree (all folders and all documents in the project). DEPRECATED: renamed to getProjectDMSTree  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project_tree(cloud_pk, id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Folder
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        return self.get_project_tree_endpoint.call_with_http_info(**kwargs)

    def get_project_users(
        self,
        cloud_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all users in a project, or a list with a filter by email  # noqa: E501

        Each member of a project can see other members of the project  Required scopes: cloud:read, bcf:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project_users(cloud_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            project_pk (int):

        Keyword Args:
            email (str): Filter the returned list by email. [optional]
            email__contains (str): Filter the returned list by email__contains. [optional]
            email__endswith (str): Filter the returned list by email__endswith. [optional]
            email__startswith (str): Filter the returned list by email__startswith. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [UserProject]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_project_users_endpoint.call_with_http_info(**kwargs)

    def get_project_validator_visas(
        self,
        cloud_pk,
        project_pk,
        **kwargs
    ):
        """List visas where user is a validator  # noqa: E501

        List visas where user is a validator in a project  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project_validator_visas(cloud_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            deadline_after (date): [optional]
            deadline_before (date): [optional]
            has__past_deadline (bool): [optional]
            status (str): * `O` - opened * `P` - paused * `C` - closed. [optional]
            validation_status (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [VisaWithDocument]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_project_validator_visas_endpoint.call_with_http_info(**kwargs)

    def get_projects(
        self,
        cloud_pk,
        **kwargs
    ):
        """Retrieve all projects  # noqa: E501

        Retrieve all projects of the cloud. All project are shown at the same level. see #getProjectSubTree  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_projects(cloud_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Project]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        return self.get_projects_endpoint.call_with_http_info(**kwargs)

    def get_self_projects(
        self,
        **kwargs
    ):
        """List current user's projects  # noqa: E501

        List user's projects of all clouds  Required scopes: user:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_self_projects(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Project]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_self_projects_endpoint.call_with_http_info(**kwargs)

    def get_self_user(
        self,
        **kwargs
    ):
        """Get info about the current user  # noqa: E501

        Get info about the current user  Required scopes: user:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_self_user(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SelfUser
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_self_user_endpoint.call_with_http_info(**kwargs)

    def get_tag(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Retrieve a tag  # noqa: E501

        Retrieve a tag in the project  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_tag(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this tag.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Tag
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.get_tag_endpoint.call_with_http_info(**kwargs)

    def get_tags(
        self,
        cloud_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all tags  # noqa: E501

        Retrieve all tags in the project  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_tags(cloud_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Tag]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_tags_endpoint.call_with_http_info(**kwargs)

    def get_user_invitation(
        self,
        id,
        **kwargs
    ):
        """Retrieve an invitation  # noqa: E501

        Retrieve the invitation  Required scopes: user:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_invitation(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this invitation.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UserInvitation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.get_user_invitation_endpoint.call_with_http_info(**kwargs)

    def get_user_invitations(
        self,
        **kwargs
    ):
        """List user's invitations  # noqa: E501

        List all user's invitations  Required scopes: user:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_invitations(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [UserInvitation]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_user_invitations_endpoint.call_with_http_info(**kwargs)

    def get_validation(
        self,
        cloud_pk,
        document_pk,
        id,
        project_pk,
        visa_pk,
        **kwargs
    ):
        """Retrieve a validation to a visa  # noqa: E501

        Retrieve a validation to a visa  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_validation(cloud_pk, document_pk, id, project_pk, visa_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            id (int): A unique integer value identifying this visa validation.
            project_pk (int): A unique integer value identifying this project.
            visa_pk (int): A unique integer value identifying this visa.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            VisaValidation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        kwargs['visa_pk'] = \
            visa_pk
        return self.get_validation_endpoint.call_with_http_info(**kwargs)

    def get_validations(
        self,
        cloud_pk,
        document_pk,
        project_pk,
        visa_pk,
        **kwargs
    ):
        """List all validations to a visa  # noqa: E501

        List all validations to a visa  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_validations(cloud_pk, document_pk, project_pk, visa_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            project_pk (int): A unique integer value identifying this project.
            visa_pk (int): A unique integer value identifying this visa.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [VisaValidation]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['visa_pk'] = \
            visa_pk
        return self.get_validations_endpoint.call_with_http_info(**kwargs)

    def get_visa(
        self,
        cloud_pk,
        document_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Retrieve a visa of a document  # noqa: E501

        Retrieve a unique visa of a document  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_visa(cloud_pk, document_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            id (int): A unique integer value identifying this visa.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Visa
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.get_visa_endpoint.call_with_http_info(**kwargs)

    def get_visa_comment(
        self,
        cloud_pk,
        document_pk,
        id,
        project_pk,
        visa_pk,
        **kwargs
    ):
        """Retrieve a comment  # noqa: E501

        Retrieve a comment  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_visa_comment(cloud_pk, document_pk, id, project_pk, visa_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            id (int): A unique integer value identifying this visa comment.
            project_pk (int): A unique integer value identifying this project.
            visa_pk (int): A unique integer value identifying this visa.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            VisaComment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        kwargs['visa_pk'] = \
            visa_pk
        return self.get_visa_comment_endpoint.call_with_http_info(**kwargs)

    def get_visa_comments(
        self,
        cloud_pk,
        document_pk,
        project_pk,
        visa_pk,
        **kwargs
    ):
        """List all comment of a visa  # noqa: E501

        List all comment of a visa  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_visa_comments(cloud_pk, document_pk, project_pk, visa_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            project_pk (int): A unique integer value identifying this project.
            visa_pk (int): A unique integer value identifying this visa.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [VisaComment]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['visa_pk'] = \
            visa_pk
        return self.get_visa_comments_endpoint.call_with_http_info(**kwargs)

    def get_visas(
        self,
        cloud_pk,
        document_pk,
        project_pk,
        **kwargs
    ):
        """List all visas of a document  # noqa: E501

        List all visas of a document  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_visas(cloud_pk, document_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Visa]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_visas_endpoint.call_with_http_info(**kwargs)

    def import_from_project(
        self,
        cloud_pk,
        id,
        project_import_request,
        **kwargs
    ):
        """Import data from a project  # noqa: E501

        Import dms tree and/or the groups from a project  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.import_from_project(cloud_pk, id, project_import_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this project.
            project_import_request (ProjectImportRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Project
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_import_request'] = \
            project_import_request
        return self.import_from_project_endpoint.call_with_http_info(**kwargs)

    def import_manage_group(
        self,
        cloud_pk,
        project_pk,
        import_group_request,
        **kwargs
    ):
        """Import a group from another project  # noqa: E501

        DEPECRATED: Use ImportFromProject instead  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.import_manage_group(cloud_pk, project_pk, import_group_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.
            import_group_request (ImportGroupRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Group]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['import_group_request'] = \
            import_group_request
        return self.import_manage_group_endpoint.call_with_http_info(**kwargs)

    def invite_cloud_user(
        self,
        cloud_pk,
        cloud_invitation_request,
        **kwargs
    ):
        """Invite a cloud member  # noqa: E501

        Invite a cloud member. To invite in a project, see inviteProjectUser. You can't invite a user already in the cloud. Create multiple invitations of the same email in the same cloud will generate multiple invitation emails but not multiple invitation object  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.invite_cloud_user(cloud_pk, cloud_invitation_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            cloud_invitation_request (CloudInvitationRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CloudInvitation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['cloud_invitation_request'] = \
            cloud_invitation_request
        return self.invite_cloud_user_endpoint.call_with_http_info(**kwargs)

    def invite_project_user(
        self,
        cloud_pk,
        project_pk,
        project_invitation_request,
        **kwargs
    ):
        """Invite a project member  # noqa: E501

        Invite a project member. If the user is not already a cloud member, they will also be invited in the cloud with USER role.  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.invite_project_user(cloud_pk, project_pk, project_invitation_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            project_pk (int): A unique integer value identifying this project.
            project_invitation_request (ProjectInvitationRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ProjectInvitation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['project_invitation_request'] = \
            project_invitation_request
        return self.invite_project_user_endpoint.call_with_http_info(**kwargs)

    def leave_project(
        self,
        cloud_pk,
        id,
        **kwargs
    ):
        """Leave the project  # noqa: E501

        Leave the project. Only authenticated users (no app) can call this route.  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.leave_project(cloud_pk, id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        return self.leave_project_endpoint.call_with_http_info(**kwargs)

    def leave_version_document_history(
        self,
        cloud_pk,
        document_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Leave the history version  # noqa: E501

        This will create a new independent document in the same folder  Required scopes: document:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.leave_version_document_history(cloud_pk, document_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            id (int): A unique integer value identifying this document.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Document
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.leave_version_document_history_endpoint.call_with_http_info(**kwargs)

    def make_head_version_document_history(
        self,
        cloud_pk,
        document_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Make the head of the version  # noqa: E501

        The actual head version will be defined as the previous version  Required scopes: document:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.make_head_version_document_history(cloud_pk, document_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            id (int): A unique integer value identifying this document.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Document
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.make_head_version_document_history_endpoint.call_with_http_info(**kwargs)

    def pause_visa(
        self,
        cloud_pk,
        document_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Pause a visa of a document  # noqa: E501

        Pause a visa of a document  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pause_visa(cloud_pk, document_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            id (int): A unique integer value identifying this visa.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.pause_visa_endpoint.call_with_http_info(**kwargs)

    def reset_validation(
        self,
        cloud_pk,
        document_pk,
        id,
        project_pk,
        visa_pk,
        **kwargs
    ):
        """Reset a validation  # noqa: E501

        Reset a validation if the validation has been accepted or rejected. The attachment will be removed  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.reset_validation(cloud_pk, document_pk, id, project_pk, visa_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            id (int): A unique integer value identifying this visa validation.
            project_pk (int): A unique integer value identifying this project.
            visa_pk (int): A unique integer value identifying this visa.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        kwargs['visa_pk'] = \
            visa_pk
        return self.reset_validation_endpoint.call_with_http_info(**kwargs)

    def resume_visa(
        self,
        cloud_pk,
        document_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Resume a visa of a document  # noqa: E501

        Resume a visa of a document after a pause  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.resume_visa(cloud_pk, document_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            id (int): A unique integer value identifying this visa.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.resume_visa_endpoint.call_with_http_info(**kwargs)

    def update_classification(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Update some fields of a classification  # noqa: E501

        Update some fields of a classification  Required scopes: ifc:write, model:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_classification(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this classification.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_classification_request (PatchedClassificationRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Classification
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.update_classification_endpoint.call_with_http_info(**kwargs)

    def update_cloud(
        self,
        id,
        **kwargs
    ):
        """Update some fields of a cloud  # noqa: E501

        Update some fields of a cloud  Required scopes: cloud:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_cloud(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): A unique integer value identifying this cloud.

        Keyword Args:
            patched_cloud_request (PatchedCloudRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Cloud
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.update_cloud_endpoint.call_with_http_info(**kwargs)

    def update_cloud_user(
        self,
        cloud_pk,
        id,
        **kwargs
    ):
        """Change the user role in the cloud  # noqa: E501

        Change the user role in the cloud  Required scopes: cloud:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_cloud_user(cloud_pk, id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this fos user.

        Keyword Args:
            patched_user_cloud_update_request (PatchedUserCloudUpdateRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            User
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        return self.update_cloud_user_endpoint.call_with_http_info(**kwargs)

    def update_document(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Update some fields of the document  # noqa: E501

        Update some fields of the document  Required scopes: document:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_document(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this document.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_document_request (PatchedDocumentRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Document
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.update_document_endpoint.call_with_http_info(**kwargs)

    def update_document_text(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Update the text representation of a document  # noqa: E501

        Update the text representation of a document. The document itself will not be changed. It is useful for full text search  Required scopes: document:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_document_text(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this document.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_document_text_request (PatchedDocumentTextRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DocumentText
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.update_document_text_endpoint.call_with_http_info(**kwargs)

    def update_folder(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Update some fields of a folder  # noqa: E501

         Update some fields of a folder. Only project admins can update the `default_permission` field.  `default_permission` choices are : ``` 1: ACCESS_DENIED, 50: READ_ONLY, 100: READ_WRTIE ``` When propagate is set to True, the permission of all children in the folder will be updated.  Caution: The 'default_permission' field is not applied to users belonging to one or more groups.   Required scopes: document:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_folder(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this folder.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_folder_without_children_request (PatchedFolderWithoutChildrenRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            FolderWithoutChildren
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.update_folder_endpoint.call_with_http_info(**kwargs)

    def update_group_folder(
        self,
        cloud_pk,
        folder_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Update the permission of a group on a folder. When propagate is set to True, the permission of all children in the folder will be updated.  # noqa: E501

         Update the permission of a group on a folder. Permissions choices are : ``` 1: ACCESS_DENIED, 50: READ_ONLY, 100: READ_WRITE, None: Default value (See the default_permission field of the folder) ``` When propagate is set to True, the permission of all children in the folder will be updated.               Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_group_folder(cloud_pk, folder_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            folder_pk (int):
            id (int): A unique integer value identifying this group folder.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_group_folder_request (PatchedGroupFolderRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GroupFolder
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['folder_pk'] = \
            folder_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.update_group_folder_endpoint.call_with_http_info(**kwargs)

    def update_manage_group(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Update some fields of a group  # noqa: E501

        Update some fields of a group. Must be an admin of the project  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_manage_group(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this group.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_group_request (PatchedGroupRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Group
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.update_manage_group_endpoint.call_with_http_info(**kwargs)

    def update_preview_file(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Update preview of the document  # noqa: E501

        Update preview of the document  Required scopes: document:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_preview_file(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this document.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            office_preview (file_type): Office files will be converted as pdf to provide a web preview. Supported extensions are .ppt, .pptx, .odp, .xls, .xlsx, .ods, .doc, .docx, .odt. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DocumentPreviewFile
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.update_preview_file_endpoint.call_with_http_info(**kwargs)

    def update_project(
        self,
        cloud_pk,
        id,
        **kwargs
    ):
        """Update some fields of a project  # noqa: E501

        Update some fields of a project  Required scopes: org:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_project(cloud_pk, id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this project.

        Keyword Args:
            patched_project_request (PatchedProjectRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Project
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        return self.update_project_endpoint.call_with_http_info(**kwargs)

    def update_project_user(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Change the user role in the cloud  # noqa: E501

        Change the user role in the cloud  Required scopes: cloud:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_project_user(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this user project.
            project_pk (int):

        Keyword Args:
            patched_user_project_update_request (PatchedUserProjectUpdateRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UserProject
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.update_project_user_endpoint.call_with_http_info(**kwargs)

    def update_tag(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Update some fields of the tag  # noqa: E501

        Update some fields of the tag  Required scopes: document:write  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_tag(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            id (int): A unique integer value identifying this tag.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_tag_request (PatchedTagRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Tag
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.update_tag_endpoint.call_with_http_info(**kwargs)

    def update_validation(
        self,
        cloud_pk,
        document_pk,
        id,
        project_pk,
        visa_pk,
        **kwargs
    ):
        """Update the validator of validation  # noqa: E501

        Update the validator of validation. This route is only useful for an App  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_validation(cloud_pk, document_pk, id, project_pk, visa_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            id (int): A unique integer value identifying this visa validation.
            project_pk (int): A unique integer value identifying this project.
            visa_pk (int): A unique integer value identifying this visa.

        Keyword Args:
            patched_visa_validation_request (PatchedVisaValidationRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            VisaValidation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        kwargs['visa_pk'] = \
            visa_pk
        return self.update_validation_endpoint.call_with_http_info(**kwargs)

    def update_visa(
        self,
        cloud_pk,
        document_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Update some fields of a visa  # noqa: E501

        Update some fields of a visa  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_visa(cloud_pk, document_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            id (int): A unique integer value identifying this visa.
            project_pk (int): A unique integer value identifying this project.

        Keyword Args:
            patched_visa_request (PatchedVisaRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Visa
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.update_visa_endpoint.call_with_http_info(**kwargs)

    def update_visa_comment(
        self,
        cloud_pk,
        document_pk,
        id,
        project_pk,
        visa_pk,
        **kwargs
    ):
        """Update some fields of a comment  # noqa: E501

        Update some fields of a comment  Required scopes: document:read  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_visa_comment(cloud_pk, document_pk, id, project_pk, visa_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int): A unique integer value identifying this cloud.
            document_pk (int): A unique integer value identifying this document.
            id (int): A unique integer value identifying this visa comment.
            project_pk (int): A unique integer value identifying this project.
            visa_pk (int): A unique integer value identifying this visa.

        Keyword Args:
            patched_visa_comment_request (PatchedVisaCommentRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            VisaComment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['document_pk'] = \
            document_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        kwargs['visa_pk'] = \
            visa_pk
        return self.update_visa_comment_endpoint.call_with_http_info(**kwargs)

