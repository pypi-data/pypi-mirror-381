"""
    BIMData API

    BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.  # noqa: E501

    The version of the OpenAPI document: v1 (v1)
    Contact: support@bimdata.io
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bimdata_api_client.api_client import ApiClient, Endpoint as _Endpoint
from bimdata_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bimdata_api_client.model.patched_web_hook_request import PatchedWebHookRequest
from bimdata_api_client.model.web_hook import WebHook
from bimdata_api_client.model.web_hook_request import WebHookRequest


class WebhookApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_project_web_hook_endpoint = _Endpoint(
            settings={
                'response_type': (WebHook,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/webhook',
                'operation_id': 'create_project_web_hook',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                    'web_hook_request',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                    'web_hook_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                    'web_hook_request':
                        (WebHookRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                    'web_hook_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.create_web_hook_endpoint = _Endpoint(
            settings={
                'response_type': (WebHook,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/webhook',
                'operation_id': 'create_web_hook',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'web_hook_request',
                ],
                'required': [
                    'cloud_pk',
                    'web_hook_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'web_hook_request':
                        (WebHookRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'web_hook_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.delete_project_web_hook_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/webhook/{id}',
                'operation_id': 'delete_project_web_hook',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_web_hook_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/webhook/{id}',
                'operation_id': 'delete_web_hook',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_project_web_hook_endpoint = _Endpoint(
            settings={
                'response_type': (WebHook,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/webhook/{id}',
                'operation_id': 'get_project_web_hook',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_project_web_hooks_endpoint = _Endpoint(
            settings={
                'response_type': ([WebHook],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/webhook',
                'operation_id': 'get_project_web_hooks',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'project_pk',
                ],
                'required': [
                    'cloud_pk',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'project_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'project_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_web_hook_endpoint = _Endpoint(
            settings={
                'response_type': (WebHook,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/webhook/{id}',
                'operation_id': 'get_web_hook',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_web_hooks_endpoint = _Endpoint(
            settings={
                'response_type': ([WebHook],),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/webhook',
                'operation_id': 'get_web_hooks',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                ],
                'required': [
                    'cloud_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ping_project_web_hook_endpoint = _Endpoint(
            settings={
                'response_type': (WebHook,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/webhook/{id}/ping',
                'operation_id': 'ping_project_web_hook',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'web_hook_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'web_hook_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'web_hook_request':
                        (WebHookRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'web_hook_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.ping_web_hook_endpoint = _Endpoint(
            settings={
                'response_type': (WebHook,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/webhook/{id}/ping',
                'operation_id': 'ping_web_hook',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'web_hook_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'web_hook_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'web_hook_request':
                        (WebHookRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'web_hook_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_project_web_hook_endpoint = _Endpoint(
            settings={
                'response_type': (WebHook,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/project/{project_pk}/webhook/{id}',
                'operation_id': 'update_project_web_hook',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                    'patched_web_hook_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                    'project_pk',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'project_pk':
                        (int,),
                    'patched_web_hook_request':
                        (PatchedWebHookRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                    'project_pk': 'project_pk',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'project_pk': 'path',
                    'patched_web_hook_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.update_web_hook_endpoint = _Endpoint(
            settings={
                'response_type': (WebHook,),
                'auth': [
                    'ApiKey',
                    'BIMData_Connect',
                    'BIMData_Connect',
                    'Bearer'
                ],
                'endpoint_path': '/cloud/{cloud_pk}/webhook/{id}',
                'operation_id': 'update_web_hook',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'cloud_pk',
                    'id',
                    'patched_web_hook_request',
                ],
                'required': [
                    'cloud_pk',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cloud_pk':
                        (int,),
                    'id':
                        (int,),
                    'patched_web_hook_request':
                        (PatchedWebHookRequest,),
                },
                'attribute_map': {
                    'cloud_pk': 'cloud_pk',
                    'id': 'id',
                },
                'location_map': {
                    'cloud_pk': 'path',
                    'id': 'path',
                    'patched_web_hook_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )

    def create_project_web_hook(
        self,
        cloud_pk,
        project_pk,
        web_hook_request,
        **kwargs
    ):
        """Create a new project Webhook  # noqa: E501

        Create a new project Webhook  Required scopes: webhook:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_project_web_hook(cloud_pk, project_pk, web_hook_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            project_pk (int):
            web_hook_request (WebHookRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            WebHook
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        kwargs['web_hook_request'] = \
            web_hook_request
        return self.create_project_web_hook_endpoint.call_with_http_info(**kwargs)

    def create_web_hook(
        self,
        cloud_pk,
        web_hook_request,
        **kwargs
    ):
        """Create a new Webhook  # noqa: E501

        Create a new Webhook  Required scopes: webhook:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_web_hook(cloud_pk, web_hook_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            web_hook_request (WebHookRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            WebHook
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['web_hook_request'] = \
            web_hook_request
        return self.create_web_hook_endpoint.call_with_http_info(**kwargs)

    def delete_project_web_hook(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Delete a webhook  # noqa: E501

        Delete a webhook  Required scopes: webhook:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_project_web_hook(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this web hook.
            project_pk (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.delete_project_web_hook_endpoint.call_with_http_info(**kwargs)

    def delete_web_hook(
        self,
        cloud_pk,
        id,
        **kwargs
    ):
        """Delete a webhook  # noqa: E501

        Delete a webhook  Required scopes: webhook:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_web_hook(cloud_pk, id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this web hook.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        return self.delete_web_hook_endpoint.call_with_http_info(**kwargs)

    def get_project_web_hook(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Retrieve one configured project webhook  # noqa: E501

        Retrieve one configured project webhook  Required scopes: webhook:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project_web_hook(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this web hook.
            project_pk (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            WebHook
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.get_project_web_hook_endpoint.call_with_http_info(**kwargs)

    def get_project_web_hooks(
        self,
        cloud_pk,
        project_pk,
        **kwargs
    ):
        """Retrieve all configured project webhooks  # noqa: E501

        Retrieve all configured project webhooks  Required scopes: webhook:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project_web_hooks(cloud_pk, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            project_pk (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [WebHook]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['project_pk'] = \
            project_pk
        return self.get_project_web_hooks_endpoint.call_with_http_info(**kwargs)

    def get_web_hook(
        self,
        cloud_pk,
        id,
        **kwargs
    ):
        """Retrieve one configured webhook  # noqa: E501

        Retrieve one configured webhook  Required scopes: webhook:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_web_hook(cloud_pk, id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this web hook.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            WebHook
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        return self.get_web_hook_endpoint.call_with_http_info(**kwargs)

    def get_web_hooks(
        self,
        cloud_pk,
        **kwargs
    ):
        """Retrieve all configured webhooks  # noqa: E501

        Retrieve all configured webhooks  Required scopes: webhook:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_web_hooks(cloud_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [WebHook]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        return self.get_web_hooks_endpoint.call_with_http_info(**kwargs)

    def ping_project_web_hook(
        self,
        cloud_pk,
        id,
        project_pk,
        web_hook_request,
        **kwargs
    ):
        """Test a project webhook  # noqa: E501

        Trigger a Ping Event sending {\"ok\": true} to the webhook URL. Useful to test your app  Required scopes: webhook:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ping_project_web_hook(cloud_pk, id, project_pk, web_hook_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this web hook.
            project_pk (int):
            web_hook_request (WebHookRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            WebHook
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        kwargs['web_hook_request'] = \
            web_hook_request
        return self.ping_project_web_hook_endpoint.call_with_http_info(**kwargs)

    def ping_web_hook(
        self,
        cloud_pk,
        id,
        web_hook_request,
        **kwargs
    ):
        """Test a webhook  # noqa: E501

        Trigger a Ping Event sending {\"ok\": true} to the webhook URL. Useful to test your app  Required scopes: webhook:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ping_web_hook(cloud_pk, id, web_hook_request, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this web hook.
            web_hook_request (WebHookRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            WebHook
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['web_hook_request'] = \
            web_hook_request
        return self.ping_web_hook_endpoint.call_with_http_info(**kwargs)

    def update_project_web_hook(
        self,
        cloud_pk,
        id,
        project_pk,
        **kwargs
    ):
        """Update some field of a webhook  # noqa: E501

        Update some field of a webhook  Required scopes: webhook:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_project_web_hook(cloud_pk, id, project_pk, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this web hook.
            project_pk (int):

        Keyword Args:
            patched_web_hook_request (PatchedWebHookRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            WebHook
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        kwargs['project_pk'] = \
            project_pk
        return self.update_project_web_hook_endpoint.call_with_http_info(**kwargs)

    def update_web_hook(
        self,
        cloud_pk,
        id,
        **kwargs
    ):
        """Update some field of a webhook  # noqa: E501

        Update some field of a webhook  Required scopes: webhook:manage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_web_hook(cloud_pk, id, async_req=True)
        >>> result = thread.get()

        Args:
            cloud_pk (int):
            id (int): A unique integer value identifying this web hook.

        Keyword Args:
            patched_web_hook_request (PatchedWebHookRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            WebHook
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['cloud_pk'] = \
            cloud_pk
        kwargs['id'] = \
            id
        return self.update_web_hook_endpoint.call_with_http_info(**kwargs)

