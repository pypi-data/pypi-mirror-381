# coding: utf-8

"""
    Prediction Market OpenAPI

    Prediction Market REST API for trading and market operations

    The version of the OpenAPI document: 1.0
    Contact: support@polymarket.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OpenapiPositionDataOpenAPI(BaseModel):
    """
    OpenapiPositionDataOpenAPI
    """ # noqa: E501
    avg_entry_price: Optional[StrictStr] = Field(default=None, alias="avgEntryPrice")
    claim_status: Optional[StrictInt] = Field(default=None, alias="claimStatus")
    claim_status_enum: Optional[StrictStr] = Field(default=None, description="Human-readable: CanNotClaim, WaitClaim, Claiming, ClaimFailed, Claimed", alias="claimStatusEnum")
    condition_id: Optional[StrictStr] = Field(default=None, description="Other fields", alias="conditionId")
    current_value_in_quote_token: Optional[StrictStr] = Field(default=None, description="Current value in quote token (shares Ã— current price)", alias="currentValueInQuoteToken")
    daily_pnl_change: Optional[StrictStr] = Field(default=None, alias="dailyPnlChange")
    daily_pnl_change_percent: Optional[StrictStr] = Field(default=None, alias="dailyPnlChangePercent")
    market_cutoff_at: Optional[StrictInt] = Field(default=None, alias="marketCutoffAt")
    market_id: Optional[StrictInt] = Field(default=None, description="Market info", alias="marketId")
    market_status: Optional[StrictInt] = Field(default=None, alias="marketStatus")
    market_status_enum: Optional[StrictStr] = Field(default=None, description="Human-readable market status", alias="marketStatusEnum")
    market_title: Optional[StrictStr] = Field(default=None, alias="marketTitle")
    outcome: Optional[StrictStr] = Field(default=None, description="Outcome info")
    outcome_side: Optional[StrictInt] = Field(default=None, description="1-yes, 2-no", alias="outcomeSide")
    outcome_side_enum: Optional[StrictStr] = Field(default=None, description="Human-readable: Yes, No", alias="outcomeSideEnum")
    quote_token: Optional[StrictStr] = Field(default=None, alias="quoteToken")
    root_market_id: Optional[StrictInt] = Field(default=None, description="Root market info", alias="rootMarketId")
    root_market_title: Optional[StrictStr] = Field(default=None, alias="rootMarketTitle")
    shares_frozen: Optional[StrictStr] = Field(default=None, alias="sharesFrozen")
    shares_owned: Optional[StrictStr] = Field(default=None, description="Shares info", alias="sharesOwned")
    token_id: Optional[StrictStr] = Field(default=None, alias="tokenId")
    unrealized_pnl: Optional[StrictStr] = Field(default=None, description="PnL info", alias="unrealizedPnl")
    unrealized_pnl_percent: Optional[StrictStr] = Field(default=None, alias="unrealizedPnlPercent")
    __properties: ClassVar[List[str]] = ["avgEntryPrice", "claimStatus", "claimStatusEnum", "conditionId", "currentValueInQuoteToken", "dailyPnlChange", "dailyPnlChangePercent", "marketCutoffAt", "marketId", "marketStatus", "marketStatusEnum", "marketTitle", "outcome", "outcomeSide", "outcomeSideEnum", "quoteToken", "rootMarketId", "rootMarketTitle", "sharesFrozen", "sharesOwned", "tokenId", "unrealizedPnl", "unrealizedPnlPercent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenapiPositionDataOpenAPI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenapiPositionDataOpenAPI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avgEntryPrice": obj.get("avgEntryPrice"),
            "claimStatus": obj.get("claimStatus"),
            "claimStatusEnum": obj.get("claimStatusEnum"),
            "conditionId": obj.get("conditionId"),
            "currentValueInQuoteToken": obj.get("currentValueInQuoteToken"),
            "dailyPnlChange": obj.get("dailyPnlChange"),
            "dailyPnlChangePercent": obj.get("dailyPnlChangePercent"),
            "marketCutoffAt": obj.get("marketCutoffAt"),
            "marketId": obj.get("marketId"),
            "marketStatus": obj.get("marketStatus"),
            "marketStatusEnum": obj.get("marketStatusEnum"),
            "marketTitle": obj.get("marketTitle"),
            "outcome": obj.get("outcome"),
            "outcomeSide": obj.get("outcomeSide"),
            "outcomeSideEnum": obj.get("outcomeSideEnum"),
            "quoteToken": obj.get("quoteToken"),
            "rootMarketId": obj.get("rootMarketId"),
            "rootMarketTitle": obj.get("rootMarketTitle"),
            "sharesFrozen": obj.get("sharesFrozen"),
            "sharesOwned": obj.get("sharesOwned"),
            "tokenId": obj.get("tokenId"),
            "unrealizedPnl": obj.get("unrealizedPnl"),
            "unrealizedPnlPercent": obj.get("unrealizedPnlPercent")
        })
        return _obj


