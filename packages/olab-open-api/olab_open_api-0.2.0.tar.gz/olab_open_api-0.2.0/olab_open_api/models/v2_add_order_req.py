# coding: utf-8

"""
    Prediction Market OpenAPI

    Prediction Market REST API for trading and market operations

    The version of the OpenAPI document: 1.0
    Contact: support@polymarket.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class V2AddOrderReq(BaseModel):
    """
    V2AddOrderReq
    """ # noqa: E501
    contract_address: Optional[StrictStr] = Field(default=None, description="conditionToken", alias="contractAddress")
    currency_address: Optional[StrictStr] = Field(default=None, alias="currencyAddress")
    expiration: Optional[StrictStr] = Field(default=None, description="Order expiration time stamp (no signature) for build order salt")
    fee_rate_bps: Optional[StrictStr] = Field(default=None, description="A processing rate expressed in basis points, collected from the earnings of the order creator", alias="feeRateBps")
    maker: Optional[StrictStr] = Field(default=None, description="The creator of the order, that is, the source of the order funds")
    maker_amount: Optional[StrictStr] = Field(default=None, description="The number of creators, i.e. the maximum number of tokens to be sold", alias="makerAmount")
    nonce: Optional[StrictStr] = Field(default=None, description="nonce for on-chain order cancellation")
    order_exp_time: Optional[StrictStr] = Field(default=None, description="Order expiration time stamp (for automatic cancellation)", alias="orderExpTime")
    origin: Optional[StrictStr] = None
    price: Optional[StrictStr] = Field(default=None, description="price")
    safe_rate: Optional[StrictStr] = Field(default=None, description="Market protection rate, the final transaction price deviates from the current spread, 0 means no protection, eg: 0.05", alias="safeRate")
    salt: Optional[StrictStr] = Field(default=None, description="A unique salt value that ensures entropy randomness")
    side: Optional[StrictStr] = Field(default=None, description="Direction of the order: SELL or SELL")
    sign: Optional[StrictStr] = Field(default=None, description="order unique sign")
    signature: Optional[StrictStr] = Field(default=None, description="Order signature")
    signature_type: Optional[StrictStr] = Field(default=None, description="The type of signature used for the order: EOA, POLY_PROXY or POLY_GNOSIS_SAFE", alias="signatureType")
    signer: Optional[StrictStr] = Field(default=None, description="The signer of the order")
    taker: Optional[StrictStr] = Field(default=None, description="The address of the recipient of the order. Use a zero address to indicate a public order")
    taker_amount: Optional[StrictStr] = Field(default=None, description="The number of recipients is the minimum number of tokens to be received", alias="takerAmount")
    timestamp: Optional[StrictInt] = Field(default=None, description="sign timestamp")
    token_id: Optional[StrictStr] = Field(default=None, description="To buy or sell the token of the c t f e r c1155 asset id", alias="tokenId")
    topic_id: Optional[StrictInt] = Field(default=None, description="topicId", alias="topicId")
    trading_method: Optional[StrictInt] = Field(default=None, description="Trading method :1- market price, 2- limit price", alias="tradingMethod")
    __properties: ClassVar[List[str]] = ["contractAddress", "currencyAddress", "expiration", "feeRateBps", "maker", "makerAmount", "nonce", "orderExpTime", "origin", "price", "safeRate", "salt", "side", "sign", "signature", "signatureType", "signer", "taker", "takerAmount", "timestamp", "tokenId", "topicId", "tradingMethod"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V2AddOrderReq from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V2AddOrderReq from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contractAddress": obj.get("contractAddress"),
            "currencyAddress": obj.get("currencyAddress"),
            "expiration": obj.get("expiration"),
            "feeRateBps": obj.get("feeRateBps"),
            "maker": obj.get("maker"),
            "makerAmount": obj.get("makerAmount"),
            "nonce": obj.get("nonce"),
            "orderExpTime": obj.get("orderExpTime"),
            "origin": obj.get("origin"),
            "price": obj.get("price"),
            "safeRate": obj.get("safeRate"),
            "salt": obj.get("salt"),
            "side": obj.get("side"),
            "sign": obj.get("sign"),
            "signature": obj.get("signature"),
            "signatureType": obj.get("signatureType"),
            "signer": obj.get("signer"),
            "taker": obj.get("taker"),
            "takerAmount": obj.get("takerAmount"),
            "timestamp": obj.get("timestamp"),
            "tokenId": obj.get("tokenId"),
            "topicId": obj.get("topicId"),
            "tradingMethod": obj.get("tradingMethod")
        })
        return _obj


