# coding: utf-8

"""
    Prediction Market OpenAPI

    Prediction Market REST API for trading and market operations

    The version of the OpenAPI document: 1.0
    Contact: support@polymarket.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from olab_open_api.models.openapi_quote_token_balance import OpenapiQuoteTokenBalance
from typing import Optional, Set
from typing_extensions import Self

class OpenapiBalanceRespOpenAPI(BaseModel):
    """
    OpenapiBalanceRespOpenAPI
    """ # noqa: E501
    balances: Optional[List[OpenapiQuoteTokenBalance]] = Field(default=None, description="List of quote token balances")
    chain_id: Optional[StrictStr] = Field(default=None, description="Chain ID", alias="chainId")
    multi_sign_address: Optional[StrictStr] = Field(default=None, description="Multi-sig wallet address (empty if not exists)", alias="multiSignAddress")
    wallet_address: Optional[StrictStr] = Field(default=None, description="User's wallet address", alias="walletAddress")
    __properties: ClassVar[List[str]] = ["balances", "chainId", "multiSignAddress", "walletAddress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenapiBalanceRespOpenAPI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in balances (list)
        _items = []
        if self.balances:
            for _item_balances in self.balances:
                if _item_balances:
                    _items.append(_item_balances.to_dict())
            _dict['balances'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenapiBalanceRespOpenAPI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "balances": [OpenapiQuoteTokenBalance.from_dict(_item) for _item in obj["balances"]] if obj.get("balances") is not None else None,
            "chainId": obj.get("chainId"),
            "multiSignAddress": obj.get("multiSignAddress"),
            "walletAddress": obj.get("walletAddress")
        })
        return _obj


