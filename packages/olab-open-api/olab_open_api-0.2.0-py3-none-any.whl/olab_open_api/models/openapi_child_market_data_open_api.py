# coding: utf-8

"""
    Prediction Market OpenAPI

    Prediction Market REST API for trading and market operations

    The version of the OpenAPI document: 1.0
    Contact: support@polymarket.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from olab_open_api.models.models_topic_status import ModelsTopicStatus
from typing import Optional, Set
from typing_extensions import Self

class OpenapiChildMarketDataOpenAPI(BaseModel):
    """
    OpenapiChildMarketDataOpenAPI
    """ # noqa: E501
    chain_id: Optional[StrictStr] = Field(default=None, alias="chainId")
    condition_id: Optional[StrictStr] = Field(default=None, description="Resolution info", alias="conditionId")
    created_at: Optional[StrictInt] = Field(default=None, description="Time fields (moved to bottom)", alias="createdAt")
    cutoff_at: Optional[StrictInt] = Field(default=None, alias="cutoffAt")
    market_id: Optional[StrictInt] = Field(default=None, description="Basic market info", alias="marketId")
    market_title: Optional[StrictStr] = Field(default=None, alias="marketTitle")
    no_label: Optional[StrictStr] = Field(default=None, alias="noLabel")
    no_token_id: Optional[StrictStr] = Field(default=None, alias="noTokenId")
    question_id: Optional[StrictStr] = Field(default=None, description="Additional data", alias="questionId")
    quote_token: Optional[StrictStr] = Field(default=None, description="Chain info", alias="quoteToken")
    resolved_at: Optional[StrictInt] = Field(default=None, alias="resolvedAt")
    result_token_id: Optional[StrictStr] = Field(default=None, alias="resultTokenId")
    rules: Optional[StrictStr] = None
    status: Optional[ModelsTopicStatus] = None
    status_enum: Optional[StrictStr] = Field(default=None, description="Human-readable status", alias="statusEnum")
    volume: Optional[StrictStr] = Field(default=None, description="Market metrics")
    yes_label: Optional[StrictStr] = Field(default=None, description="Labels and rules", alias="yesLabel")
    yes_token_id: Optional[StrictStr] = Field(default=None, description="Token info", alias="yesTokenId")
    __properties: ClassVar[List[str]] = ["chainId", "conditionId", "createdAt", "cutoffAt", "marketId", "marketTitle", "noLabel", "noTokenId", "questionId", "quoteToken", "resolvedAt", "resultTokenId", "rules", "status", "statusEnum", "volume", "yesLabel", "yesTokenId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenapiChildMarketDataOpenAPI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenapiChildMarketDataOpenAPI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chainId": obj.get("chainId"),
            "conditionId": obj.get("conditionId"),
            "createdAt": obj.get("createdAt"),
            "cutoffAt": obj.get("cutoffAt"),
            "marketId": obj.get("marketId"),
            "marketTitle": obj.get("marketTitle"),
            "noLabel": obj.get("noLabel"),
            "noTokenId": obj.get("noTokenId"),
            "questionId": obj.get("questionId"),
            "quoteToken": obj.get("quoteToken"),
            "resolvedAt": obj.get("resolvedAt"),
            "resultTokenId": obj.get("resultTokenId"),
            "rules": obj.get("rules"),
            "status": obj.get("status"),
            "statusEnum": obj.get("statusEnum"),
            "volume": obj.get("volume"),
            "yesLabel": obj.get("yesLabel"),
            "yesTokenId": obj.get("yesTokenId")
        })
        return _obj


