# coding: utf-8

"""
    Prediction Market OpenAPI

    Prediction Market REST API for trading and market operations

    The version of the OpenAPI document: 1.0
    Contact: support@polymarket.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OpenapiOrderDataOpenAPI(BaseModel):
    """
    OpenapiOrderDataOpenAPI
    """ # noqa: E501
    created_at: Optional[StrictInt] = Field(default=None, description="Time fields (moved to bottom)", alias="createdAt")
    expires_at: Optional[StrictInt] = Field(default=None, alias="expiresAt")
    filled_amount: Optional[StrictStr] = Field(default=None, description="Filled amount (quote token)", alias="filledAmount")
    filled_shares: Optional[StrictStr] = Field(default=None, description="Execution info (filled status)", alias="filledShares")
    market_id: Optional[StrictInt] = Field(default=None, description="Market info", alias="marketId")
    market_title: Optional[StrictStr] = Field(default=None, alias="marketTitle")
    order_amount: Optional[StrictStr] = Field(default=None, description="Total amount in order (quote token)", alias="orderAmount")
    order_id: Optional[StrictInt] = Field(default=None, description="Order identification", alias="orderId")
    order_shares: Optional[StrictStr] = Field(default=None, description="Order size (original order submission) For limit orders: orderShares is specified, orderAmount = orderShares * price For market orders: orderAmount is specified (buy) or orderShares is specified (sell)", alias="orderShares")
    outcome: Optional[StrictStr] = None
    outcome_side: Optional[StrictInt] = Field(default=None, description="1-yes, 2-no", alias="outcomeSide")
    outcome_side_enum: Optional[StrictStr] = Field(default=None, description="Human-readable: Yes, No", alias="outcomeSideEnum")
    price: Optional[StrictStr] = Field(default=None, description="Price per share (for limit orders)")
    profit: Optional[StrictStr] = None
    quote_token: Optional[StrictStr] = Field(default=None, description="Token info", alias="quoteToken")
    root_market_id: Optional[StrictInt] = Field(default=None, alias="rootMarketId")
    root_market_title: Optional[StrictStr] = Field(default=None, alias="rootMarketTitle")
    side: Optional[StrictInt] = Field(default=None, description="Order details")
    side_enum: Optional[StrictStr] = Field(default=None, description="Human-readable: Buy, Sell", alias="sideEnum")
    status: Optional[StrictInt] = Field(default=None, description="1-pending, 2-finished, 3-canceled, 4-expired, 5-failed")
    status_enum: Optional[StrictStr] = Field(default=None, description="Human-readable: Pending, Finished, Canceled, Expired, Failed", alias="statusEnum")
    trading_method: Optional[StrictInt] = Field(default=None, description="1-market, 2-limit", alias="tradingMethod")
    trading_method_enum: Optional[StrictStr] = Field(default=None, description="Human-readable: Market, Limit", alias="tradingMethodEnum")
    __properties: ClassVar[List[str]] = ["createdAt", "expiresAt", "filledAmount", "filledShares", "marketId", "marketTitle", "orderAmount", "orderId", "orderShares", "outcome", "outcomeSide", "outcomeSideEnum", "price", "profit", "quoteToken", "rootMarketId", "rootMarketTitle", "side", "sideEnum", "status", "statusEnum", "tradingMethod", "tradingMethodEnum"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenapiOrderDataOpenAPI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenapiOrderDataOpenAPI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "expiresAt": obj.get("expiresAt"),
            "filledAmount": obj.get("filledAmount"),
            "filledShares": obj.get("filledShares"),
            "marketId": obj.get("marketId"),
            "marketTitle": obj.get("marketTitle"),
            "orderAmount": obj.get("orderAmount"),
            "orderId": obj.get("orderId"),
            "orderShares": obj.get("orderShares"),
            "outcome": obj.get("outcome"),
            "outcomeSide": obj.get("outcomeSide"),
            "outcomeSideEnum": obj.get("outcomeSideEnum"),
            "price": obj.get("price"),
            "profit": obj.get("profit"),
            "quoteToken": obj.get("quoteToken"),
            "rootMarketId": obj.get("rootMarketId"),
            "rootMarketTitle": obj.get("rootMarketTitle"),
            "side": obj.get("side"),
            "sideEnum": obj.get("sideEnum"),
            "status": obj.get("status"),
            "statusEnum": obj.get("statusEnum"),
            "tradingMethod": obj.get("tradingMethod"),
            "tradingMethodEnum": obj.get("tradingMethodEnum")
        })
        return _obj


