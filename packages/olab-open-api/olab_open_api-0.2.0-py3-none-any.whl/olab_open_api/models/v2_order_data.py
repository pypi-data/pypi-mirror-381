# coding: utf-8

"""
    Prediction Market OpenAPI

    Prediction Market REST API for trading and market operations

    The version of the OpenAPI document: 1.0
    Contact: support@polymarket.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class V2OrderData(BaseModel):
    """
    V2OrderData
    """ # noqa: E501
    amount: Optional[StrictStr] = Field(default=None, description="Amount field represents different things based on Side: - For BUY orders (Side=1): Amount = USDC (quote token) - the total USDC to spend - For SELL orders (Side=2): Amount = Shares (base token) - the total shares to sell This is derived from MakerAmount in CTF Exchange standard where:   BUY: MakerAmount=USDC, TakerAmount=Shares   SELL: MakerAmount=Shares, TakerAmount=USDC")
    created_at: Optional[StrictInt] = Field(default=None, alias="createdAt")
    currency_address: Optional[StrictStr] = Field(default=None, alias="currencyAddress")
    expiration: Optional[StrictInt] = None
    filled: Optional[StrictStr] = None
    mutil_title: Optional[StrictStr] = Field(default=None, alias="mutilTitle")
    mutil_topic_id: Optional[StrictInt] = Field(default=None, alias="mutilTopicId")
    order_id: Optional[StrictInt] = Field(default=None, alias="orderId")
    outcome: Optional[StrictStr] = None
    outcome_side: Optional[StrictInt] = Field(default=None, description="1 - yes, 2 - no", alias="outcomeSide")
    price: Optional[StrictStr] = None
    profit: Optional[StrictStr] = None
    side: Optional[StrictInt] = Field(default=None, description="1-for buy, 2-for sell")
    status: Optional[StrictInt] = Field(default=None, description="1-pending, 2-finished, 3-canceled, 4-expired, 5-failed")
    topic_id: Optional[StrictInt] = Field(default=None, alias="topicId")
    topic_title: Optional[StrictStr] = Field(default=None, alias="topicTitle")
    total_price: Optional[StrictStr] = Field(default=None, alias="totalPrice")
    trading_method: Optional[StrictInt] = Field(default=None, description="买卖方式:1-市价,2-现价", alias="tradingMethod")
    trans_no: Optional[StrictStr] = Field(default=None, alias="transNo")
    __properties: ClassVar[List[str]] = ["amount", "createdAt", "currencyAddress", "expiration", "filled", "mutilTitle", "mutilTopicId", "orderId", "outcome", "outcomeSide", "price", "profit", "side", "status", "topicId", "topicTitle", "totalPrice", "tradingMethod", "transNo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V2OrderData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V2OrderData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "createdAt": obj.get("createdAt"),
            "currencyAddress": obj.get("currencyAddress"),
            "expiration": obj.get("expiration"),
            "filled": obj.get("filled"),
            "mutilTitle": obj.get("mutilTitle"),
            "mutilTopicId": obj.get("mutilTopicId"),
            "orderId": obj.get("orderId"),
            "outcome": obj.get("outcome"),
            "outcomeSide": obj.get("outcomeSide"),
            "price": obj.get("price"),
            "profit": obj.get("profit"),
            "side": obj.get("side"),
            "status": obj.get("status"),
            "topicId": obj.get("topicId"),
            "topicTitle": obj.get("topicTitle"),
            "totalPrice": obj.get("totalPrice"),
            "tradingMethod": obj.get("tradingMethod"),
            "transNo": obj.get("transNo")
        })
        return _obj


