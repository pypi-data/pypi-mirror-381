# coding: utf-8

"""
    Phoenix API

    Base API for Glumanda and other services.

    The version of the OpenAPI document: Alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from phoenix_sdk.models.device_schema_out import DeviceSchemaOUT

class TestDeviceSchemaOUT(unittest.TestCase):
    """DeviceSchemaOUT unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeviceSchemaOUT:
        """Test DeviceSchemaOUT
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeviceSchemaOUT`
        """
        model = DeviceSchemaOUT()
        if include_optional:
            return DeviceSchemaOUT(
                created_by_id = '',
                id = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                name = '',
                conf = { },
                config_id = '',
                app_key = '',
                unit_id = '',
                company_id = '',
                config = phoenix_sdk.models.device_config_min.DeviceConfigMin(
                    display_name = '', 
                    manufacturer = '', 
                    device_type = '', 
                    protocol = '', ),
                unit = phoenix_sdk.models.unit_schema_min.UnitSchemaMin(
                    id = '', 
                    name = '', ),
                last_seen = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return DeviceSchemaOUT(
        )
        """

    def testDeviceSchemaOUT(self):
        """Test DeviceSchemaOUT"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
