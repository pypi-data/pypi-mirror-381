[build-system]
requires = ['hatchling']
build-backend = 'hatchling.build'


[tool.hatch.version]
path = 'domain_event_pattern/__init__.py'

[tool.hatch.build.targets.sdist]
include = ['domain_event_pattern/']


[project]
name = 'domain-event-pattern'
description = 'The Domain Event Pattern is a Python package that implements the Domain Event pattern.'
readme = './README.md'
authors = [{ name = 'Adria Montoto' }]
license = 'MIT'
classifiers = [
    'License :: OSI Approved :: MIT License',
    'Intended Audience :: Developers',
    'Operating System :: OS Independent',
    'Typing :: Typed',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
]
keywords = [
    'python',
    'development',
    'tools',
    'utilities',
    'domain-events',
    'event-bus',
]
requires-python = '>=3.11'
dependencies = ['value-object-pattern>=1.14.1']
dynamic = ['version']

[project.urls]
Homepage = 'https://github.com/adriamontoto/domain-event-pattern'
Repository = 'https://github.com/adriamontoto/domain-event-pattern'
Issues = 'https://github.com/adriamontoto/domain-event-pattern/issues'


[dependency-groups]
audit = ['pip-audit>=2.9.0']
coverage = ['coverage[toml]>=7.0.0', 'smokeshow>=0.5.0']
develop = ['pre-commit>=3.1.0']
format = ['ruff>=0.11.10']
lint = ['ruff>=0.11.10', 'mypy[reports]>=1.0.0', { include-group = 'test' }]
release = ['build>=1.2.2', 'python-semantic-release>=10.0.2']
test = [
    'pytest>=8.0.0',
    'pytest-randomly>=3.0.0',
    'object-mother-pattern>=3.1.1',
    { include-group = 'coverage' },
]
all = [
    { include-group = 'audit' },
    { include-group = 'coverage' },
    { include-group = 'develop' },
    { include-group = 'format' },
    { include-group = 'lint' },
    { include-group = 'release' },
    { include-group = 'test' },
]


[tool.pytest.ini_options]
pythonpath = '.'
addopts = [
    '--strict-config',  # fail if an unregistered option is used
    '--strict-markers', # fail if an unregistered marker is used
    '--color=yes',      # color the output
]
markers = ['unit_testing: Check a unique functionality']
xfail_strict = true


[tool.coverage.run]
source = ['domain_event_pattern']
parallel = true
branch = true
relative_files = true

[tool.coverage.report]
show_missing = true
skip_covered = true
precision = 2
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    'if typing.TYPE_CHECKING:',
    '@overload',
    '@typing.overload',
    'typing.assert_never',
    'assert_never',
]
omit = ['*mother.py']

[tool.coverage.paths]
source = ['domain_event_pattern']


[tool.ruff]
indent-width = 4
line-length = 120
target-version = 'py313'
output-format = 'grouped'

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 120
indent-style = 'space'
quote-style = 'single'
skip-magic-trailing-comma = false

[tool.ruff.lint]
select = [
    'F',    # pyflakes
    'S',    # flake8-bandit
    'B',    # flake8-bugbear
    'DTZ',  # flake8-datetimez
    'C4',   # flake8-comprehensions
    'SIM',  # flake8-simplify
    'I',    # isort
    'C90',  # mccabe
    'N',    # pep8-naming
    'PERF', # perflint
    'E',    # pycodestyle
    'W',    # pycodestyle
    'D',    # pydocstyle
    'UP',   # pyupgrade
    'RUF',  # ruff
]
ignore = [
    'UP035',  # Checks for uses of deprecated imports based on the minimum supported Python version.
    'UP036',  # Checks for conditional blocks gated on sys.version_info comparisons that are outdated for the minimum supported Python version.
    'E111',   # Checks for indentation with a non-multiple of 4 spaces.
    'E114',   # Checks for indentation of comments with a non-multiple of 4 spaces.
    'E117',   # Checks for over-indented code.
    'W191',   # Checks for indentation that uses tabs.
    'D200',   # Checks for single-line docstrings that are broken across multiple lines.
    'D205',   # 1 blank line required between summary line and description.
    'D206',   # Checks for docstrings that are indented with tabs.
    'D212',   # Checks for docstring summary lines that are not positioned on the first physical line of the docstring.
    'D401',   # First line of docstring should be in imperative mood.
    'D300',   # Checks for docstrings that use '''triple single quotes''' instead of 'triple double quotes'.
    'RUF100', # Checks for unused noqa directives.
]

[tool.ruff.lint.per-file-ignores]
'__init__.py' = [
    'F401', # Checks for unused imports.
    'D104', # Checks for undocumented public package definitions.
]
'**test**.py' = [
    'S101', # Use of `assert` detected.
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = 'pep257'

[tool.ruff.lint.isort]
case-sensitive = true
extra-standard-library = ['typing_extensions']
known-first-party = ['domain_event_pattern']
combine-as-imports = true


[tool.mypy]
strict = true
warn_unreachable = true
enable_error_code = [
    'redundant-expr',
    'possibly-undefined',
    'truthy-bool',
    'explicit-override',
]


[tool.semantic_release]
allow_zero_version = true
commit_message = 'bump: new version {version} released'
commit_parser = 'conventional'
major_on_zero = true
no_git_verify = false
tag_format = 'v{version}'
version_variables = ['domain_event_pattern/__init__.py:__version__']

[tool.semantic_release.commit_parser_options]
minor_tags = ['feat']
patch_tags = ['fix', 'perf', 'build']
allowed_tags = ['feat', 'fix', 'perf', 'build']
default_bump_level = 0
parse_squash_commits = false
ignore_merge_commits = true

[tool.semantic_release.changelog]
template_dir = 'docs/changelog_template'
mode = 'update'
exclude_commit_patterns = ['''Merged? .*''']
