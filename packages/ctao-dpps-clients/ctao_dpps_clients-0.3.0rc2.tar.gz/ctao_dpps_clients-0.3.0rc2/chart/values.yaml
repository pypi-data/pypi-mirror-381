image:
  repository_prefix: "harbor.cta-observatory.org/dpps/dpps"
  pullPolicy: IfNotPresent

dev:
  # -- run tests in the container
  run_tests: true
  # -- sleep after test to allow interactive development
  sleep: false
  # -- mount the repo volume to test the code as it is being developed
  mount_repo: true

  # -- tag of the image used to run helm tests
  client_image_tag:

  # -- if true, a long-running client container will start *instead* of a test container
  start_long_running_client: false

  # -- user to run the container as. needs to be the same as local user if writing to repo directory
  runAsUser: 1000
  runAsGroup: 1000

  # -- number of parallel test jobs for pytest
  n_test_jobs: 1

  # -- Pipelines versions used in the tests
  pipelines:
    datapipe:
      version: v0.2.1
    calibpipe:
      version: v0.2.0


bdms:
  # -- Whether to deploy BDMS
  enabled: true
  configure_test_setup: true
  safe_to_bootstrap_rucio: true


  cert-generator-grid:
    enabled: false

  rucio_iam_sync_user:
    iam_server: http://dpps-iam-login-service:8080

  iam:
    nameOverride: "iam"
    enabled: true
    dev:
      mount_repo: false

    iam:
      nameOverride: "iam"
      mysql:
        enabled: false

      mariadb:
        enabled: false

      database:
        external:
          host: dpps-mariadb
          port: 3306
          name: indigo-iam
          username: indigo-iam
          password: PassW0rd
          existingSecret: ""
    bootstrap:
      extraVolumes:
      - name: dppsuser-certkey
        secret:
          defaultMode: 0420
          secretName: dpps-dppsuser-certkey
      - name: dppsuser-certkey-600
        secret:
          defaultMode: 0600
          secretName: dpps-dppsuser-certkey
      - name: dppsuser-certkey-400
        secret:
          defaultMode: 0400
          secretName: dpps-dppsuser-certkey

      - name: dppsuser-unprivileged-certkey
        secret:
          defaultMode: 0420
          secretName: dpps-dppsuser-unprivileged-certkey
      - name: dppsuser-unprivileged-certkey-600
        secret:
          defaultMode: 0600
          secretName: dpps-dppsuser-unprivileged-certkey
      - name: dppsuser-unprivileged-certkey-400
        secret:
          defaultMode: 0400
          secretName: dpps-dppsuser-unprivileged-certkey
      - name: dppsuser-non-dpps-certkey
        secret:
          defaultMode: 0420
          secretName: dpps-dppsuser-non-dpps-certkey
      - name: dppsuser-non-dpps-certkey-600
        secret:
          defaultMode: 0600
          secretName: dpps-dppsuser-non-dpps-certkey
      - name: dppsuser-non-dpps-certkey-400
        secret:
          defaultMode: 0400
          secretName: dpps-dppsuser-non-dpps-certkey


wms:
  # -- Whether to deploy WMS
  enabled: true
  cert-generator-grid:
    enabled: false

  # This configuration of interface between WMS and BDMS.
  # The ConfigMap is created by BDMS chart. The name should match the name of the ConfigMap in BDMS chart given the release name.
  rucio:
    enabled: true
    rucioConfig: "dpps-bdms-rucio-config"

  cvmfs:
    enabled: true
    publish_docker_images:
      - "harbor.cta-observatory.org/dpps/datapipe:v0.2.1"
      - "harbor.cta-observatory.org/dpps/calibpipe:v0.2.0"

  # use wms mariad-db subchart also as db for iam, avoids multiple mariadb servers
  # and currently also naming conflicts with two mariadb charts active
  mariadb:
    global:
      security:
        # needed to override bitnami image; see also https://gitlab.cta-observatory.org/cta-computing/dpps/aiv/mariadb-chart/-/issues/1
        allowInsecureImages: true
    enabled: true
    image:
      registry: harbor.cta-observatory.org/proxy_cache
      repository: bitnamilegacy/mariadb
    auth:
      rootPassword: "dirac-db-root"
    initdbScripts:
      create-user.sql: |
        CREATE USER IF NOT EXISTS 'Dirac'@'%' IDENTIFIED BY 'dirac-db';
        CREATE USER IF NOT EXISTS 'indigo-iam'@'%' IDENTIFIED BY 'PassW0rd';
        CREATE DATABASE IF NOT EXISTS `indigo-iam`;
        GRANT ALL PRIVILEGES ON `indigo-iam`.* TO `indigo-iam`@`%`;
        FLUSH PRIVILEGES;

# dpps-level generator
cert-generator-grid:
  enabled: true
  generatePreHooks: true

  extra_server_names:
  - iam.test.example
  - voms.test.example
  - rucio-storage-1
  - rucio-storage-2
  - rucio-storage-3
  - fts
  - dirac-server

  # List of users to create certificates for
  users:
  - name: DPPS User
    suffix: ""
  - name: DPPS User Unprivileged
    suffix: "-unprivileged"
  - name: Non-DPPS User
    suffix: "-non-dpps"


# observability

global:
  image:
    registry: harbor.cta-observatory.org/proxy_cache

grafana:
  enabled: true
  image:
    registry: harbor.cta-observatory.org/proxy_cache

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://dpps-prometheus-server

        - name: Loki
          type: loki
          access: proxy
          url: http://dpps-loki:3100
          jsonData:
            timeout: 60
            maxLines: 1000

  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          type: file
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default

        - name: 'sidecar'
          type: file
          editable: true
          options:
            path: /var/lib/grafana/dashboards/sidecar

  dashboards:
    default:
      k8-views-global:
        gnetId: 15757
        revision: 43
        datasource: Prometheus
      k8-views-namespaces:
        gnetId: 15758
        revision: 42
        datasource: Prometheus
      k8-views-nodes:
        gnetId: 15759
        revision: 37
        datasource: Prometheus
      k8-views-pods:
        gnetId: 15760
        revision: 36
        datasource: Prometheus

  ingress:
    enabled: true
    hosts:
      - grafana.dpps.local

  testFramework:
    enabled: false

  # collects configmaps and adds resources to grafana
  sidecar:
    image:
      registry:  harbor.cta-observatory.org/proxy_cache

    dashboards:
      enabled: true
      searchNamespace: ALL
      folder: /var/lib/grafana/dashboards/sidecar
      folderAnnotation: grafana_folder
      defaultFolderName: "Sidecar Dashboards"
      provider:
        name: 'sidecar'

  persistentVolume:
    size: 100Mi
  retention: "1d"

  prometheus-node-exporter:
    enabled: false

  adminUser: "admin"
  adminPassword: "admin"


prometheus:
  enabled: true
  server:
    image:
      repository: harbor.cta-observatory.org/proxy_cache/prom/prometheus

  prometheus-pushgateway:
    enabled: false

  alertmanager:
    enabled: false

  prometheus-node-exporter:
    image:
      registry: harbor.cta-observatory.org/proxy_cache
      repository: prom/node-exporter


loki:
  enabled: true

  # this is a minimal configuration for loki; the goal of the UC is not to test diverse loki features,
  # but to make sure that loki can collect meaningful logs from the DPPS components

  # needed to run in rancher
  # global:
  #   dnsService: "rke2-coredns-rke2-coredns"

  loki:
    commonConfig:
      replication_factor: 1
    schemaConfig:
      configs:
        - from: "2024-04-01"
          store: tsdb
          object_store: s3
          schema: v13
          index:
            prefix: loki_index_
            period: 24h
    pattern_ingester:
        enabled: true
    limits_config:
      allow_structured_metadata: true
      volume_enabled: true
    ruler:
      enable_api: true

    auth_enabled: false

  test:
    enabled: false

  monitoring:
    selfMonitoring:
      enabled: false
      grafanaAgent:
        installOperator: false
      lokiCanary:
        enabled: false

  minio:
    enabled: true
    image:
      repository: harbor.cta-observatory.org/proxy_cache/minio/minio

  memcached:
    image:
      repository: harbor.cta-observatory.org/proxy_cache/memcached
      tag: 1.6.38-alpine3.22

  deploymentMode: SingleBinary

  rollout_operator:
    enabled: false

  singleBinary:
    replicas: 1

  # Zero out replica counts of other deployment modes
  backend:
    replicas: 0
  read:
    replicas: 0
  write:
    replicas: 0

  ingester:
    replicas: 0
  querier:
    replicas: 0
  queryFrontend:
    replicas: 0
  queryScheduler:
    replicas: 0
  distributor:
    replicas: 0
  compactor:
    replicas: 0
  indexGateway:
    replicas: 0
  bloomCompactor:
    replicas: 0
  bloomGateway:
    replicas: 0


fluent-bit:
  enabled: true
  image:
    repository: harbor.cta-observatory.org/proxy_cache/fluent/fluent-bit
  testFramework:
    image:
      repository: harbor.cta-observatory.org/proxy_cache/busybox
  config:
    rbac:
      create: true
      eventsAccess: true

    inputs: |
      [INPUT]
          Name tail
          Path /var/log/containers/*.log
          multiline.parser docker, cri
          Tag kube.*
          Mem_Buf_Limit 5MB
          Buffer_Chunk_Size 1
          Refresh_Interval 1
          Skip_Long_Lines On


    outputs: |
      [FILTER]
          Name grep
          Match *

      [OUTPUT]
          Name        loki
          Match       *
          Host        dpps-loki-gateway
          port        80
          tls         off
          tls.verify  off
