# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .types import (
        HttpValidationError,
        ModelPublic,
        ModelResultPublic,
        ModelResultPublicMasked,
        ValidationError,
        ValidationErrorLocItem,
    )
    from .errors import ForbiddenError, NotFoundError, UnprocessableEntityError
    from . import model_results, models
    from .client import AsyncConductorQuantum, ConductorQuantum
    from .environment import ConductorQuantumEnvironment
    from .version import __version__
_dynamic_imports: typing.Dict[str, str] = {
    "AsyncConductorQuantum": ".client",
    "ConductorQuantum": ".client",
    "ConductorQuantumEnvironment": ".environment",
    "ForbiddenError": ".errors",
    "HttpValidationError": ".types",
    "ModelPublic": ".types",
    "ModelResultPublic": ".types",
    "ModelResultPublicMasked": ".types",
    "NotFoundError": ".errors",
    "UnprocessableEntityError": ".errors",
    "ValidationError": ".types",
    "ValidationErrorLocItem": ".types",
    "__version__": ".version",
    "model_results": ".model_results",
    "models": ".models",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AsyncConductorQuantum",
    "ConductorQuantum",
    "ConductorQuantumEnvironment",
    "ForbiddenError",
    "HttpValidationError",
    "ModelPublic",
    "ModelResultPublic",
    "ModelResultPublicMasked",
    "NotFoundError",
    "UnprocessableEntityError",
    "ValidationError",
    "ValidationErrorLocItem",
    "__version__",
    "model_results",
    "models",
]
