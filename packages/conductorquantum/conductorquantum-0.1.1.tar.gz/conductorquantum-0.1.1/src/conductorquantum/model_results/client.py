# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.model_result_public import ModelResultPublic
from ..types.model_result_public_masked import ModelResultPublicMasked
from .raw_client import AsyncRawModelResultsClient, RawModelResultsClient


class ModelResultsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawModelResultsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawModelResultsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawModelResultsClient
        """
        return self._raw_client

    def info(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ModelResultPublic:
        """
        Retrieves a model result.

        Parameters
        ----------
        id : str
            The UUID of the model result.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ModelResultPublic
            Successful Response

        Examples
        --------
        from conductorquantum import ConductorQuantum

        client = ConductorQuantum(
            token="YOUR_TOKEN",
        )
        client.model_results.info(
            id="08047949-7263-4557-9122-ab293a49cae5",
        )
        """
        _response = self._raw_client.info(id, request_options=request_options)
        return _response.data

    def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Deletes a model result.

        Parameters
        ----------
        id : str
            The UUID of the model result.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from conductorquantum import ConductorQuantum

        client = ConductorQuantum(
            token="YOUR_TOKEN",
        )
        client.model_results.delete(
            id="08047949-7263-4557-9122-ab293a49cae5",
        )
        """
        _response = self._raw_client.delete(id, request_options=request_options)
        return _response.data

    def list(
        self,
        *,
        skip: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ModelResultPublicMasked]:
        """
        Retrieves a list of model results.

        Parameters
        ----------
        skip : typing.Optional[int]
            The number of model results to skip.

        limit : typing.Optional[int]
            The number of model results to include.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ModelResultPublicMasked]
            Successful Response

        Examples
        --------
        from conductorquantum import ConductorQuantum

        client = ConductorQuantum(
            token="YOUR_TOKEN",
        )
        client.model_results.list(
            skip=1,
            limit=1,
        )
        """
        _response = self._raw_client.list(skip=skip, limit=limit, request_options=request_options)
        return _response.data

    def download(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> typing.Iterator[bytes]:
        """
        Downloads a model result as a JSON file zipped with the input file.

        Parameters
        ----------
        id : str
            The UUID of the model result.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.Iterator[bytes]
            A zip file containing the model result as JSON and the input file.

        Examples
        --------
        from conductorquantum import ConductorQuantum

        client = ConductorQuantum(
            token="YOUR_TOKEN",
        )
        client.model_results.download(
            id="id",
        )
        """
        with self._raw_client.download(id, request_options=request_options) as r:
            yield from r.data


class AsyncModelResultsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawModelResultsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawModelResultsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawModelResultsClient
        """
        return self._raw_client

    async def info(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ModelResultPublic:
        """
        Retrieves a model result.

        Parameters
        ----------
        id : str
            The UUID of the model result.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ModelResultPublic
            Successful Response

        Examples
        --------
        import asyncio

        from conductorquantum import AsyncConductorQuantum

        client = AsyncConductorQuantum(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.model_results.info(
                id="08047949-7263-4557-9122-ab293a49cae5",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.info(id, request_options=request_options)
        return _response.data

    async def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Deletes a model result.

        Parameters
        ----------
        id : str
            The UUID of the model result.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from conductorquantum import AsyncConductorQuantum

        client = AsyncConductorQuantum(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.model_results.delete(
                id="08047949-7263-4557-9122-ab293a49cae5",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(id, request_options=request_options)
        return _response.data

    async def list(
        self,
        *,
        skip: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ModelResultPublicMasked]:
        """
        Retrieves a list of model results.

        Parameters
        ----------
        skip : typing.Optional[int]
            The number of model results to skip.

        limit : typing.Optional[int]
            The number of model results to include.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ModelResultPublicMasked]
            Successful Response

        Examples
        --------
        import asyncio

        from conductorquantum import AsyncConductorQuantum

        client = AsyncConductorQuantum(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.model_results.list(
                skip=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(skip=skip, limit=limit, request_options=request_options)
        return _response.data

    async def download(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.AsyncIterator[bytes]:
        """
        Downloads a model result as a JSON file zipped with the input file.

        Parameters
        ----------
        id : str
            The UUID of the model result.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration. You can pass in configuration such as `chunk_size`, and more to customize the request and response.

        Returns
        -------
        typing.AsyncIterator[bytes]
            A zip file containing the model result as JSON and the input file.

        Examples
        --------
        import asyncio

        from conductorquantum import AsyncConductorQuantum

        client = AsyncConductorQuantum(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.model_results.download(
                id="id",
            )


        asyncio.run(main())
        """
        async with self._raw_client.download(id, request_options=request_options) as r:
            async for _chunk in r.data:
                yield _chunk
