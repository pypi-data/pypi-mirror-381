# coding: utf-8

"""
    LocalStack REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 4.9.1
    Contact: info@localstack.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Message(BaseModel):
    """
    Message
    """ # noqa: E501
    message_id: Optional[StrictStr] = Field(default=None, alias="MessageId")
    receipt_handle: Optional[StrictStr] = Field(default=None, alias="ReceiptHandle")
    md5_of_body: Optional[StrictStr] = Field(default=None, alias="MD5OfBody")
    body: Optional[StrictStr] = Field(default=None, alias="Body")
    attributes: Optional[Dict[str, Any]] = Field(default=None, alias="Attributes")
    message_attributes: Optional[Dict[str, Any]] = Field(default=None, alias="MessageAttributes")
    __properties: ClassVar[List[str]] = ["MessageId", "ReceiptHandle", "MD5OfBody", "Body", "Attributes", "MessageAttributes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Message from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if message_id (nullable) is None
        # and model_fields_set contains the field
        if self.message_id is None and "message_id" in self.model_fields_set:
            _dict['MessageId'] = None

        # set to None if receipt_handle (nullable) is None
        # and model_fields_set contains the field
        if self.receipt_handle is None and "receipt_handle" in self.model_fields_set:
            _dict['ReceiptHandle'] = None

        # set to None if md5_of_body (nullable) is None
        # and model_fields_set contains the field
        if self.md5_of_body is None and "md5_of_body" in self.model_fields_set:
            _dict['MD5OfBody'] = None

        # set to None if body (nullable) is None
        # and model_fields_set contains the field
        if self.body is None and "body" in self.model_fields_set:
            _dict['Body'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Message from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "MessageId": obj.get("MessageId"),
            "ReceiptHandle": obj.get("ReceiptHandle"),
            "MD5OfBody": obj.get("MD5OfBody"),
            "Body": obj.get("Body"),
            "Attributes": obj.get("Attributes"),
            "MessageAttributes": obj.get("MessageAttributes")
        })
        return _obj


