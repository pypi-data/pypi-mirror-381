[project]
name = "kamihi"
version = "4.0.0"
description = "Framework for building Telegram bots in Python"
authors = [
    { name = "kiinami", email = "kinami@posteo.net" }
]
readme = "README.md"
license = "MIT"
license-files = ["LICENSE.md"]
keywords = [
    "telegram", "bot", "framework", "python", "python-telegram-bot",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: Pydantic",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Typing :: Typed",
]
requires-python = ">=3.12"
dependencies = [
    "alembic>=1.16.5",
    "apprise>=1.9.2",
    "copier>=9.7.1",
    "jinja2>=3.1.6",
    "loguru>=0.7.3",
    "multipledispatch>=1.0.0",
    "pydantic>=2.10.6",
    "pydantic-extra-types>=2.10.5",
    "pydantic-settings>=2.8.1",
    "python-magic>=0.4.27",
    "python-telegram-bot[job-queue]>=22.0",
    "pytz>=2025.2",
    "sqlalchemy>=2.0.43",
    "starlette>=0.46.2",
    "starlette-admin>=0.14.1",
    "telegramify-markdown>=0.5.1",
    "typer>=0.15.3",
    "types-pytz>=2025.2.0.20250326",
    "uvicorn>=0.34.2",
    "validators>=0.35.0",
]

[project.urls]
Documentation = "https://kamihi-org.github.io/kamihi/"
Repository = "https://github.com/kamihi-org/kamihi"
Issues = "https://github.com/kamihi-org/kamihi/issues"
Changelog = "https://github.com/kamihi-org/kamihi/blob/master/CHANGELOG.md"

[dependency-groups]
dev = [
    "commitizen>=4.4.1",
    "pre-commit>=4.1.0",
    "ruff>=0.11.0",
]
docs = [
    "mike>=2.1.3",
    "mkdocs>=1.6.1",
    "mkdocs-api-autonav>=0.2.1",
    "mkdocs-material>=9.6.9",
    "mkdocs-mermaid2-plugin>=1.2.1",
    "mkdocs-typer2>=0.1.4",
    "mkdocstrings[python]>=0.29.0",
    "pymdown-extensions>=10.14.3",
    "termynal>=0.13.0",
]
tests = [
    "playwright>=1.52.0",
    "pytest-docker-tools>=3.1.9",
    "pytest-lazy-fixtures>=1.4.0",
    "pytest-playwright-asyncio>=0.7.0",
    "telethon>=1.40.0",
    "toml>=0.10.2",
    "numpy>=2.3.0",
    "pillow>=11.2.1",
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0",
    "pytest-retry>=1.7.0",
    "pytest-timeout>=2.4.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.scripts]
kamihi = "kamihi.cli:app"

[tool.ruff]
target-version = "py312"
line-length = 120
extend-exclude = [
    "tests",
]
fix = true

[tool.ruff.lint]
select = [
    "D",   # pydocstyle, for docstrings
    "I",   # isort, for sorting imports
    "B",   # flake8-bugbear, finds common bugs and design issues.
    "C4",  # flake8-comprehensions, checks for unnecessary list/set/dict comprehensions.
    "SIM", # flake8-simplify, recommends code simplifications.
    "ARG", # flake8-unused-arguments, detects unused function arguments.
    "ANN", # flake8-annotations, checks for missing type annotations.
    "Q",   # flake8-quotes, enforces consistent string quote usage
    "TID", # flake8-tidy-imports, checks for unused imports and unused variables
    "FIX", # flake8-fixme, checks for FIXME, TODO, XXX
    "T20", # flake8-print, checks for print statements
    "LOG", # flake8-logging, detect logging issues
    "PT",  # flake8-pytest-style, pytest styling rules
    "UP",  # pyupgrade (already default), upgrades Python syntax
    "PERF", # Perflint, checks for performance issues
    "TRY", # tryceratops, try/except block rules
    "DTZ", # flake8-datetimez, datetime and timezone rules
    "RSE", # flake8-raise, checks for common issues with raise
    "RET", # flake8-return, checks for common issues with return
    "ASYNC", # flake8-async, async related rules
    "SLF", # flake8-self, checks for common issues with self
    "BLE", # flake8-blind-except, checks for blind except: statements
    "FBT", # flake8-boolean-trap, checks for common boolean traps
    "A", # flake8-builtins, builtin shadowing rules
    "COM", # flake8-commas, trailing comma rules
    "EM", # flake8-errmsg, error message rules
    "ISC", # flake8-implicit-str-concat, implicit string concatenation rules
    "G", # flake8-logging-format, logging format rules
    "PTH", # flake8-use-pathlib, pathlib usage rules
    "FLY", # flynt, f-string rules
    "C90", # mccabe, complexity checks
    "N", # pep8-naming, naming conventions
    "CPY", # flake8-copyright, copyright checks
]
ignore = [
    "D203",
    "D212",
    "COM812",
    "EM101",
    "TRY003",
]
preview = true

[tool.ruff.lint.flake8-copyright]
notice-rgx = "License:\\s*MIT"

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "semver2"
version_provider = "pep621"
update_changelog_on_bump = true
version_files = [
    "src/kamihi/__init__.py:__version__",
]

[tool.pytest.ini_options]
testpaths = ["tests/"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
asyncio_default_test_loop_scope = "session"
log_cli = true
retries = 3
timeout = 60
retry_delay = 0
timeout_func_only = true
