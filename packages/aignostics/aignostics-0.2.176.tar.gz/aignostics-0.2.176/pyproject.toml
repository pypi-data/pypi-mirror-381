[project]
name = "aignostics"
version = "0.2.176"
description = "🔬 Python SDK providing access to the Aignostics Platform. Includes Aignostics Launchpad (Desktop Application), Aignostics CLI (Command-Line Interface), example notebooks, and Aignostics Client Library."
readme = "README.md"
authors = [
    { name = "Helmut Hoffer von Ankershoffen", email = "helmut@aignostics.com" },
    { name = "Andreas Kunft", email = "andreas@aignostics.com" },
]
license = { file = "LICENSE" }

keywords = [
    "aignostics",
    "atlas",
    "whole-slide-imaging",
    "machine-learning",
    "digital-pathology",
    "medical-imaging",
    "qupath",
    "dicom",
    "pydicom",
    "openslide",
    "image-data-commons",
    "act",
    "codecov",
    "copier",
    "cyclonedx",
    "devcontainer",
    "detect-secrets",
    "docker",
    "git-cliff",
    "jupyter",
    "marimo",
    "mypy",
    "nox",
    "nicegui",
    "oe-python-template",
    "pip-audit",
    "pip-licenses",
    "pre-commit",
    "pydantic",
    "pytest",
    "python",
    "pypi",
    "readthedocs",
    "ruff",
    "sonarqube",
    "sonarcloud",
    "sphinx",
    "typer",
    "uv",
]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Framework :: Pydantic",
    "Framework :: Pytest",
    "Typing :: Typed",
    "Natural Language :: English",
]

requires-python = ">=3.11, <4.0"

dependencies = [
    # From Template
    "fastapi[standard,all]>=0.118.0",
    "humanize>=4.13.0",
    "logfire[system-metrics]>=4.10.0",
    "nicegui[native]>=2.24.2",
    "opentelemetry-instrumentation-fastapi>=0.53b0",
    "opentelemetry-instrumentation-httpx>=0.53b0",
    "opentelemetry-instrumentation-jinja2>=0.53b0",
    "opentelemetry-instrumentation-requests>=0.53b0",
    "opentelemetry-instrumentation-sqlite3>=0.53b0",
    "opentelemetry-instrumentation-tornado>=0.53b0",
    "opentelemetry-instrumentation-urllib>=0.53b0",
    "opentelemetry-instrumentation-urllib3>=0.53b0",
    "packaging>=25.0",
    "platformdirs>=4.4.0",
    "psutil>=7.1.0",
    "pydantic-settings>=2.11.0",
    "pywin32>=310 ; sys_platform == 'win32'",
    "pyyaml>=6.0.3",
    "sentry-sdk>=2.39.0",
    "typer>=0.19.2",
    "uptime>=3.0.1",
    # Custom
    "aiopath>=0.6.11",
    "boto3>=1.40.42",
    "certifi>=2025.8.3",
    "dicom-validator>=0.7.2",
    "dicomweb-client[gcp]>=0.59.3",
    "duckdb>=0.10.0,<=1.4.0",
    "fastparquet>=2024.11.0",
    "google-cloud-storage>=3.4.0",
    "google-crc32c>=1.7.1",
    "highdicom>=0.26.1",
    "httpx>=0.28.1",
    "idc-index-data==22.0.1",
    "ijson>=3.4.0",
    "jsf>=0.11.2",
    "jsonschema[format-nongpl]>=4.25.1",
    "openslide-bin>=4.0.0.8",
    "openslide-python>=1.4.2",
    "pandas>=2.3.3",
    "platformdirs>=4.3.8",
    "pyjwt[crypto]>=2.10.1",
    "python-dateutil>=2.9.0.post0",
    # "pywebview[qt6]>=5.4; sys_platform == 'linux'",
    "requests>=2.32.5",
    "requests-oauthlib>=2.0.0",
    "s5cmd>=0.3.3",
    "semver>=3.0.4",
    "shapely>=2.1.2",
    "show-in-file-manager>=1.1.5",
    "tqdm>=4.67.1",
    "truststore>=0.10.4",
    "urllib3>=2.5.0",
    "wsidicom>=0.28.1",
    "aiopath>=0.6.11",
    "wsidicom>=0.27.1",
]

[project.optional-dependencies]
pyinstaller = ["pyinstaller>=6.14.0"]
jupyter = ["jupyter>=1.1.1"]
marimo = [
    "cloudpathlib>=0.22.0",
    "ipython>=9.6.0",
    "marimo>=0.16.4",
    "matplotlib>=3.10.6",
    "shapely>=2.1.0",
]
qupath = []
[dependency-groups]
dev = [
    "autodoc-pydantic>=2.2.0",
    "bump-my-version>=1.2.3",
    "cyclonedx-py>=1.0.1",
    "detect-secrets>=1.5.0",
    "enum-tools>=0.13.0",
    "furo>=2025.9.25",
    "git-cliff>=2.10.1",
    "mypy>=1.18.2",
    "nox[uv]>=2025.5.1",
    "pip-audit>=2.9.0",
    "pip-licenses @ git+https://github.com/neXenio/pip-licenses.git@master", # https://github.com/raimon49/pip-licenses/pull/224
    "pre-commit>=4.3.0",
    "pyright>=1.1.405",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-docker>=3.2.3",
    "pytest-env>=1.1.5",
    "pytest-md-report>=0.7.0",
    "pytest-regressions>=2.8.3",
    "pytest-retry>=1.7.0",
    "pytest-selenium>=4.1.0",
    "pytest-subprocess>=1.5.3",
    "pytest-timeout>=2.4.0",
    "pytest-watcher>=0.4.3",
    "pytest-xdist[psutil]>=3.8.0",
    "ruff>=0.13.2",
    "scalene>=1.5.55",
    "sphinx>=8.2.3",
    "sphinx-autobuild>=2025.8.25",
    "sphinx-click>=6.1.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-inline-tabs>=2023.4.21",
    "sphinx-mdinclude>=0.6.2",
    "sphinx-rtd-theme>=3.0.2",
    "sphinx_selective_exclude>=1.0.3",
    "sphinx-toolbox>=3.9.0",
    "sphinxext.opengraph>=0.9.1",
    "swagger-plugin-for-sphinx>=5.1.3",
    "tomli>=2.1.0",
    "types-pyyaml>=6.0.12.20250915",
    "types-requests>=2.32.4.20250913",
    "watchdog>=6.0.0",
]

[project.scripts]
aignostics = "aignostics.cli:cli"

[project.urls]
Homepage = "https://aignostics.readthedocs.io/en/latest/"
Documentation = "https://aignostics.readthedocs.io/en/latest/"
Source = "https://github.com/aignostics/python-sdk"
Changelog = "https://github.com/aignostics/python-sdk/releases"
Issues = "https://github.com/aignostics/python-sdk/issues"

[build-system]
requires = ["hatchling==1.27.0"]
build-backend = "hatchling.build"

[tool.hatch.build]
include = ["src/*", "codegen/out/*", "examples"]

[tool.hatch.build.targets.wheel]
packages = ["src/aignostics", "codegen/out/aignx", "examples"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.uv]
required-version = ">=0.8.9" # CVE-2025-54368
override-dependencies = [ # https://github.com/astral-sh/uv/issues/4422
    "rfc3987; sys_platform == 'never'", # GPLv3
    "h11>=0.16.0",                      # CVE-2025-43859
    "tornado>=6.5.0",                   # CVE-2025-47287
    "jupyter-core>=5.8.1",              # CVE-2025-30167
    "urllib3>=2.5.0",                   # CVE-2025-50181, CVE-2025-50182,
    "pillow>=11.3.0",                   # CVE-2025-48379,
    "aiohttp>=3.12.14",                 # CVE-2025-53643
    "starlette>=0.47.2",                # CVE-2025-54121
    "uv>=0.8.9",                        # CVE-2025-54368
    "jupyterlab>=4.4.9",                # CVE-2025-59842
    "pip>=5.3",                         # CVE-2025-8869  
]

[tool.ruff]
target-version = "py311"
preview = true
fix = true
line-length = 120
extend-exclude = [
    ".fixme",
    "notebook.py",
    "_notebook.py",
    "template/*.py",
    "**/third_party/*.py",
    "examples/*.py",
    "codegen",
]

[tool.ruff.lint]
select = ["ALL"]

ignore = [
    "ANN002",   # missing type annotation for `*args` -> provides no value
    "ANN003",   # missing type annotation for `**kwargs`` -> provides no value
    "ASYNC109", # async function definition with a `timeout` parameter  -> as mentioned by ruff, "This rule is highly opinionated and may not be suitable for all use cases."
    "CPY001",   # missing copyright notice -> not for OSS
    "DOC502",   # docstrings with exceptions not raised in the code of the function -> not always necessary
    "D203",     # incomptatible with D211 -> prefer D211
    "D212",     # incompatible with D213 -> prefer D213
    "FBT001",   # boolean positional arguments -> disagree
    "FBT002",   # boolean defautl value positionl arguments -> disagree
    "FBT003",   # boolean positional value in function call -> disagree
    "PGH003",   # use specific rule codes when ignoring type issues -> quite a hassle, no value
    "TRY300",   # else instead of return before except. -> strongly disagree, hinders readabilty.
    "COM812",   # conflicts with ruff formatter -> not feasible nor recommended
    "ISC001",   # conflicts with ruff formatter -> not feasible nor recommended
    "S404",     # subprocess` module is possibly insecure -> as mentioned by ruff, unstable and preview
    "FIX002",   # line contains todo -> yes, that's what todo's are for?!
    "TD003",    # missing issue link for todo -> not in OSS
    "PTH123",   # use of open to be replaced with Path.open,
    "T201",     # Remove `print`
    "INP001",   # Checks for packages that are missing an __init__.py file.
]

[tool.ruff.lint.per-file-ignores]
"**/tests/**/*.py" = [
    # we are more relaxed in tests, while sill applying hundreds of rules
    "S101",     # asserts allowed in tests...
    "ARG",      # unused function args -> fixtures nevertheless are functionally relevant...
    "FBT",      # don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "PLR2004",  # magic value used in comparison, ...
    "PT011",    # exception to broad
    "PLC2701",  # private import, but required for unit testing
    "PLC0415",  # local import
    "PT012",    # exception to broad
    "S311",     # standard pseudo-random generators are not suitable for cryptographic purposes
    "SLF001",   # private member access required for unit testing
    "S603",     # check for execution of untrusted input
    "ANN001",   # missing type annotation for function argument
    "ANN002",   # missing type annotation
    "ANN003",   # missing type annotation
    "ANN202",   # missing return type annotation
    "DOC201",   # `return` is not documented in docstring
    "ASYNC230", # async functions should not open files with blocking methods like `open`
    "S104",     # bind to all ports
    "S607",     # subprocess with partial path
]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy] # https://mypy.readthedocs.io/en/latest/config_file.html
exclude = ["_notebook.py", "bottle.py", "idc_index.py", "_pydicom_handler.py"]
junit_xml = "reports/mypy_junit.xml"
plugins = "pydantic.mypy"
strict = true
disallow_subclassing_any = false
disallow_untyped_decorators = false
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true

[tool.pydantic-mypy] # https://docs.pydantic.dev/latest/integrations/mypy/#configuring-the-plugin
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["*_test.py", "test_*.py"]
addopts = "-v --strict-markers --log-disable=aignostics --cov=aignostics --cov-report=term-missing --cov-report=xml:reports/coverage.xml --cov-report=html:reports/coverage_html"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
env = ["COVERAGE_FILE=.coverage", "COVERAGE_PROCESS_START=pyproject.toml"]
markers = [
    # From Template
    "no_extras: Tests that do require no extras installed.",
    "scheduled: Tests to run on a schedule. They will still be part on non-scheduled test executions.",
    "sequential: Exclude from parallel test execution.",
    "skip_with_act: Don't run with act.",
    "docker: tests That require Docker.",
    "long_running: Tests that take a long time to run. Tests marked as long runing excluded from execution by default. Enable by passing any -m your_marker that matches a marker of the test.",
    # Custom
    # Nothing yet
]
md_report = true
md_report_output = "reports/pytest.md"
md_report_verbose = 1
md_report_flavor = "github"
md_report_color = "never"
md_report_exclude_outcomes = ["passed", "skipped"]

[tool.coverage.run]
sigterm = true
relative_files = true
source = ["src"]
omit = [
    "*/third_party/*",
    "*/_notebook.py",
    "*/_pydicom_handler.py",
    "*/_openslide_handler.py",
]
branch = true
parallel = true
concurrency = ["thread", "multiprocessing"]

[tool.coverage.paths]
source = ["src/"]


[tool.bumpversion]
current_version = "0.2.176"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
allow_dirty = false
commit = true
commit_args = "--no-verify"
#tag_message = "Bump version: {current_version} → {new_version}"
#message = "Bump version: {current_version} → {new_version}"
# Note: Uncomment the following line to avoid running tests and ketryx during version bumps
message = "Bump version: {current_version} → {new_version} [skip:test:all,skip:ketryx]"
tag_message = "Bump version: {current_version} → {new_version} [skip:test:all,skip:ketryx]"
setup_hooks = []
pre_commit_hooks = [
    "uv sync",
    "git add uv.lock",
    "uv run git-cliff --tag $BVHOOK_NEW_VERSION",
    "rm -f CHANGELOG.md.tmp",
    "git add CHANGELOG.md",
]
post_commit_hooks = []

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = """
[project]
name = \"aignostics\"
version = \"{current_version}\""""
replace = """
[project]
name = \"aignostics\"
version = \"{new_version}\""""

[[tool.bumpversion.files]]
filename = "VERSION"

[[tool.bumpversion.files]]
filename = "sonar-project.properties"

[[tool.bumpversion.files]]
filename = "docs/source/conf.py"

[[tool.bumpversion.files]]
filename = "examples/notebook.py"

[[tool.bumpversion.files]]
filename = "aignostics.spec"
search = "version='{current_version}'"
replace = "version='{new_version}'"

[tool.git-cliff.remote.github]
owner = "aignostics"
repo = "python-sdk"

[tool.git-cliff.changelog]
output = "CHANGELOG.md"
render = true
# template for the changelog header
header = """
[🔬 Aignostics Python SDK](https://aignostics.readthedocs.io/en/latest/)\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """

{%- macro remote_url() -%}
https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% macro print_commit(commit) -%}
- {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
        {% if commit.breaking %}[**breaking**] {% endif %}\
        {{ commit.message | upper_first }} - \
        ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }}))\
{% endmacro -%}

{% if version %}\
    {% if previous.version %}\
        # [{{ version }}]({{ self::remote_url() }}/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
    {% endif %}\
{% else %}\

{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | unique(attribute="message")
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor %}
    {% for commit in commits
    | unique(attribute="message") %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor -%}
{%- if github -%}
{% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}

{% endif %}\
{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * @{{ contributor.username }} made their first contribution
    {%- if contributor.pr_number %} in \
[#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor -%}
{%- endif %}


"""
# template for the changelog footer
footer = """
"""

## [{{ version | trim_start_matches(pat="v") }}]\
## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
## [unreleased]
### {{ group | striptags | trim | upper_first }}
## New Contributors ❤️
## [{{ version | trim_start_matches(pat="v") }}]\
## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
## [unreleased]
### {{ group | striptags | trim | upper_first }}
## New Contributors ❤️
# remove the leading and trailing whitespace from the templates
trim = true
# postprocessors
postprocessors = [
    { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]


[tool.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = true
# regex for preprocessing the commit messages
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))" },
    { pattern = '^[-*]?\s+(\w+)\s+\(([^)]+)\):', replace = "* ${1}(${2}):" },
    { pattern = '^[-*]\s+', replace = "" },
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "<!-- 0 -->⛰️  Features" },
    { message = ".*security.*", group = "<!-- 8 -->🛡️ Security" },
    { message = "^sec", group = "<!-- 8 -->🛡️ Security" },
    { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
    { message = "^doc", group = "<!-- 3 -->📚 Documentation" },
    { message = "^perf", group = "<!-- 4 -->⚡ Performance" },
    { message = "^refactor\\(clippy\\)", skip = true },
    { message = "^refactor", group = "<!-- 2 -->🚜 Refactor" },
    { message = "^style", group = "<!-- 5 -->🎨 Styling" },
    { message = "^test", group = "<!-- 6 -->🧪 Testing" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^chore\\(npm\\).*yarn\\.lock", skip = true },
    { message = "^chore|^ci", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
    { body = ".*security", group = "<!-- 8 -->🛡️ Security" },
    { message = "^revert", group = "<!-- 9 -->◀️ Revert" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = "beta|alpha"
# regex for ignoring tags
ignore_tags = "rc"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
