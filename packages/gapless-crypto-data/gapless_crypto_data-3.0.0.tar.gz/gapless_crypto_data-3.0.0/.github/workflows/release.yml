name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add UV to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv sync --dev

      - name: Build package
        run: |
          source .venv/bin/activate
          uv build

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          # Generate changelog content
          if [ -n "$PREV_TAG" ]; then
            echo "## Changes since $PREV_TAG" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "- First release of gapless-crypto-data" >> CHANGELOG.md
          fi

          echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            # Release ${{ steps.get_version.outputs.VERSION }}

            ## 📦 Installation
            ```bash
            pip install gapless-crypto-data==${{ steps.get_version.outputs.VERSION }}
            # or
            uv add gapless-crypto-data==${{ steps.get_version.outputs.VERSION }}
            ```

            ## 🔍 PyPI Package
            This release is available on [PyPI](https://pypi.org/project/gapless-crypto-data/${{ steps.get_version.outputs.VERSION }}/)

            ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}

            ## 🤖 AI Agent Integration
            This package includes probe hooks for AI coding agents:
            ```python
            import gapless_crypto_data
            probe = gapless_crypto_data.__probe__
            api_map = probe.discover_api()
            ```

            ## 📊 Package Info
            - **Performance**: 22x faster data collection
            - **Python**: 3.9+ compatibility
            - **Dependencies**: httpx, pandas, pyarrow
            - **Build System**: hatchling backend

          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/gapless_crypto_data-${{ steps.get_version.outputs.VERSION }}-py3-none-any.whl
          asset_name: gapless_crypto_data-${{ steps.get_version.outputs.VERSION }}-py3-none-any.whl
          asset_content_type: application/zip

  publish-pypi:
    runs-on: ubuntu-latest
    needs: create-release
    environment:
      name: pypi
      url: https://pypi.org/p/gapless-crypto-data
    permissions:
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add UV to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv sync --dev

      - name: Build package
        run: |
          source .venv/bin/activate
          uv build

      - name: Publish distribution packages to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://upload.pypi.org/legacy/
