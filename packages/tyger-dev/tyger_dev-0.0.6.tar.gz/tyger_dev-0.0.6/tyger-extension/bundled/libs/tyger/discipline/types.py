import ast
import types
from abc import ABC, abstractmethod
from typing import Any

class TypeException(Exception):
    pass


class TypeSystem(ABC):
    @abstractmethod
    def type_of(self, value: Any): ...
    @abstractmethod
    def dom_cod(self, ty): ...
    @abstractmethod
    def gjoin(self, ty1, ty2): ...
    @abstractmethod
    def extract_iterable(self, vty): ...
    @abstractmethod
    def unify(self, vty, target_type): ...
    @abstractmethod
    def type_of_bin_primitive(self, op, target_type, value_type): ...
    @abstractmethod
    def type_of_un_primitive(self, op, vty): ...
    @abstractmethod
    def consistent(self, typ, target_type): ...
    @abstractmethod
    def get_default_type(self): ...
    @abstractmethod
    def extract_func_type(self, expected): ...
    @abstractmethod
    def get_default_dom_cod(self, n_args): ...
    @abstractmethod
    def check_slice_type(self, dom, sty): ...
    @abstractmethod
    def get_inner_type(self, ty): ...
    @abstractmethod
    def get_slice_type(self): ...
    @abstractmethod
    def unwrap_value_type(self, actual_type, size) -> tuple: ...
    @abstractmethod
    def parse_type(self, annotation: ast.expr): ...
    @abstractmethod
    def get_cod_type_from_annotation(self, ann): ...
    @abstractmethod
    def get_initial_context(self) -> 'Context': ...
    @abstractmethod
    def get_domain(self, vty): ...
    @abstractmethod
    def get_types(self) -> dict[str, type | types.GenericAlias]: ...

    @abstractmethod
    def get_typing_types(self) -> dict[str, type | types.GenericAlias]: ...

    @abstractmethod
    def check_annotation_type(self, ret_ann_type): ...

    @abstractmethod
    def get_builtin_types(self):...


class Context(ABC):
    expected: type
    @classmethod
    @abstractmethod
    def initial(cls): ...
    @abstractmethod
    def no_expected(self): ...
    @abstractmethod
    def taint_context(self, node, ty) -> 'Context': ...
    @abstractmethod
    def taint_type(self, node, ty): ...
