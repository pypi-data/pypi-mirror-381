import pytest

from hash_forge.hashers import PBKDF2Sha256Hasher


@pytest.fixture
def pbkdf2_hasher() -> PBKDF2Sha256Hasher:
    """
    Fixture for creating a PBKDF2Sha256Hasher instance with a specified number of iterations.

    Returns:
        PBKDF2Sha256Hasher: An instance of PBKDF2Sha256Hasher configured with 100,000 iterations.
    """
    return PBKDF2Sha256Hasher(iterations=100_000)


def test_pbkdf2_hash_format(pbkdf2_hasher: PBKDF2Sha256Hasher) -> None:
    """
    Test the format of the PBKDF2 hashed string.

    This test ensures that the hashed string generated by the PBKDF2Sha256Hasher
    follows the expected format. The format is expected to be:
    'pbkdf2_sha256$iterations$salt$hash'.

    Args:
        pbkdf2_hasher (PBKDF2Sha256Hasher): An instance of the PBKDF2Sha256Hasher class.

    Assertions:
        - The hashed string should be split into 4 parts using the '$' delimiter.
        - The first part should be 'pbkdf2_sha256'.
        - The second part should be the number of iterations, which should be 100,000.
    """
    hashed: str = pbkdf2_hasher.hash("TestData123!")
    parts: list[str] = hashed.split('$')
    assert len(parts) == 4
    assert parts[0] == 'pbkdf2_sha256'
    assert int(parts[1]) == 100_000


def test_pbkdf2_verify_correct_data(pbkdf2_hasher: PBKDF2Sha256Hasher) -> None:
    """
    Test the PBKDF2 hasher's ability to verify correct data.

    This test ensures that the PBKDF2Sha256Hasher can correctly hash a given
    data string and subsequently verify that the hashed value matches
    the original data.

    Args:
        pbkdf2_hasher (PBKDF2Sha256Hasher): An instance of the PBKDF2Sha256Hasher class.

    Asserts:
        The verification of the hashed data against the original data
        returns True.
    """
    data = "TestData123!"
    hashed: str = pbkdf2_hasher.hash(data)
    assert pbkdf2_hasher.verify(data, hashed) is True


def test_pbkdf2_verify_incorrect_data(pbkdf2_hasher: PBKDF2Sha256Hasher) -> None:
    """
    Test the PBKDF2Sha256Hasher's verify method with incorrect data.

    This test ensures that the verify method returns False when provided
    with data that does not match the original hashed data.

    Args:
        pbkdf2_hasher (PBKDF2Sha256Hasher): An instance of the PBKDF2Sha256Hasher class.

    Asserts:
        The verify method should return False when the provided data does not
        match the hashed data.
    """
    data = "TestData123!"
    hashed: str = pbkdf2_hasher.hash(data)
    assert pbkdf2_hasher.verify("WrongData", hashed) is False


def test_pbkdf2_needs_rehash_false(pbkdf2_hasher: PBKDF2Sha256Hasher) -> None:
    """
    Test that the PBKDF2Sha256Hasher does not require rehashing for a freshly hashed password.

    Args:
        pbkdf2_hasher (PBKDF2Sha256Hasher): An instance of the PBKDF2Sha256Hasher class.

    Asserts:
        The hashed password does not need rehashing.
    """
    hashed: str = pbkdf2_hasher.hash("TestData123!")
    assert pbkdf2_hasher.needs_rehash(hashed) is False


def test_pbkdf2_needs_rehash_true(pbkdf2_hasher: PBKDF2Sha256Hasher) -> None:
    """
    Test if the PBKDF2 hasher correctly identifies when a hashed password needs rehashing.

    This test creates an instance of PBKDF2Sha256Hasher with a lower iteration count (50,000)
    to simulate an outdated hash. It then hashes a sample password and checks if the
    current PBKDF2Sha256Hasher instance (with presumably higher iteration count) correctly
    identifies that the old hash needs rehashing.

    Args:
        pbkdf2_hasher (PBKDF2Sha256Hasher): The PBKDF2 hasher instance to test against.

    Asserts:
        True if the `needs_rehash` method correctly identifies that the old hash
        needs rehashing.
    """
    old_hasher = PBKDF2Sha256Hasher(iterations=120_000)
    old_hashed: str = old_hasher.hash("TestData123!")
    assert pbkdf2_hasher.needs_rehash(old_hashed) is True


def test_pbkdf2_invalid_hash_format(pbkdf2_hasher: PBKDF2Sha256Hasher) -> None:
    """
    Test the PBKDF2 hasher's verify method with an invalid hash format.

    Args:
        pbkdf2_hasher (PBKDF2Sha256Hasher): An instance of the PBKDF2Sha256Hasher class.

    Asserts:
        The verify method should return False when provided with an invalid hash format.
    """
    assert pbkdf2_hasher.verify("TestData123!", "invalid$hash$format") is False
