import pytest

from hash_forge.hashers import ScryptHasher


@pytest.fixture
def scrypt_hasher() -> ScryptHasher:
    """
    Fixture for creating a ScryptHasher instance with default settings.

    Returns:
        ScryptHasher: An instance of ScryptHasher.
    """
    return ScryptHasher()


def test_scrypt_hash_format(scrypt_hasher: ScryptHasher) -> None:
    """
    Test the format of the Scrypt hashed string.

    This test ensures that the hashed string generated by the ScryptHasher
    follows the expected format. The format is expected to be:
    'scrypt$work_factor$salt$block_size$parallelism$hash'.

    Args:
        scrypt_hasher (ScryptHasher): An instance of the ScryptHasher class.

    Assertions:
        - The hashed string should be split into 6 parts using the '$' delimiter.
        - The first part should be 'scrypt'.
    """
    hashed: str = scrypt_hasher.hash("TestData123!")
    parts: list[str] = hashed.split('$')
    assert len(parts) == 6
    assert parts[0] == 'scrypt'


def test_scrypt_verify_correct_data(scrypt_hasher: ScryptHasher) -> None:
    """
    Test the Scrypt hasher's ability to verify correct data.

    This test ensures that the ScryptHasher can correctly hash a given
    data string and subsequently verify that the hashed value matches
    the original data.

    Args:
        scrypt_hasher (ScryptHasher): An instance of the ScryptHasher class.

    Asserts:
        The verification of the hashed data against the original data
        returns True.
    """
    data = "TestData123!"
    hashed: str = scrypt_hasher.hash(data)
    assert scrypt_hasher.verify(data, hashed) is True


def test_scrypt_verify_incorrect_data(scrypt_hasher: ScryptHasher) -> None:
    """
    Test the ScryptHasher's verify method with incorrect data.

    This test ensures that the verify method returns False when provided
    with data that does not match the original hashed data.

    Args:
        scrypt_hasher (ScryptHasher): An instance of the ScryptHasher class.

    Asserts:
        The verify method should return False when the provided data does not
        match the hashed data.
    """
    data = "TestData123!"
    hashed: str = scrypt_hasher.hash(data)
    assert scrypt_hasher.verify("WrongData", hashed) is False


def test_scrypt_needs_rehash_false(scrypt_hasher: ScryptHasher) -> None:
    """
    Test that the ScryptHasher does not require rehashing for a freshly hashed password.

    Args:
        scrypt_hasher (ScryptHasher): An instance of the ScryptHasher class.

    Asserts:
        The hashed password does not need rehashing.
    """
    hashed: str = scrypt_hasher.hash("TestData123!")
    assert scrypt_hasher.needs_rehash(hashed) is False


def test_scrypt_needs_rehash_true(scrypt_hasher: ScryptHasher) -> None:
    """
    Test if the Scrypt hasher correctly identifies when a hashed password needs rehashing.

    This test creates an instance of ScryptHasher with different work factor or block size
    to simulate an outdated hash. It then hashes a sample password and checks if the
    current ScryptHasher instance correctly identifies that the old hash needs rehashing.

    Args:
        scrypt_hasher (ScryptHasher): The Scrypt hasher instance to test against.

    Asserts:
        True if the `needs_rehash` method correctly identifies that the old hash
        needs rehashing.
    """
    old_hasher = ScryptHasher(work_factor=2**10)
    old_hashed: str = old_hasher.hash("TestData123!")
    assert scrypt_hasher.needs_rehash(old_hashed) is True


def test_scrypt_invalid_hash_format(scrypt_hasher: ScryptHasher) -> None:
    """
    Test the Scrypt hasher's verify method with an invalid hash format.

    Args:
        scrypt_hasher (ScryptHasher): An instance of the ScryptHasher class.

    Asserts:
        The verify method should return False when provided with an invalid hash format.
    """
    assert scrypt_hasher.verify("TestData123!", "invalid$hash$format") is False
