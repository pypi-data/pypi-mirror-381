import pytest

from hash_forge.hashers import Ripemd160Hasher


@pytest.fixture
def ripemd160_hasher() -> Ripemd160Hasher:
    """
    Fixture for creating a Ripemd160Hasher instance.

    Returns:
        Ripemd160Hasher: An instance of Ripemd160Hasher.
    """
    return Ripemd160Hasher()


def test_ripemd160_hash_format(ripemd160_hasher: Ripemd160Hasher) -> None:
    """
    Test the format of the RIPEMD-160 hashed string.

    This test ensures that the hashed string generated by the Ripemd160Hasher
    follows the expected format. The format is expected to be:
    'RIPEMD-160$hashed_value'.

    Args:
        ripemd160_hasher (Ripemd160Hasher): An instance of the Ripemd160Hasher class.

    Assertions:
        - The hashed string should be split into 2 parts using the '$' delimiter.
        - The first part should be 'RIPEMD-160'.
    """
    hashed: str = ripemd160_hasher.hash("TestData123!")
    parts: list[str] = hashed.split('$')
    assert len(parts) == 2, "Hash format is incorrect; expected 2 parts separated by '$'."
    assert parts[0] == 'RIPEMD-160', "Algorithm name in hash does not match 'RIPEMD-160'."


def test_ripemd160_verify_correct_data(ripemd160_hasher: Ripemd160Hasher) -> None:
    """
    Test the Ripemd160Hasher's ability to verify correct data.

    This test ensures that the Ripemd160Hasher can correctly hash a given
    data string and subsequently verify that the hashed value matches
    the original data.

    Args:
        ripemd160_hasher (Ripemd160Hasher): An instance of the Ripemd160Hasher class.

    Asserts:
        The verification of the hashed data against the original data
        returns True.
    """
    data = "TestData123!"
    hashed: str = ripemd160_hasher.hash(data)
    assert ripemd160_hasher.verify(data, hashed) is True, "Verification failed for correct data."


def test_ripemd160_verify_incorrect_data(ripemd160_hasher: Ripemd160Hasher) -> None:
    """
    Test the Ripemd160Hasher's verify method with incorrect data.

    This test ensures that the verify method returns False when provided
    with data that does not match the original hashed data.

    Args:
        ripemd160_hasher (Ripemd160Hasher): An instance of the Ripemd160Hasher class.

    Asserts:
        The verify method should return False when the provided data does not
        match the hashed data.
    """
    data = "TestData123!"
    hashed: str = ripemd160_hasher.hash(data)
    assert ripemd160_hasher.verify("WrongData", hashed) is False, "Verification incorrectly succeeded for wrong data."


def test_ripemd160_needs_rehash_false(ripemd160_hasher: Ripemd160Hasher) -> None:
    """
    Test that the Ripemd160Hasher does not require rehashing for a freshly hashed password.

    Args:
        ripemd160_hasher (Ripemd160Hasher): An instance of the Ripemd160Hasher class.

    Asserts:
        The hashed password does not need rehashing.
    """
    hashed: str = ripemd160_hasher.hash("TestData123!")
    assert ripemd160_hasher.needs_rehash(hashed) is False, "needs_rehash incorrectly returned True for fresh hash."


def test_ripemd160_needs_rehash_true(ripemd160_hasher: Ripemd160Hasher) -> None:
    """
    Test if the Ripemd160Hasher correctly identifies when a hashed password needs rehashing.

    This test simulates an outdated hash by modifying the algorithm name in the hashed string.
    It then checks if the current Ripemd160Hasher instance correctly identifies that the old hash needs rehashing.

    Args:
        ripemd160_hasher (Ripemd160Hasher): The Ripemd160Hasher instance to test against.

    Asserts:
        True if the `needs_rehash` method correctly identifies that the old hash
        needs rehashing.
    """
    data = "TestData123!"
    hashed: str = ripemd160_hasher.hash(data)
    # Simulate an outdated hash by changing the algorithm name
    old_hashed = hashed.replace('RIPEMD-160$', 'oldalgo$', 1)
    assert ripemd160_hasher.needs_rehash(old_hashed) is True, "needs_rehash failed to identify outdated hash."


def test_ripemd160_invalid_hash_format(ripemd160_hasher: Ripemd160Hasher) -> None:
    """
    Test the Ripemd160Hasher's verify method with an invalid hash format.

    Args:
        ripemd160_hasher (Ripemd160Hasher): An instance of the Ripemd160Hasher class.

    Asserts:
        The verify method should return False when provided with an invalid hash format.
    """
    assert (
        ripemd160_hasher.verify("TestData123!", "invalid$hash$format") is False
    ), "Verification did not fail for invalid hash format."
