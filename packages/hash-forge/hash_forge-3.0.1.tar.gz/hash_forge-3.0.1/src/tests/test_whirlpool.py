import pytest

from hash_forge.hashers import WhirlpoolHasher


@pytest.fixture
def whirlpool_hasher() -> WhirlpoolHasher:
    """
    Fixture for creating a WhirlpoolHasher instance.

    Returns:
        WhirlpoolHasher: An instance of WhirlpoolHasher.
    """
    return WhirlpoolHasher()


def test_whirlpool_hash_format(whirlpool_hasher: WhirlpoolHasher) -> None:
    """
    Test the format of the Whirlpool hashed string.

    This test ensures that the hashed string generated by the WhirlpoolHasher
    follows the expected format. The format is expected to be:
    'whirlpool$hash'.

    Args:
        whirlpool_hasher (WhirlpoolHasher): An instance of the WhirlpoolHasher class.

    Assertions:
        - The hashed string should be split into 2 parts using the '$' delimiter.
        - The first part should be 'whirlpool'.
    """
    hashed: str = whirlpool_hasher.hash("TestData123!")
    parts: list[str] = hashed.split("$")
    assert len(parts) == 2, "Hash format is incorrect; expected 2 parts separated by '$'."
    assert parts[0] == "whirlpool", "Algorithm name in hash does not match 'whirlpool'."


def test_whirlpool_verify_correct_data(whirlpool_hasher: WhirlpoolHasher) -> None:
    """
    Test the Whirlpool hasher's ability to verify correct data.

    This test ensures that the WhirlpoolHasher can correctly hash a given
    data string and subsequently verify that the hashed value matches
    the original data.

    Args:
        whirlpool_hasher (WhirlpoolHasher): An instance of the WhirlpoolHasher class.

    Asserts:
        The verification of the hashed data against the original data
        returns True.
    """
    data = "TestData123!"
    hashed: str = whirlpool_hasher.hash(data)
    assert whirlpool_hasher.verify(data, hashed) is True, "Verification failed for correct data."


def test_whirlpool_verify_incorrect_data(whirlpool_hasher: WhirlpoolHasher) -> None:
    """
    Test the WhirlpoolHasher's verify method with incorrect data.

    This test ensures that the verify method returns False when provided
    with data that does not match the original hashed data.

    Args:
        whirlpool_hasher (WhirlpoolHasher): An instance of the WhirlpoolHasher class.

    Asserts:
        The verify method should return False when the provided data does not
        match the hashed data.
    """
    data = "TestData123!"
    hashed: str = whirlpool_hasher.hash(data)
    assert whirlpool_hasher.verify("WrongData", hashed) is False, "Verification incorrectly succeeded for wrong data."


def test_whirlpool_needs_rehash_false(whirlpool_hasher: WhirlpoolHasher) -> None:
    """
    Test that the WhirlpoolHasher does not require rehashing for a freshly hashed password.

    Args:
        whirlpool_hasher (WhirlpoolHasher): An instance of the WhirlpoolHasher class.

    Asserts:
        The hashed password does not need rehashing.
    """
    hashed: str = whirlpool_hasher.hash("TestData123!")
    assert whirlpool_hasher.needs_rehash(hashed) is False, "needs_rehash incorrectly returned True for fresh hash."


def test_whirlpool_needs_rehash_true(whirlpool_hasher: WhirlpoolHasher) -> None:
    """
    Test if the Whirlpool hasher correctly identifies when a hashed password needs rehashing.

    This test simulates an outdated hash by modifying the algorithm name in the hashed string.
    It then checks if the current WhirlpoolHasher instance correctly identifies that the old hash needs rehashing.

    Args:
        whirlpool_hasher (WhirlpoolHasher): The Whirlpool hasher instance to test against.

    Asserts:
        True if the `needs_rehash` method correctly identifies that the old hash
        needs rehashing.
    """
    data = "TestData123!"
    hashed: str = whirlpool_hasher.hash(data)
    # Simulate an outdated hash by changing the algorithm name
    old_hashed = hashed.replace("whirlpool$", "oldalgo$", 1)
    assert whirlpool_hasher.needs_rehash(old_hashed) is True, "needs_rehash failed to identify outdated hash."


def test_whirlpool_invalid_hash_format(whirlpool_hasher: WhirlpoolHasher) -> None:
    """
    Test the Whirlpool hasher's verify method with an invalid hash format.

    Args:
        whirlpool_hasher (WhirlpoolHasher): An instance of the WhirlpoolHasher class.

    Asserts:
        The verify method should return False when provided with an invalid hash format.
    """
    assert (
        whirlpool_hasher.verify("TestData123!", "invalid$hash$format") is False
    ), "Verification did not fail for invalid hash format."
