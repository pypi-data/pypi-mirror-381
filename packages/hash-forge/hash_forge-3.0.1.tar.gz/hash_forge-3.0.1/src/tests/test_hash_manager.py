import pytest

from hash_forge import HashManager
from hash_forge.hashers import (
    Argon2Hasher,
    BCryptSha256Hasher,
    Blake2Hasher,
    PBKDF2Sha256Hasher,
    Ripemd160Hasher,
    ScryptHasher,
    WhirlpoolHasher,
)


@pytest.fixture
def hash_manager_instance() -> HashManager:
    """
    Fixture to create an instance of HashManager.

    Args:
        available_hashers: A list of available hashers to be used by the HashManager.

    Returns:
        HashManager: An instance of HashManager initialized with the provided hashers.
    """
    return HashManager(
        PBKDF2Sha256Hasher(iterations=150_000),
        BCryptSha256Hasher(),
        Argon2Hasher(),
        ScryptHasher(),
        Ripemd160Hasher(),
        Blake2Hasher("MySecretKey"),
        WhirlpoolHasher(),
    )


def test_hash_with_preferred_hasher(hash_manager_instance: HashManager) -> None:
    """
    Test the hashing functionality using the preferred hasher.

    This test verifies that the `hash` method of the `hash_manager_instance`
    produces a hash that starts with the expected prefix for the preferred
    hasher (`pbkdf2_sha256$150000$`). It also checks that the `verify` method
    correctly validates the original data against the generated hash.

    Args:
        hash_manager_instance: An instance of the HashManager class configured
                               with the preferred hasher.

    Asserts:
        - The generated hash starts with 'pbkdf2_sha256$150000$'.
        - The `verify` method returns True when verifying the original data
          against the generated hash.
    """
    hashed: str = hash_manager_instance.hash("HashManagerTestData!")
    assert hashed.startswith("pbkdf2_sha256$150000$")
    assert hash_manager_instance.verify("HashManagerTestData!", hashed) is True


def test_verify_with_preferred_hasher(hash_manager_instance: HashManager) -> None:
    """
    Test the `verify` method of `HashManager` using the preferred hasher.

    This test ensures that the `verify` method correctly verifies a hashed value
    generated by the `hash` method when using the preferred hasher.

    Args:
        hash_manager_instance (HashManager): An instance of the `HashManager` class.

    Asserts:
        The `verify` method returns True when verifying a hashed value generated
        from the same input data.
    """
    hashed: str = hash_manager_instance.hash("HashManagerTestData!")
    assert hash_manager_instance.verify("HashManagerTestData!", hashed) is True


def test_verify_incorrect_data(hash_manager_instance: HashManager) -> None:
    """
    Test the `verify` method of `HashManager` with incorrect data.

    This test ensures that the `verify` method returns `False` when provided
    with data that does not match the original hashed data.

    Args:
        hash_manager_instance (HashManager): An instance of the `HashManager` class.

    Asserts:
        The `verify` method returns `False` when the input data does not match
        the hashed data.
    """
    hashed: str = hash_manager_instance.hash("HashManagerTestData!")
    assert hash_manager_instance.verify("IncorrectData", hashed) is False


def test_needs_rehash_false(hash_manager_instance: HashManager) -> None:
    """
    Test that the `needs_rehash` method of `HashManager` returns False for a freshly hashed password.

    Args:
        hash_manager_instance (HashManager): An instance of the `HashManager` class.

    Asserts:
        The `needs_rehash` method returns False for a newly hashed password.
    """
    hashed: str = hash_manager_instance.hash("HashManagerTestData!")
    assert hash_manager_instance.needs_rehash(hashed) is False


def test_needs_rehash_true_due_to_iterations(hash_manager_instance: HashManager) -> None:
    """
    Test if the `needs_rehash` method returns True when the number of iterations
    used in the hash is lower than the current standard.

    This test creates a hash using an old PBKDF2 hasher with fewer iterations
    and checks if the `needs_rehash` method correctly identifies that the hash
    needs to be rehashed due to the insufficient number of iterations.

    Args:
        hash_manager_instance (HashManager): An instance of the HashManager class.
    """
    old_pbkdf2_hasher = PBKDF2Sha256Hasher(iterations=100_000)
    old_hashed = old_pbkdf2_hasher.hash("HashManagerTestData!")
    assert hash_manager_instance.needs_rehash(old_hashed) is True


def test_invalid_hashed_data_format(hash_manager_instance: HashManager) -> None:
    """
    Test the behavior of HashManager when provided with an invalid hashed data format.

    This test ensures that:
    1. The `verify` method returns False when given an invalid hash format.
    2. The `needs_rehash` method returns True when given an invalid hash format.

    Args:
        hash_manager_instance (HashManager): An instance of the HashManager class.
    """
    assert hash_manager_instance.verify("HashManagerTestData!", "invalid$hash$format") is False
    assert hash_manager_instance.needs_rehash("invalid$hash$format") is True


def test_unknown_algorithm(hash_manager_instance: HashManager) -> None:
    """
    Test the behavior of HashManager when an unknown algorithm is encountered.

    Args:
        hash_manager_instance (HashManager): An instance of the HashManager class.

    Asserts:
        - The `verify` method should return False when provided with a hash string
          that uses an unknown algorithm.
        - The `needs_rehash` method should return True for the hash string with an
          unknown algorithm.
    """
    unknown_hashed = "unknown_algo$12345$salt$hash"
    assert hash_manager_instance.verify("HashManagerTestData!", unknown_hashed) is False
    assert hash_manager_instance.needs_rehash(unknown_hashed) is True
