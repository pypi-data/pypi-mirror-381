[project]
name = "context-mcp"
version = "0.1.0"
description = "MCP server for project context integration - provides read-only filesystem operations for AI agents"
authors = [
    {name = "Context MCP Team", email = "context-mcp@example.com"}
]
maintainers = [
    {name = "Context MCP Team", email = "context-mcp@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = [
    "mcp",
    "model-context-protocol",
    "ai",
    "agent",
    "code-analysis",
    "fastmcp",
    "claude",
    "context-integration"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "fastmcp>=0.1.0",
    "chardet>=5.0.0",
]

[project.urls]
Homepage = "https://github.com/geq1fan/context-mcp"
Documentation = "https://github.com/geq1fan/context-mcp#readme"
Repository = "https://github.com/geq1fan/context-mcp"
"Bug Tracker" = "https://github.com/geq1fan/context-mcp/issues"
Changelog = "https://github.com/geq1fan/context-mcp/blob/main/CHANGELOG.md"

[project.scripts]
context-mcp = "agent_mcp.server:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["agent_mcp"]

[tool.uv]
dev-dependencies = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-timeout>=2.2.0",
    "pytest-mock>=3.12.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --strict-markers"
markers = [
    "contract: Contract tests for MCP tool interfaces",
    "integration: Integration tests for full workflows",
    "unit: Unit tests for individual components",
]

[tool.coverage.run]
source = ["agent_mcp"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
