Metadata-Version: 2.4
Name: minionpy
Version: 0.2.4
Summary: MinionPy is the Python implementation of the Minion C++ library, designed for derivative-free optimization.
Author: Khoirul Faiq Muzakka
Author-email: Khoirul Faiq Muzakka <khoirul.muzakka@gmail.com>
License: MIT License
        -----------
        
        Copyright (c) 2024 Dr. Khoirul Faiq Muzakka (Forschungszentrum JÃ¼lich GmbH)
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
        
        LBFGSpp Library
        ---------------
        
        Minion uses the `LBFGSpp` library (https://github.com/yixuan/LBFGSpp), 
        which is also licensed under the MIT License. The use of this library in 
        Minion follows the same licensing terms, which allow for free usage, modification, 
        and distribution, provided that the copyright notice and license are included.
        
        For more information about the `LBFGSpp` library, please refer to its official repository.
        
        
        Modified Code from Suganthan GitHub Repository
        ---------------------------------------------
        
        Some algorithms (NL-SHADE-RSP, j2020, LSRTDE) implemented in the Minion library 
        and all the CEC benchmark problems are based on the original code published by 
        Suganthan on GitHub (https://github.com/P-N-Suganthan). This code has been modified 
        to fit the Minion API. However, the original GitHub repository does not include a license file, 
        and as such, the licensing terms for the original code are not explicitly defined.
        
        Since the code was publicly available on GitHub, we assume it is available for use in accordance 
        with the standard practices for open-source code. If the original author has any licensing terms 
        that we are unaware of, we are open to discussions and will take the necessary steps 
        to comply with any applicable requirements.
        
        If you are concerned about the licensing of this code, 
        we recommend contacting the author or repository owner directly for clarification.
        
Project-URL: homepage, https://github.com/khoirulmuzakka/Minion
Project-URL: documentation, https://minion-py.readthedocs.io/
Project-URL: source, https://github.com/khoirulmuzakka/Minion
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: Unix
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Software Development
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: numpy>=1.21.0
Dynamic: author
Dynamic: requires-python

# MinionPy

<div align="center">
  <img src="https://github.com/khoirulmuzakka/Minion/raw/main/docs/minion_logo.png" alt="Logo" width="200" />
</div>


![PyPI Python Version](https://img.shields.io/pypi/pyversions/minionpy)
![PyPI version](https://img.shields.io/pypi/v/minionpy.svg)
![PyPI downloads](https://img.shields.io/pypi/dm/minionpy.svg)
![PyPI License](https://img.shields.io/pypi/l/minionpy.svg)
[![Documentation Status](https://readthedocs.org/projects/minion-py/badge/?version=latest)](https://minion-py.readthedocs.io/en/latest/)
[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.14794240.svg)](https://doi.org/10.5281/zenodo.14794240)


MinionPy is the Python implementation of the Minion C++ library, designed for derivative-free optimization. It provides tools for solving optimization problems where gradients are unavailable or unreliable, incorporating state-of-the-art algorithms recognized in IEEE Congress on Evolutionary Computation (CEC) competitions. The library offers researchers and practitioners access to advanced optimization techniques and benchmarks for testing and evaluation.

## Features

- **Optimization Algorithms**  
    - **Differential Evolution-based algorithms:**
      - Basic Differential Evolution (DE)
      - JADE  
      - L-SHADE 
      - jSO
      - j2020 
      - NL-SHADE-RSP 
      - LSRTDE 
      - ARRDE (our novel Adaptive Restart-Refine DE algorithm)  
    - **Other population-based algorithms:**
      - Artificial Bee Colony (ABC)
      - Grey Wolf DE Optimization  
    - **Classical optimization algorithms:**
      - Nelder-Mead  
      - Generalized Simulated Annealing (Dual Annealing)  
      - L-BFGS-B (vectorized & noise-robust) 
      - L-BFGS (vectorized & noise-robust) 
      
- **Benchmark Support**  
  The library includes benchmark functions from the CEC competitions (2011, 2014, 2017, 2019, 2020, 2022), providing a standardized environment for algorithm development, testing, and comparison.

- **Performance**  
  Most implemented algorithms are population-based, making them suitable for parallelization. MinionPy is optimized for vectorized functions, enabling efficient use of multithreading and multiprocessing capabilities.

- **Cross-Platform Compatibility**  
  MinionPy is implemented in C++ with a Python wrapper, supporting usage in both languages. It has been tested on the following platforms:
  - Windows 11
  - Linux Ubuntu 24.04
  - macOS Sequoia 15  

## Applications

MinionPy is applicable in scenarios where derivative-free optimization is required, including engineering, physics, and machine learning. Its standardized benchmarks and high-performance algorithms make it suitable for developing and evaluating new optimization techniques as well as solving real-world optimization problems.


## ðŸ“– Documentation
For full usage instructions, API reference, and examples, visit the official documentation:

- **[Minion Documentation](https://minion-py.readthedocs.io/)**

## Citing Minion

If you use **MinionPy** in your research or projects, we would be grateful if you could cite the following publication:

> Muzakka, K. F., MÃ¶ller, S., & Finsterbusch, M. (2025).  
> *Minion: A high-performance derivative-free optimization library designed for solving complex optimization problems.*  
> Zenodo. [https://doi.org/10.5281/zenodo.14893994](https://doi.org/10.5281/zenodo.14794240)  

