"""Command utilities and shared functionality."""

from pathlib import Path
from pydantic import BaseModel
import yaml
from arkitekt_server.config import ArkitektServerConfig
from rich.console import Console

console = Console()


class YamlFile(BaseModel):
    """YAML file structure for configuration."""

    version: str
    config: ArkitektServerConfig


def update_or_create_yaml_file(file_path: str, new_config: ArkitektServerConfig):
    """Update or create a YAML file with the given data."""
    with open(file_path, "w") as f:
        yaml_data = YamlFile(version="1.0", config=new_config)
        yaml.dump(yaml_data.model_dump(), f, default_flow_style=False)

    # Create gitignore file if it does not exist
    gitignore_path = Path(file_path).parent / ".gitignore"
    try:
        with open(gitignore_path, "r") as f:
            gitignore_content = f.read()
    except FileNotFoundError:
        gitignore_content = ""

    if "arkitekt_server_config.yaml" not in gitignore_content:
        with open(gitignore_path, "a") as f:
            f.write("\narkitekt_server_config.yaml\n")
            f.write("# Arkitekt server config file\n")
            f.write(
                "# This file is automatically generated and should not be modified manually.\n"
            )
            f.write(
                "# It contains sensitive information and should not be committed to version control.\n"
            )


def load_or_create_yaml_file(file_path: str) -> ArkitektServerConfig:
    """Load or create a YAML file with default configuration."""
    try:
        with open(file_path, "r") as f:
            data = yaml.safe_load(f)
            return ArkitektServerConfig(**data["config"])
    except FileNotFoundError:
        raise FileNotFoundError(
            f"Configuration file '{file_path}' not found. Please run 'arkitekt init' to create a new configuration."
        )


def load_yaml_file(file_path: str) -> ArkitektServerConfig:
    """Load a YAML file and return the configuration."""
    try:
        with open(file_path, "r") as f:
            data = yaml.safe_load(f)
            return ArkitektServerConfig(**data["config"])
    except FileNotFoundError:
        raise FileNotFoundError(f"Configuration file '{file_path}' not found.")
    except yaml.YAMLError as e:
        raise ValueError(f"Error parsing YAML file: {e}")


def show_important_information(config: ArkitektServerConfig):
    """Display important information about the configuration."""
    console.print(f"Admin User: {config.global_admin}")
    console.print(f"Admin Password: {config.global_admin_password}")
