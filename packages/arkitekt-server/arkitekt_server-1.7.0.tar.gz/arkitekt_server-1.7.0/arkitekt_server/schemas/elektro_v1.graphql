type SynapticConnection implements NetConnection {
  id: ID!
  weight: Float
  threshold: Float
  delay: Float
  netStimulator: ID!
  synapse: ID!
}

interface NetConnection {
  id: ID!
  weight: Float
  threshold: Float
  delay: Float
}

type Exp2Synapse implements NetSynapse {
  id: ID!
  cell: String!
  location: String!
  position: Float!
  e: Float!
  tau2: Float!
  tau1: Float!
  delay: Float!
}

interface NetSynapse {
  id: ID!
  cell: String!
  location: String!
  position: Float!
}

type Query {
  blocks(filters: BlockFilter, pagination: OffsetPaginationInput): [Block!]!
  traces(filters: TraceFilter, order: TraceOrder, pagination: OffsetPaginationInput): [Trace!]!
  rois(filters: ROIFilter, pagination: OffsetPaginationInput): [ROI!]!
  datasets(filters: DatasetFilter, pagination: OffsetPaginationInput): [Dataset!]!
  mydatasets(filters: DatasetFilter, pagination: OffsetPaginationInput): [Dataset!]!
  experiments(filters: ExperimentFilter, pagination: OffsetPaginationInput): [Experiment!]!
  neuronModels(filters: NeuronModelFilter, pagination: OffsetPaginationInput): [NeuronModel!]!
  modelCollections(filters: ModelCollectionFilter, pagination: OffsetPaginationInput): [ModelCollection!]!
  recordings(filters: RecordingFilter, pagination: OffsetPaginationInput): [Recording!]!
  stimuli(filters: StimulusFilter, pagination: OffsetPaginationInput): [Stimulus!]!
  files(filters: FileFilter, pagination: OffsetPaginationInput): [File!]!
  simulations(filters: SimulationFilter, pagination: OffsetPaginationInput): [Simulation!]!
  myfiles(filters: FileFilter, pagination: OffsetPaginationInput): [File!]!
  randomTrace: Trace!

  """Returns a list of images"""
  stimulus(
    """The unique identifier of an object"""
    id: ID!
  ): Stimulus!

  """Returns a list of cells in a model"""
  cells(
    """The unique identifier of an object"""
    modelId: ID!
    ids: [ID!] = null
    search: String = null
  ): [Cell!]!

  """Returns a list of images"""
  sections(
    """The unique identifier of an object"""
    modelId: ID!

    """The unique identifier of an object"""
    cellId: ID!
    ids: [ID!] = null
    search: String = null
  ): [Section!]!

  """Returns a list of images"""
  recording(
    """The unique identifier of an object"""
    id: ID!
  ): Recording!
  block(
    """The unique identifier of an object"""
    id: ID!
  ): Block!
  experiment(
    """The unique identifier of an object"""
    id: ID!
  ): Experiment!
  modelCollection(
    """The unique identifier of an object"""
    id: ID!
  ): ModelCollection!
  simulation(
    """The unique identifier of an object"""
    id: ID!
  ): Simulation!

  """Returns a single image by ID"""
  neuronModel(
    """The unique identifier of an object"""
    id: ID!
  ): NeuronModel!

  """Returns a single image by ID"""
  trace(
    """The unique identifier of an object"""
    id: ID!
  ): Trace!
  roi(
    """The unique identifier of an object"""
    id: ID!
  ): ROI!
  file(
    """The unique identifier of an object"""
    id: ID!
  ): File!
  dataset(
    """The unique identifier of an object"""
    id: ID!
  ): Dataset!
}

type Block {
  id: ID!
  name: String!
  description: String
  trace: Trace!
  acquiredAt: DateTime
  provenanceEntries(pagination: OffsetPaginationInput): [ProvenanceEntry!]!

  """Who created this recording session"""
  creator: User

  """The groups in this recording session"""
  groups(filters: BlockGroupFilter, pagination: OffsetPaginationInput): [BlockGroup!]!

  """The segments in this recording session"""
  segments(filters: BlockSegmentFilter, pagination: OffsetPaginationInput): [BlockSegment!]!
}

type Trace {
  id: ID!

  """The name of the image"""
  name: String!

  """The store where the image data is stored."""
  store: ZarrStore!

  """The dataset this image belongs to"""
  dataset: Dataset
  provenanceEntries(pagination: OffsetPaginationInput): [ProvenanceEntry!]!

  """Who created this image"""
  creator: User

  """The rois of this image"""
  rois(filters: ROIFilter, pagination: OffsetPaginationInput): [ROI!]!

  """Is this image pinned by the current user"""
  pinned: Boolean!

  """The tags of this image"""
  tags: [String!]!
  events(filters: ROIFilter): [ROI!]!
}

type ZarrStore {
  id: ID!

  """The path to the data. Relative to the bucket."""
  path: String

  """The shape of the data."""
  shape: [Int!]

  """The dtype of the data."""
  dtype: String

  """The bucket where the data is stored."""
  bucket: String!

  """The key where the data is stored."""
  key: String!

  """The chunks of the data."""
  chunks: [Int!]

  """Whether the zarr store was populated (e.g. was a dataset created)."""
  populated: Boolean!
}

type Dataset {
  id: ID!
  images(filters: TraceFilter, order: TraceOrder, pagination: OffsetPaginationInput): [Trace!]!
  files(filters: FileFilter, pagination: OffsetPaginationInput): [File!]!
  children(filters: DatasetFilter, pagination: OffsetPaginationInput): [Dataset!]!
  description: String
  name: String!
  provenanceEntries(pagination: OffsetPaginationInput): [ProvenanceEntry!]!
  isDefault: Boolean!
  createdAt: DateTime!
  creator: User
  pinned: Boolean!
  tags: [String!]!
}

input TraceFilter {
  name: StrFilterLookup
  ids: [ID!]
  dataset: DatasetFilter
  notDerived: Boolean = null
  search: String
  AND: TraceFilter
  OR: TraceFilter
  NOT: TraceFilter
  DISTINCT: Boolean
}

input StrFilterLookup {
  exact: String
  iExact: String
  contains: String
  iContains: String
  inList: [String!]
  gt: String
  gte: String
  lt: String
  lte: String
  startsWith: String
  iStartsWith: String
  endsWith: String
  iEndsWith: String
  range: [String!]
  isNull: Boolean
  regex: String
  iRegex: String
}

input DatasetFilter {
  id: ID
  name: StrFilterLookup
  AND: DatasetFilter
  OR: DatasetFilter
  NOT: DatasetFilter
  DISTINCT: Boolean
}

input TraceOrder {
  createdAt: Ordering
}

enum Ordering {
  ASC
  ASC_NULLS_FIRST
  ASC_NULLS_LAST
  DESC
  DESC_NULLS_FIRST
  DESC_NULLS_LAST
}

input OffsetPaginationInput {
  offset: Int! = 0
  limit: Int
}

type File {
  id: ID!
  name: String!
  origins(filters: TraceFilter, order: TraceOrder, pagination: OffsetPaginationInput): [Trace!]!
  store: BigFileStore!
}

type BigFileStore {
  id: ID!
  path: String!
  bucket: String!
  key: String!
  presignedUrl: String!
}

input FileFilter {
  ids: [ID!]
  search: String
  id: ID
  name: StrFilterLookup
  AND: FileFilter
  OR: FileFilter
  NOT: FileFilter
  DISTINCT: Boolean
}

"""A provenance event for a model."""
type ProvenanceEntry {
  client: Client

  """User who made the change."""
  user: User

  """The type of change that was made."""
  kind: HistoryKind!

  """The date of the change."""
  date: DateTime!

  """
  The assignation ID during which the change occurred. If it was happening outside of an assignation, it will be None.
  """
  during: String

  """The ID of the history entry."""
  id: ID!

  """The effective changes made to the model."""
  effectiveChanges: [ModelChange!]!
}

type Client {
  clientId: String!
  name: String!
}

type User {
  sub: String!
  preferredUsername: String!
  activeOrganization: Organization
}

type Organization {
  id: String!
  slug: String!
}

"""The type of change that was made."""
enum HistoryKind {
  CREATE
  UPDATE
  DELETE
}

"""Date with time (isoformat)"""
scalar DateTime

"""A change made to a model."""
type ModelChange {
  """The field that was changed."""
  field: String!

  """The old value of the field."""
  oldValue: String

  """The new value of the field."""
  newValue: String
}

type ROI {
  id: ID!
  trace: Trace!
  kind: RoiKind!
  vectors: [FiveDVector!]!
  createdAt: DateTime!
  creator: User
  provenanceEntries(pagination: OffsetPaginationInput): [ProvenanceEntry!]!
  pinned: Boolean!
  name: String!
  label: String
}

enum RoiKind {
  LINE
  POINT
  SPIKE
  SLICE
}

"""The `Vector` scalar type represents a matrix values as specified by"""
scalar FiveDVector

input ROIFilter {
  ids: [ID!]
  id: ID
  kind: RoiKindChoices
  trace: ID = null
  search: String
  AND: ROIFilter
  OR: ROIFilter
  NOT: ROIFilter
  DISTINCT: Boolean
}

enum RoiKindChoices {
  LINE
  POINT
  SPIKE
  SLICE
}

type BlockGroup {
  id: ID!
  name: String!
  block: Block!
  description: String

  """The analog signals in this group"""
  analogSignals(filters: AnalogSignalFilter, pagination: OffsetPaginationInput): [AnalogSignal!]!

  """The irregularly sampled signals in this group"""
  irregularlySampledSignals(filters: IrregularlySampledSignalFilter, pagination: OffsetPaginationInput): [IrregularlySampledSignal!]!

  """The spike trains in this group"""
  spikeTrains(filters: SpikeTrainFilter, pagination: OffsetPaginationInput): [SpikeTrain!]!
}

type AnalogSignal implements Signal {
  name: String!
  segment: BlockSegment!
  id: ID!
  samplingRate: Float!
  unit: String
  channels(filters: AnalogSignalChannelFilter, pagination: OffsetPaginationInput): [AnalogSignalChannel!]!
}

"""A signal recorded during a recording session"""
interface Signal {
  name: String!
  segment: BlockSegment!
}

type BlockSegment {
  id: ID!
  block: Block!
  label: String!
  description: String
  startTime: Float!
  endTime: Float!

  """Who created this segment"""
  creator: User
  provenanceEntries(pagination: OffsetPaginationInput): [ProvenanceEntry!]!

  """The groups that this segment belongs to"""
  groups(filters: BlockGroupFilter, pagination: OffsetPaginationInput): [BlockGroup!]!

  """The analog signals in this group"""
  analogSignals(filters: AnalogSignalFilter, pagination: OffsetPaginationInput): [AnalogSignal!]!

  """The irregularly sampled signals in this group"""
  irregularlySampledSignals(filters: IrregularlySampledSignalFilter, pagination: OffsetPaginationInput): [IrregularlySampledSignal!]!

  """The spike trains in this group"""
  spikeTrains(filters: SpikeTrainFilter, pagination: OffsetPaginationInput): [SpikeTrain!]!
}

input BlockGroupFilter {
  ids: [ID!]
  search: String
  id: ID
  name: StrFilterLookup
  description: StrFilterLookup
  AND: BlockGroupFilter
  OR: BlockGroupFilter
  NOT: BlockGroupFilter
  DISTINCT: Boolean
}

input AnalogSignalFilter {
  ids: [ID!]
  search: String
  id: ID
  label: StrFilterLookup
  session: ID = null
  AND: AnalogSignalFilter
  OR: AnalogSignalFilter
  NOT: AnalogSignalFilter
  DISTINCT: Boolean
}

type IrregularlySampledSignal implements Signal {
  name: String!
  segment: BlockSegment!
  id: ID!
  trace: Trace!
  unit: String
}

input IrregularlySampledSignalFilter {
  ids: [ID!]
  search: String
  id: ID
  label: StrFilterLookup
  session: ID = null
  AND: IrregularlySampledSignalFilter
  OR: IrregularlySampledSignalFilter
  NOT: IrregularlySampledSignalFilter
  DISTINCT: Boolean
}

type SpikeTrain implements Signal {
  name: String!
  segment: BlockSegment!
  id: ID!
  trace: Trace!
}

input SpikeTrainFilter {
  ids: [ID!]
  search: String
  id: ID
  label: StrFilterLookup
  session: ID = null
  AND: SpikeTrainFilter
  OR: SpikeTrainFilter
  NOT: SpikeTrainFilter
  DISTINCT: Boolean
}

type AnalogSignalChannel {
  id: ID!
  label: String
  unit: String
  index: Int!
  trace: Trace!
  analogSignal: AnalogSignal!
}

input AnalogSignalChannelFilter {
  ids: [ID!]
  search: String
  id: ID
  label: StrFilterLookup
  session: ID = null
  AND: AnalogSignalChannelFilter
  OR: AnalogSignalChannelFilter
  NOT: AnalogSignalChannelFilter
  DISTINCT: Boolean
}

input BlockSegmentFilter {
  ids: [ID!]
  search: String
  id: ID
  name: StrFilterLookup
  description: StrFilterLookup
  AND: BlockSegmentFilter
  OR: BlockSegmentFilter
  NOT: BlockSegmentFilter
  DISTINCT: Boolean
}

input BlockFilter {
  ids: [ID!]
  search: String
  id: ID
  label: StrFilterLookup
  trace: ID = null
  groups: [ID!] = null
  AND: BlockFilter
  OR: BlockFilter
  NOT: BlockFilter
  DISTINCT: Boolean
}

type Experiment {
  id: ID!
  name: String!
  description: String
  timeTrace: Trace!
  recordingViews(filters: ExperimentFilter, pagination: OffsetPaginationInput): [ExperimentRecordingView!]!
  stimulusViews(filters: ExperimentFilter, pagination: OffsetPaginationInput): [ExperimentStimulusView!]!
}

type ExperimentRecordingView {
  id: ID!
  recording: Recording!
  label: String
  offset: Float
  duration: Float
}

type Recording {
  id: ID!
  simulation: Simulation!
  kind: RecordingKind!
  trace: Trace!
  location: String!
  position: Float!
  cell: String!
  label: String!
}

type Simulation {
  id: ID!
  name: String!
  description: String
  kind: StimulusKind!
  creator: User
  model: NeuronModel!
  duration: Int!
  dt: Float!
  timeTrace: Trace!
  stimuli(filters: StimulusFilter, pagination: OffsetPaginationInput): [Stimulus!]!
  recordings(filters: RecordingFilter, pagination: OffsetPaginationInput): [Recording!]!
  createdAt: DateTime!
}

enum StimulusKind {
  VOLTAGE
  CURRENT
  UNKNOWN
}

type NeuronModel {
  id: ID!
  name: String!
  description: String
  creator: User
  modelCollections(filters: ModelCollectionFilter, pagination: OffsetPaginationInput): [ModelCollection!]
  simulations(filters: SimulationFilter, pagination: OffsetPaginationInput): [Simulation!]!
  config: ModelConfig!
  changes(to: ID = null): [Change!]!
  comparisons: [Comparison!]!
}

type ModelCollection {
  id: ID!
  name: String!
  models(filters: NeuronModelFilter, pagination: OffsetPaginationInput): [NeuronModel!]!
  description: String
}

input NeuronModelFilter {
  ids: [ID!]
  search: String
  id: ID
  name: StrFilterLookup
  AND: NeuronModelFilter
  OR: NeuronModelFilter
  NOT: NeuronModelFilter
  DISTINCT: Boolean
}

input ModelCollectionFilter {
  ids: [ID!]
  search: String
  id: ID
  name: StrFilterLookup
  AND: ModelCollectionFilter
  OR: ModelCollectionFilter
  NOT: ModelCollectionFilter
  DISTINCT: Boolean
}

input SimulationFilter {
  ids: [ID!]
  search: String
  id: ID
  name: StrFilterLookup
  AND: SimulationFilter
  OR: SimulationFilter
  NOT: SimulationFilter
  DISTINCT: Boolean
}

type ModelConfig {
  cells: [Cell!]!
  netStimulators: [NetStimulator!]
  netConnections: [NetConnection!]
  netSynapses: [NetSynapse!]
  vInit: Float!
  celsius: Float!
  label: String
}

type Cell {
  id: String!
  biophysics: Biophysics!
  topology: Topology!
}

type Biophysics {
  compartments: [Compartment!]!
}

type Compartment {
  id: String!
  mechanisms: [String!]!
  sectionParams: [SectionParamMap!]!
  globalParams: [GlobalParamMap!]!
}

type SectionParamMap {
  param: String!

  """The governing mechanism"""
  mechanism: String!

  """The value of the parameter"""
  value: Float!

  """Description of the parameter"""
  description: String
}

type GlobalParamMap {
  param: String!
  value: Float!
  description: String
}

type Topology {
  sections: [Section!]!
}

type Section {
  id: String!
  category: String!
  nseg: Int!
  diam: Float!

  """Length of the section. Required if coords is not provided."""
  length: Float
  coords: [Coord!]
  connections: [Connection!]!
}

type Coord {
  x: Float!
  y: Float!
  z: Float!
}

type Connection {
  parent: String!
  location: Float!
}

type NetStimulator {
  id: ID!
  start: Float!
  number: Int!
  interval: Float
}

type Change {
  type: ChangeType!
  path: [String!]!
  valueA: Any
  valueB: Any
}

enum ChangeType {
  REMOVED
  ADDED
  CHANGED
}

"""The `Any` scalar any type"""
scalar Any

type Comparison {
  collection: ModelCollection!
  changes: [Change!]!
}

type Stimulus {
  id: ID!
  simulation: Simulation!
  kind: StimulusKind!
  trace: Trace!
  location: String!
  position: Float!
  cell: String!
  label: String!
}

input StimulusFilter {
  ids: [ID!]
  search: String
  id: ID
  name: StrFilterLookup
  AND: StimulusFilter
  OR: StimulusFilter
  NOT: StimulusFilter
  DISTINCT: Boolean
}

input RecordingFilter {
  ids: [ID!]
  search: String
  id: ID
  name: StrFilterLookup
  AND: RecordingFilter
  OR: RecordingFilter
  NOT: RecordingFilter
  DISTINCT: Boolean
}

enum RecordingKind {
  VOLTAGE
  CURRENT
  TIME
  INA
  UNKNOWN
}

input ExperimentFilter {
  ids: [ID!]
  search: String
  id: ID
  name: StrFilterLookup
  AND: ExperimentFilter
  OR: ExperimentFilter
  NOT: ExperimentFilter
  DISTINCT: Boolean
}

type ExperimentStimulusView {
  id: ID!
  stimulus: Stimulus!
  label: String
  offset: Float
  duration: Float
}

type Mutation {
  """Request credentials to upload a new image"""
  requestUpload(input: RequestUploadInput!): Credentials!

  """Request credentials to access an image"""
  requestAccess(input: RequestAccessInput!): AccessCredentials!

  """Request credentials for media file upload"""
  requestMediaUpload(input: RequestMediaUploadInput!): PresignedPostCredentials!

  """Request credentials to upload a new file"""
  requestFileUpload(input: RequestFileUploadInput!): Credentials!

  """Request presigned credentials for file upload"""
  requestFileUploadPresigned(input: RequestFileUploadInput!): PresignedPostCredentials!

  """Request credentials to access a file"""
  requestFileAccess(input: RequestFileAccessInput!): AccessCredentials!

  """Create a new block"""
  createBlock(input: CreateBlockInput!): Block!

  """Create an image from array-like data"""
  fromTraceLike(input: FromTraceLikeInput!): Trace!

  """Pin an image for quick access"""
  pinImage(input: PinImageInput!): Trace!

  """Update an existing image's metadata"""
  updateImage(input: UpdateTraceInput!): Trace!

  """Delete an existing image"""
  deleteImage(input: DeleteTraceInput!): ID!

  """Create a new neuron model"""
  createNeuronModel(input: CreateNeuronModelInput!): NeuronModel!

  """Create a new simulsation"""
  createSimulation(input: CreateSimulationInput!): Simulation!

  """Create a file from file-like data"""
  fromFileLike(input: FromFileLike!): File!

  """Delete an existing file"""
  deleteFile(input: DeleteFileInput!): ID!

  """Create a new model collection"""
  createModelCollection(input: CreateModelCollectionInput!): ModelCollection!

  """Create a new dataset to organize data"""
  createDataset(input: CreateDatasetInput!): Dataset!

  """Update dataset metadata"""
  updateDataset(input: ChangeDatasetInput!): Dataset!

  """Revert dataset to a previous version"""
  revertDataset(input: RevertInput!): Dataset!

  """Pin a dataset for quick access"""
  pinDataset(input: PinDatasetInput!): Dataset!

  """Delete an existing dataset"""
  deleteDataset(input: DeleteDatasetInput!): ID!

  """Add datasets as children of another dataset"""
  putDatasetsInDataset(input: AssociateInput!): Dataset!

  """Remove datasets from being children of another dataset"""
  releaseDatasetsFromDataset(input: DesociateInput!): Dataset!

  """Add images to a dataset"""
  putImagesInDataset(input: AssociateInput!): Dataset!

  """Remove images from a dataset"""
  releaseImagesFromDataset(input: DesociateInput!): Dataset!

  """Add files to a dataset"""
  putFilesInDataset(input: AssociateInput!): Dataset!

  """Remove files from a dataset"""
  releaseFilesFromDataset(input: DesociateInput!): Dataset!

  """Create a new experiment"""
  createExperiment(input: CreateExperimentInput!): Experiment!

  """Create a new region of interest"""
  createRoi(input: RoiInput!): ROI!

  """Update an existing region of interest"""
  updateRoi(input: UpdateRoiInput!): ROI!

  """Pin a region of interest for quick access"""
  pinRoi(input: PinROIInput!): ROI!

  """Delete an existing region of interest"""
  deleteRoi(input: DeleteRoiInput!): ID!
}

"""
Temporary Credentials for a file upload that can be used by a Client (e.g. in a python datalayer)
"""
type Credentials {
  status: String!
  accessKey: String!
  secretKey: String!
  sessionToken: String!
  datalayer: String!
  bucket: String!
  key: String!
  store: String!
}

input RequestUploadInput {
  key: String!
  datalayer: String!
}

"""
Temporary Credentials for a file download that can be used by a Client (e.g. in a python datalayer)
"""
type AccessCredentials {
  accessKey: String!
  secretKey: String!
  sessionToken: String!
  bucket: String!
  key: String!
  path: String!
}

input RequestAccessInput {
  store: ID!
  duration: Int = null
}

"""
Temporary Credentials for a file upload that can be used by a Client (e.g. in a python datalayer)
"""
type PresignedPostCredentials {
  key: String!
  xAmzAlgorithm: String!
  xAmzCredential: String!
  xAmzDate: String!
  xAmzSignature: String!
  policy: String!
  datalayer: String!
  bucket: String!
  store: String!
}

input RequestMediaUploadInput {
  key: String!
  datalayer: String!
}

input RequestFileUploadInput {
  key: String!
  datalayer: String!
}

input RequestFileAccessInput {
  store: ID!
  duration: Int
}

input CreateBlockInput {
  file: ID = null
  name: String!
  recordingTime: DateTime = null
  segments: [BlockSegmentInput!]! = []
}

input BlockSegmentInput {
  name: String = null
  description: String = null
  analogSignals: [AnalogSignalInput!]! = []
  irregularlySampledSignals: [IrregularlySampledSignalInput!]! = []
  spikeTrains: [SpikeTrainInput!]! = []
}

input AnalogSignalInput {
  timeTrace: TraceLike!
  name: String = null
  description: String = null
  samplingRate: Float!
  tStart: Float!
  unit: String = null
  channels: [AnalogSignalChannelInput!]!
}

"""
The `ArrayLike` scalar type represents a reference to a store previously created by the user n a datalayer
"""
scalar TraceLike

input AnalogSignalChannelInput {
  name: String!
  index: Int!
  unit: String = null
  description: String = null
  color: [Int!] = null
  trace: TraceLike!
}

input IrregularlySampledSignalInput {
  times: TraceLike!
  trace: TraceLike!
  name: String = null
  unit: String = null
  description: String = null
}

input SpikeTrainInput {
  times: TraceLike!
  tStart: Float!
  tStop: Float!
  waveforms: TraceLike = null
  name: String = null
  description: String = null
  leftSweep: Float = null
}

"""Input type for creating an image from an array-like object"""
input FromTraceLikeInput {
  """The array-like object to create the image from"""
  array: TraceLike!

  """The name of the image"""
  name: String!

  """Optional dataset ID to associate the image with"""
  dataset: ID = null

  """Optional list of tags to associate with the image"""
  tags: [String!] = null
}

input PinImageInput {
  id: ID!
  pin: Boolean!
}

input UpdateTraceInput {
  id: ID!
  tags: [String!] = null
  name: String = null
}

input DeleteTraceInput {
  id: ID!
}

input CreateNeuronModelInput {
  name: String!
  parent: ID
  config: ModelConfigInput!
}

input ModelConfigInput {
  cells: [CellInput!]! = []
  netStimulators: [NetStimulatorInput!] = []
  netConnections: [NetConnectionInput!] = []
  netSynapses: [NetSynapseInput!] = []
  vInit: Float! = -67
  celsius: Float! = 36
  label: String = null
}

input CellInput {
  id: String! = "4b813684-4157-4934-bec8-50c49f98777d"
  biophysics: BiophysicsInput!
  topology: TopologyInput!
}

input BiophysicsInput {
  compartments: [CompartmentInput!]! = []
}

input CompartmentInput {
  id: String! = "af95cab6-975a-4329-86e2-c9ce9ab4263c"
  mechanisms: [String!]! = []
  sectionParams: [SectionParamMapInput!]
  globalParams: [GlobalParamMapInput!]
}

input SectionParamMapInput {
  param: String!

  """The governing mechanism"""
  mechanism: String!

  """The value of the parameter"""
  value: Float!

  """Description of the parameter"""
  description: String
}

input GlobalParamMapInput {
  param: String!
  value: Float!
  description: String = null
}

input TopologyInput {
  sections: [SectionInput!]!
}

input SectionInput {
  id: String!
  category: String
  nseg: Int! = 1
  diam: Float! = 1

  """Length of the section. Required if coords is not provided."""
  length: Float = null
  coords: [CoordInput!] = null
  connections: [ConnectionInput!] = []
}

input CoordInput {
  x: Float!
  y: Float!
  z: Float!
}

input ConnectionInput {
  parent: String!
  location: Float! = 1
}

input NetStimulatorInput {
  id: ID! = "88f119c3-8b62-4898-9866-d41153011fca"
  start: Float! = 100
  number: Int! = 1
  interval: Float = null
}

input NetConnectionInput {
  kind: ConnectionKind! = SYNAPSE
  id: ID! = "4ac30ddd-93b7-462d-88ce-055dd99a734e"
  weight: Float = null
  threshold: Float = null
  delay: Float = null
  netStimulator: ID!
  synapse: ID!
}

enum ConnectionKind {
  SYNAPSE
}

input NetSynapseInput {
  id: ID!
  kind: SynapseKind! = EXP2SYN
  e: Float!
  tau2: Float!
  tau1: Float!
  cell: ID!
  location: ID!
  position: Float! = 0.5
}

enum SynapseKind {
  EXP2SYN
  GABAA
}

input CreateSimulationInput {
  name: String!
  model: ID!
  recordings: [RecordingInput!]!
  stimuli: [StimulusInput!]!
  timeTrace: TraceLike = null
  duration: Float!
  dt: Float = null
}

input RecordingInput {
  trace: TraceLike!
  kind: RecordingKind!
  cell: ID
  location: ID
  position: Float
}

input StimulusInput {
  trace: TraceLike!
  kind: StimulusKind!
  cell: ID
  location: ID
  position: Float
}

input FromFileLike {
  name: String!
  file: FileLike!
  origins: [ID!] = null
  dataset: ID = null
}

"""
The `FileLike` scalar type represents a reference to a big file storage previously created by the user n a datalayer
"""
scalar FileLike

input DeleteFileInput {
  id: ID!
}

input CreateModelCollectionInput {
  name: String!
  models: [ID!]!
  description: String = null
}

input CreateDatasetInput {
  name: String!
}

input ChangeDatasetInput {
  name: String!
  id: ID!
}

input RevertInput {
  id: ID!
  historyId: ID!
}

input PinDatasetInput {
  id: ID!
  pin: Boolean!
}

input DeleteDatasetInput {
  id: ID!
}

input AssociateInput {
  selfs: [ID!]!
  other: ID!
}

input DesociateInput {
  selfs: [ID!]!
  other: ID!
}

input CreateExperimentInput {
  name: String!
  timeTrace: ID = null
  stimulusViews: [StimulusViewInput!]!
  recordingViews: [RecordingViewInput!]!
  description: String = null
}

input StimulusViewInput {
  stimulus: ID!
  offset: Float = null
  duration: Float = null
  label: String = null
}

input RecordingViewInput {
  recording: ID!
  offset: Float = null
  duration: Float = null
  label: String = null
}

input RoiInput {
  """The image this ROI belongs to"""
  trace: ID!

  """The vector coordinates defining the as XY"""
  vectors: [TwoDVector!]!

  """The type/kind of ROI"""
  kind: RoiKind!

  """The label of the ROI"""
  label: String = null
}

"""The `Vector` scalar type represents a matrix values as specified by"""
scalar TwoDVector

input UpdateRoiInput {
  roi: ID!
  label: String = null
  vectors: [TwoDVector!] = null
  kind: RoiKind = null
}

input PinROIInput {
  id: ID!
  pin: Boolean!
}

input DeleteRoiInput {
  id: ID!
}

type Subscription {
  """Subscribe to real-time ROI updates"""
  rois(trace: ID!): RoiEvent!

  """Subscribe to real-time image updates"""
  traces(dataset: ID = null): TraceEvent!

  """Subscribe to real-time file updates"""
  files(dataset: ID = null): FileEvent!
}

type RoiEvent {
  create: ROI
  delete: ID
  update: ROI
}

type TraceEvent {
  create: Trace
  update: Trace
  delete: ID
}

type FileEvent {
  create: File
  delete: ID
  update: File
  moved: File
}