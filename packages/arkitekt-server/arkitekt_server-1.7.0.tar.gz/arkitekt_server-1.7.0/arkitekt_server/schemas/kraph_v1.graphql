"""
A Entity is a recorded data point in a graph. It can measure a property of an entity through a direct measurement edge, that connects the entity to the structure. It of course can relate to other structures through relation edges.
"""
type Entity implements Node {
  """The unique identifier of the entity within its graph"""
  pinned: Boolean!

  """The unique identifier of the entity within its graph"""
  pinnedBy: [User!]!

  """The tags associated with this entity. Currently not implemented   """
  tags: [Tag!]

  """The unique identifier of the entity within its graph"""
  externalId: String

  """The unique identifier of the entity within its graph"""
  localId: String
  relevantQueries: [NodeQuery!]!
  views: [NodeQueryView!]!

  """The best view of the node given the current context"""
  bestView: NodeQueryView

  """The unique identifier of the entity within its graph"""
  graph: Graph!
  label(full: Boolean = null): String!

  """The unique identifier of the entity within its graph"""
  id: NodeID!

  """The unique identifier of the entity within its graph"""
  graphId: ID!

  """The unique identifier of the entity within its graph"""
  rightEdges: [Edge!]!

  """The unique identifier of the entity within its graph"""
  leftEdges: [Edge!]!

  """The unique identifier of the entity within its graph"""
  edges(filter: EntityRelationFilter = null, pagination: GraphPaginationInput = null): [Edge!]!

  """Protocol steps where this entity was the target"""
  category: EntityCategory!

  """Subjectable to"""
  subjectableTo: [PlayableEntityRoleInProtocolEvent!]!

  """Subjectable to"""
  targetableBy: [PlayableEntityRoleInProtocolEvent!]!

  """Measurements that this entity is involved in"""
  measuredBy: [Measurement!]!

  """Measurements that this entity is involved in"""
  subjectedTo: [Participant!]!

  """Measurements that this entity is involved in"""
  targetedBy: [Participant!]!
}

type User {
  sub: String!
  preferredUsername: String!
  activeOrganization: Organization
}

type Organization {
  id: String!
  slug: String!
}

"""A tag is a label that can be assigned to entities and relations."""
type Tag {
  id: ID!
  value: String!
}

"""A view of a node entities and relations."""
type NodeQuery {
  id: ID!
  name: String!
  description: String
  kind: ViewKind!
  graph: Graph!
  query: String!
  pinned: Boolean!
  render(nodeId: ID!): PathPairsTable!
}

enum ViewKind {
  PATH
  PAIRS
  TABLE
  INT_METRIC
  FLOAT_METRIC
  NODE_LIST
  EDGE_LIST
}

"""A graph, that contains entities and relations."""
type Graph {
  id: ID!
  name: String!
  description: String
  ageName: String!

  """The media store that contains the image for this graph"""
  store: MediaStore

  """The list of metric expressions defined in this ontology"""
  nodeQueries(filters: NodeQueryFilter, pagination: OffsetPaginationInput): [NodeQuery!]!

  """The list of metric expressions defined in this ontology"""
  graphQueries(filters: GraphQueryFilter, pagination: OffsetPaginationInput): [GraphQuery!]!

  """The list of metric expressions defined in this ontology"""
  metricCategories(filters: MetricCategoryFilter, pagination: OffsetPaginationInput): [MetricCategory!]!

  """The list of structure expressions defined in this ontology"""
  structureCategories(filters: StructureCategoryFilter, pagination: OffsetPaginationInput): [StructureCategory!]!

  """The list of step expressions defined in this ontology"""
  protocolEventCategories(filters: ProtocolEventCategoryFilter, pagination: OffsetPaginationInput): [ProtocolEventCategory!]!

  """The list of step expressions defined in this ontology"""
  naturalEventCategories(filters: NaturalEventCategoryFilter, pagination: OffsetPaginationInput): [NaturalEventCategory!]!

  """The list of generic expressions defined in this ontology"""
  entityCategories(filters: EntityCategoryFilter, pagination: OffsetPaginationInput): [EntityCategory!]!

  """The list of reagent expressions defined in this ontology"""
  reagentCategories(filters: ReagentCategoryFilter, pagination: OffsetPaginationInput): [ReagentCategory!]!

  """The list of measurement exprdessions defined in this ontology"""
  measurementCategories(filters: MeasurementCategoryFilter, pagination: OffsetPaginationInput): [MeasurementCategory!]!

  """The list of relation expressions defined in this ontology"""
  relationCategories(filters: RelationCategoryFilter, pagination: OffsetPaginationInput): [RelationCategory!]!

  """The list of structure relation expressions defined in this ontology"""
  structureRelationCategories(filters: StructureRelationCategoryFilter, pagination: OffsetPaginationInput): [StructureRelationCategory!]!
  nodeCategories(filters: NodeCategoryFilter, pagination: OffsetPaginationInput): [NodeCategory!]!
  edgeCategories(filters: EdgeCategoryFilter, pagination: OffsetPaginationInput): [EdgeCategory!]!
  latestNodes(filters: EntityFilter = null, pagination: GraphPaginationInput = null): [Node!]!
  pinned: Boolean!
}

type MediaStore {
  id: ID!
  path: String!
  bucket: String!
  key: String!
  presignedUrl(host: String = null): String!
}

input NodeQueryFilter {
  """Filter by list of IDs"""
  ids: [ID!] = null

  """Search by text"""
  search: String = null
  id: ID
  AND: NodeQueryFilter
  OR: NodeQueryFilter
  NOT: NodeQueryFilter
  DISTINCT: Boolean
}

input OffsetPaginationInput {
  offset: Int! = 0
  limit: Int
}

"""A view of a graph, that contains entities and relations."""
type GraphQuery {
  id: ID!
  name: String!
  description: String
  kind: ViewKind!
  graph: Graph!
  query: String!

  """The list of metric expressions defined in this ontology"""
  scatterPlots(filters: ScatterPlotFilter, pagination: OffsetPaginationInput): [ScatterPlot!]!
  pinned: Boolean!
  render: PathPairsTableNodeList!
  columns: [Column!]!
  relevantFor: [BaseCategory!]!
}

"""A scatter plot of a table graph, that contains entities and relations."""
type ScatterPlot {
  graph: GraphQuery!
  id: ID!
  name: String!
  description: String
  idColumn: String!
  xColumn: String!
  yColumn: String!
  colorColumn: String
  sizeColumn: String
  shapeColumn: String
  createdAt: DateTime!
}

"""Date with time (isoformat)"""
scalar DateTime

input ScatterPlotFilter {
  """Filter by list of IDs"""
  ids: [ID!] = null

  """Search by text"""
  search: String = null
  id: ID
  AND: ScatterPlotFilter
  OR: ScatterPlotFilter
  NOT: ScatterPlotFilter
  DISTINCT: Boolean
}

union PathPairsTableNodeList = Path | Pairs | Table | NodeList

type Path {
  nodes: [Node!]!
  edges: [Edge!]!
}

"""A collection of paired entities."""
type Pairs {
  """The paired entities."""
  pairs: [Pair!]!

  """The graph this table was queried from."""
  graph: Graph!
}

"""A paired structure two entities and the relation between them."""
type Pair {
  """The left entity."""
  source: Node!

  """The right entity."""
  target: Node!

  """The relation between the two entities."""
  edge: Edge!
}

"""A collection of paired entities."""
type Table {
  """The paired entities."""
  rows: [Any!]!

  """The columns describind this table."""
  columns: [Column!]!

  """The graph this table was queried from."""
  graph: Graph!
}

"""The `Any` scalar any type"""
scalar Any

"""A column definition for a table view."""
type Column {
  name: String!
  kind: ColumnKind!
  label: String
  description: String
  category: ID
  valueKind: MetricKind
  searchable: Boolean
  idfor: [ID!]
  preferhidden: Boolean
  identifier: String
}

enum ColumnKind {
  NODE
  VALUE
  EDGE
  STRUCTURE
  USER
}

enum MetricKind {
  INT
  FLOAT
  DATETIME
  STRING
  CATEGORY
  BOOLEAN
  THREE_D_VECTOR
  TWO_D_VECTOR
  ONE_D_VECTOR
  FOUR_D_VECTOR
  N_VECTOR
}

"""A column in a table."""
type NodeList {
  """The nodes in the list."""
  nodes: [Node!]!

  """The graph this list was queried from."""
  graph: Graph!
}

interface BaseCategory {
  """The ontology the expression belongs to."""
  graph: Graph!

  """A description of the expression."""
  description: String

  """
  An image or other media file that can be used to represent the expression.
  """
  store: MediaStore

  """The unique identifier of the expression within its graph"""
  id: ID!

  """The unique identifier of the expression within its graph"""
  ageName: String!
  color: [Float!]

  """The kind of expression"""
  kind: ExpressionKind!

  """The tags that are associated with the expression"""
  tags: [Tag!]!

  """The unique identifier of the expression within its graph"""
  purl: String

  """The sequence of the expression within its graph"""
  sequence: GraphSequence
  relevantQueries: [GraphQuery!]!
  relevantNodeQueries: [NodeQuery!]!
  bestQuery: GraphQuery
  pinned: Boolean!
}

enum ExpressionKind {
  STRUCTURE
  MEASUREMENT
  RELATION
  ENTITY
  METRIC
  RELATION_METRIC
  CONCEPT
}

type GraphSequence {
  graph: Graph!
  id: ID!
  categories: [BaseCategory!]!
}

input GraphQueryFilter {
  """Filter by list of IDs"""
  ids: [ID!] = null

  """Search by text"""
  search: String = null
  id: ID
  AND: GraphQueryFilter
  OR: GraphQueryFilter
  NOT: GraphQueryFilter
  DISTINCT: Boolean
}

type MetricCategory implements NodeCategory & BaseCategory {
  """The unique identifier of the expression within its graph"""
  id: ID!

  """The x position of the node in the graph"""
  positionX: Float

  """The y position of the node in the graph"""
  positionY: Float

  """The height of the node in the graph"""
  height: Float

  """The width of the node in the graph"""
  width: Float

  """The color of the node in the graph"""
  color: [Float!]

  """The ontology the expression belongs to."""
  graph: Graph!

  """A description of the expression."""
  description: String

  """
  An image or other media file that can be used to represent the expression.
  """
  store: MediaStore

  """The unique identifier of the expression within its graph"""
  ageName: String!

  """The kind of expression"""
  kind: ExpressionKind!

  """The tags that are associated with the expression"""
  tags(filters: TagFilter, pagination: OffsetPaginationInput): [Tag!]!

  """The unique identifier of the expression within its graph"""
  purl: String

  """The sequence of the expression within its graph"""
  sequence: GraphSequence
  relevantQueries: [GraphQuery!]!
  relevantNodeQueries: [NodeQuery!]!
  bestQuery: GraphQuery
  pinned: Boolean!

  """The label of the expression"""
  label: String!

  """The kind of metric this expression represents"""
  metricKind: MetricKind!

  """The structure that this metric measures"""
  structureCategory: StructureCategory!
}

interface NodeCategory {
  """The unique identifier of the expression within its graph"""
  id: ID!

  """The x position of the node in the graph"""
  positionX: Float

  """The y position of the node in the graph"""
  positionY: Float

  """The height of the node in the graph"""
  height: Float

  """The width of the node in the graph"""
  width: Float

  """The color of the node in the graph"""
  color: [Float!]
}

input TagFilter {
  """Filter by list of IDs"""
  ids: [ID!] = null

  """Search by text"""
  search: String = null
  id: ID
  name: String = null
  values: [String!] = null
  AND: TagFilter
  OR: TagFilter
  NOT: TagFilter
  DISTINCT: Boolean
}

type StructureCategory implements NodeCategory & BaseCategory {
  """The unique identifier of the expression within its graph"""
  id: ID!

  """The x position of the node in the graph"""
  positionX: Float

  """The y position of the node in the graph"""
  positionY: Float

  """The height of the node in the graph"""
  height: Float

  """The width of the node in the graph"""
  width: Float

  """The color of the node in the graph"""
  color: [Float!]

  """The ontology the expression belongs to."""
  graph: Graph!

  """A description of the expression."""
  description: String

  """
  An image or other media file that can be used to represent the expression.
  """
  store: MediaStore

  """The unique identifier of the expression within its graph"""
  ageName: String!

  """The kind of expression"""
  kind: ExpressionKind!

  """The tags that are associated with the expression"""
  tags(filters: TagFilter, pagination: OffsetPaginationInput): [Tag!]!

  """The unique identifier of the expression within its graph"""
  purl: String

  """The sequence of the expression within its graph"""
  sequence: GraphSequence
  relevantQueries: [GraphQuery!]!
  relevantNodeQueries: [NodeQuery!]!
  bestQuery: GraphQuery
  pinned: Boolean!

  """The structure that this class represents"""
  identifier: String!
}

input MetricCategoryFilter {
  ids: [ID!]
  id: ID
  search: String
  graph: ID
  pinned: Boolean
  AND: MetricCategoryFilter
  OR: MetricCategoryFilter
  NOT: MetricCategoryFilter
  DISTINCT: Boolean
}

input StructureCategoryFilter {
  ids: [ID!]
  id: ID
  search: String
  graph: ID
  ontology: ID
  pinned: Boolean
  AND: StructureCategoryFilter
  OR: StructureCategoryFilter
  NOT: StructureCategoryFilter
  DISTINCT: Boolean
}

type ProtocolEventCategory implements NodeCategory & BaseCategory {
  """The unique identifier of the expression within its graph"""
  id: ID!

  """The x position of the node in the graph"""
  positionX: Float

  """The y position of the node in the graph"""
  positionY: Float

  """The height of the node in the graph"""
  height: Float

  """The width of the node in the graph"""
  width: Float

  """The color of the node in the graph"""
  color: [Float!]

  """The ontology the expression belongs to."""
  graph: Graph!

  """A description of the expression."""
  description: String

  """
  An image or other media file that can be used to represent the expression.
  """
  store: MediaStore

  """The unique identifier of the expression within its graph"""
  ageName: String!

  """The kind of expression"""
  kind: ExpressionKind!

  """The tags that are associated with the expression"""
  tags(filters: TagFilter, pagination: OffsetPaginationInput): [Tag!]!

  """The unique identifier of the expression within its graph"""
  purl: String

  """The sequence of the expression within its graph"""
  sequence: GraphSequence
  relevantQueries: [GraphQuery!]!
  relevantNodeQueries: [NodeQuery!]!
  bestQuery: GraphQuery
  pinned: Boolean!

  """The label of the expression"""
  label: String!

  """The children of this plate"""
  plateChildren: [UntypedPlateChild!]

  """The unique identifier of the expression within its graph"""
  sourceEntityRoles: [EntityRoleDefinition!]!

  """The unique identifier of the expression within its graph"""
  targetEntityRoles: [EntityRoleDefinition!]!

  """The unique identifier of the expression within its graph"""
  sourceReagentRoles: [ReagentRoleDefinition!]!

  """The unique identifier of the expression within its graph"""
  targetReagentRoles: [ReagentRoleDefinition!]!
  variableDefinitions: [VariableDefinition!]!
}

"""The `UntypedPlateChild` scalar type represents a plate child"""
scalar UntypedPlateChild

type EntityRoleDefinition {
  role: String!
  categoryDefinition: EntityCategoryDefinition!
  allowMultiple: Boolean!
  description: String
  label: String
  optional: Boolean!
  currentDefault: Entity
  createCategory: EntityCategory
}

type EntityCategoryDefinition implements CategoryDefintion {
  tagFilters: [String!]
  tagExcludeFilters: [ID!]
  categoryFilters: [ID!]
  categoryExcludeFilters: [ID!]
  matches: [EntityCategory!]!
  defaultUseNew: EntityCategory
}

interface CategoryDefintion {
  tagFilters: [String!]
  tagExcludeFilters: [ID!]
  categoryFilters: [ID!]
  categoryExcludeFilters: [ID!]
}

type EntityCategory implements NodeCategory & BaseCategory {
  """The unique identifier of the expression within its graph"""
  id: ID!

  """The x position of the node in the graph"""
  positionX: Float

  """The y position of the node in the graph"""
  positionY: Float

  """The height of the node in the graph"""
  height: Float

  """The width of the node in the graph"""
  width: Float

  """The color of the node in the graph"""
  color: [Float!]

  """The ontology the expression belongs to."""
  graph: Graph!

  """A description of the expression."""
  description: String

  """
  An image or other media file that can be used to represent the expression.
  """
  store: MediaStore

  """The unique identifier of the expression within its graph"""
  ageName: String!

  """The kind of expression"""
  kind: ExpressionKind!

  """The tags that are associated with the expression"""
  tags(filters: TagFilter, pagination: OffsetPaginationInput): [Tag!]!

  """The unique identifier of the expression within its graph"""
  purl: String

  """The sequence of the expression within its graph"""
  sequence: GraphSequence
  relevantQueries: [GraphQuery!]!
  relevantNodeQueries: [NodeQuery!]!
  bestQuery: GraphQuery
  pinned: Boolean!

  """The label of the expression"""
  label: String!

  """The unique identifier of the expression within its graph"""
  instanceKind: InstanceKind!
  latest(limit: Int = 5): [Entity!]!
}

enum InstanceKind {
  LOT
  SAMPLE
  ENTITY
  UNKNOWN
}

type ReagentRoleDefinition {
  role: String!
  categoryDefinition: ReagentCategoryDefinition!
  allowMultiple: Boolean!
  description: String
  label: String
  optional: Boolean!
  needsQuantity: Boolean!
  currentDefault: Reagent
}

type ReagentCategoryDefinition implements CategoryDefintion {
  tagFilters: [String!]
  tagExcludeFilters: [ID!]
  categoryFilters: [ID!]
  categoryExcludeFilters: [ID!]
  matches: [ReagentCategory!]!
}

type ReagentCategory implements NodeCategory & BaseCategory {
  """The unique identifier of the expression within its graph"""
  id: ID!

  """The x position of the node in the graph"""
  positionX: Float

  """The y position of the node in the graph"""
  positionY: Float

  """The height of the node in the graph"""
  height: Float

  """The width of the node in the graph"""
  width: Float

  """The color of the node in the graph"""
  color: [Float!]

  """The ontology the expression belongs to."""
  graph: Graph!

  """A description of the expression."""
  description: String

  """
  An image or other media file that can be used to represent the expression.
  """
  store: MediaStore

  """The unique identifier of the expression within its graph"""
  ageName: String!

  """The kind of expression"""
  kind: ExpressionKind!

  """The tags that are associated with the expression"""
  tags(filters: TagFilter, pagination: OffsetPaginationInput): [Tag!]!

  """The unique identifier of the expression within its graph"""
  purl: String

  """The sequence of the expression within its graph"""
  sequence: GraphSequence
  relevantQueries: [GraphQuery!]!
  relevantNodeQueries: [NodeQuery!]!
  bestQuery: GraphQuery
  pinned: Boolean!

  """The label of the expression"""
  label: String!

  """The unique identifier of the expression within its graph"""
  instanceKind: InstanceKind!
  latest(limit: Int = 5): [Reagent!]!
}

type VariableDefinition {
  valueKind: MetricKind!
  param: String!
  description: String
  label: String
  optional: Boolean!
  needsQuantity: Boolean!
  default: Any
  options: [VariableOption!]
}

type VariableOption {
  value: String!
  label: String!
  description: String
}

input ProtocolEventCategoryFilter {
  ids: [ID!]
  id: ID
  search: String
  graph: ID
  pinned: Boolean
  AND: ProtocolEventCategoryFilter
  OR: ProtocolEventCategoryFilter
  NOT: ProtocolEventCategoryFilter
  DISTINCT: Boolean
}

type NaturalEventCategory implements NodeCategory & BaseCategory {
  """The unique identifier of the expression within its graph"""
  id: ID!

  """The x position of the node in the graph"""
  positionX: Float

  """The y position of the node in the graph"""
  positionY: Float

  """The height of the node in the graph"""
  height: Float

  """The width of the node in the graph"""
  width: Float

  """The color of the node in the graph"""
  color: [Float!]

  """The ontology the expression belongs to."""
  graph: Graph!

  """A description of the expression."""
  description: String

  """
  An image or other media file that can be used to represent the expression.
  """
  store: MediaStore

  """The unique identifier of the expression within its graph"""
  ageName: String!

  """The kind of expression"""
  kind: ExpressionKind!

  """The tags that are associated with the expression"""
  tags(filters: TagFilter, pagination: OffsetPaginationInput): [Tag!]!

  """The unique identifier of the expression within its graph"""
  purl: String

  """The sequence of the expression within its graph"""
  sequence: GraphSequence
  relevantQueries: [GraphQuery!]!
  relevantNodeQueries: [NodeQuery!]!
  bestQuery: GraphQuery
  pinned: Boolean!

  """The label of the expression"""
  label: String!

  """The children of this plate"""
  plateChildren: [UntypedPlateChild!]

  """The unique identifier of the expression within its graph"""
  sourceEntityRoles: [EntityRoleDefinition!]!

  """The unique identifier of the expression within its graph"""
  targetEntityRoles: [EntityRoleDefinition!]!
}

input NaturalEventCategoryFilter {
  ids: [ID!]
  id: ID
  search: String
  graph: ID
  pinned: Boolean
  AND: NaturalEventCategoryFilter
  OR: NaturalEventCategoryFilter
  NOT: NaturalEventCategoryFilter
  DISTINCT: Boolean
}

input EntityCategoryFilter {
  ids: [ID!]
  id: ID
  search: String
  graph: ID
  ontology: ID
  pinned: Boolean
  tags: [String!]
  AND: EntityCategoryFilter
  OR: EntityCategoryFilter
  NOT: EntityCategoryFilter
  DISTINCT: Boolean
}

input ReagentCategoryFilter {
  ids: [ID!]
  id: ID
  search: String
  graph: ID
  ontology: ID
  pinned: Boolean
  AND: ReagentCategoryFilter
  OR: ReagentCategoryFilter
  NOT: ReagentCategoryFilter
  DISTINCT: Boolean
}

type MeasurementCategory implements EdgeCategory & BaseCategory {
  """The unique identifier of the expression within its graph"""
  id: ID!

  """The ontology the expression belongs to."""
  graph: Graph!

  """A description of the expression."""
  description: String

  """
  An image or other media file that can be used to represent the expression.
  """
  store: MediaStore

  """The unique identifier of the expression within its graph"""
  ageName: String!
  color: [Float!]

  """The kind of expression"""
  kind: ExpressionKind!

  """The tags that are associated with the expression"""
  tags(filters: TagFilter, pagination: OffsetPaginationInput): [Tag!]!

  """The unique identifier of the expression within its graph"""
  purl: String

  """The sequence of the expression within its graph"""
  sequence: GraphSequence
  relevantQueries: [GraphQuery!]!
  relevantNodeQueries: [NodeQuery!]!
  bestQuery: GraphQuery
  pinned: Boolean!

  """The label of the expression"""
  label: String!

  """The unique identifier of the expression within its graph"""
  sourceDefinition: StructureCategoryDefinition!
  targetDefinition: EntityCategoryDefinition!
}

interface EdgeCategory {
  """The unique identifier of the expression within its graph"""
  id: ID!
}

type StructureCategoryDefinition implements CategoryDefintion {
  tagFilters: [String!]
  tagExcludeFilters: [ID!]
  categoryFilters: [ID!]
  categoryExcludeFilters: [ID!]
  matches: [StructureCategory!]!
  identifierFilters: [StructureIdentifier!]
}

"""
The `StructureIdentifier` scalar type represents a identifier of a structure
"""
scalar StructureIdentifier

input MeasurementCategoryFilter {
  ids: [ID!]
  id: ID
  search: String
  graph: ID
  sourceIdentifier: String = null
  AND: MeasurementCategoryFilter
  OR: MeasurementCategoryFilter
  NOT: MeasurementCategoryFilter
  DISTINCT: Boolean
}

type RelationCategory implements EdgeCategory & BaseCategory {
  """The unique identifier of the expression within its graph"""
  id: ID!

  """The ontology the expression belongs to."""
  graph: Graph!

  """A description of the expression."""
  description: String

  """
  An image or other media file that can be used to represent the expression.
  """
  store: MediaStore

  """The unique identifier of the expression within its graph"""
  ageName: String!
  color: [Float!]

  """The kind of expression"""
  kind: ExpressionKind!

  """The tags that are associated with the expression"""
  tags(filters: TagFilter, pagination: OffsetPaginationInput): [Tag!]!

  """The unique identifier of the expression within its graph"""
  purl: String

  """The sequence of the expression within its graph"""
  sequence: GraphSequence
  relevantQueries: [GraphQuery!]!
  relevantNodeQueries: [NodeQuery!]!
  bestQuery: GraphQuery
  pinned: Boolean!

  """The label of the expression"""
  label: String!

  """The unique identifier of the expression within its graph"""
  sourceDefinition: EntityCategoryDefinition!
  targetDefinition: EntityCategoryDefinition!
}

input RelationCategoryFilter {
  ids: [ID!]
  id: ID
  search: String
  graph: ID
  ontology: ID
  pinned: Boolean
  sourceEntity: ID
  targetEntity: ID
  AND: RelationCategoryFilter
  OR: RelationCategoryFilter
  NOT: RelationCategoryFilter
  DISTINCT: Boolean
}

type StructureRelationCategory implements EdgeCategory & BaseCategory {
  """The unique identifier of the expression within its graph"""
  id: ID!

  """The ontology the expression belongs to."""
  graph: Graph!

  """A description of the expression."""
  description: String

  """
  An image or other media file that can be used to represent the expression.
  """
  store: MediaStore

  """The unique identifier of the expression within its graph"""
  ageName: String!
  color: [Float!]

  """The kind of expression"""
  kind: ExpressionKind!

  """The tags that are associated with the expression"""
  tags(filters: TagFilter, pagination: OffsetPaginationInput): [Tag!]!

  """The unique identifier of the expression within its graph"""
  purl: String

  """The sequence of the expression within its graph"""
  sequence: GraphSequence
  relevantQueries: [GraphQuery!]!
  relevantNodeQueries: [NodeQuery!]!
  bestQuery: GraphQuery
  pinned: Boolean!

  """The label of the expression"""
  label: String!

  """The unique identifier of the expression within its graph"""
  sourceDefinition: StructureCategoryDefinition!
  targetDefinition: StructureCategoryDefinition!
}

input StructureRelationCategoryFilter {
  ids: [ID!]
  id: ID
  search: String
  graph: ID
  ontology: ID
  pinned: Boolean
  sourceIdentifier: String = null
  targetIdentifier: String = null
  AND: StructureRelationCategoryFilter
  OR: StructureRelationCategoryFilter
  NOT: StructureRelationCategoryFilter
  DISTINCT: Boolean
}

input NodeCategoryFilter {
  ids: [ID!]
  id: ID
  search: String
  graph: ID
  ontology: ID
  pinned: Boolean
}

input EdgeCategoryFilter {
  ids: [ID!]
  id: ID
  search: String
  graph: ID
  ontology: ID
  pinned: Boolean
}

"""Filter for entities in the graph"""
input EntityFilter {
  """Filter by list of entity IDs"""
  ids: [ID!] = null

  """Filter by list of entity IDs"""
  externalIds: [ID!] = null

  """Search entities by text"""
  search: String = null

  """Filter by list of categorie tags"""
  tags: [String!] = null

  """Filter by graph ID"""
  graph: ID = null

  """Filter by list of entity categories"""
  categories: [ID!] = null

  """Filter by creation date before this date"""
  createdBefore: DateTime = null

  """Filter by creation date after this date"""
  createdAfter: DateTime = null

  """Filter by active status"""
  active: Boolean = null
}

input GraphPaginationInput {
  limit: Int = 200
  offset: Int = 0
}

union PathPairsTable = Path | Pairs | Table

type NodeQueryView {
  query: NodeQuery!
  render: PathPairsTable!
  nodeId: String!
}

"""The `NodeID` scalar type represents a graph node ID"""
scalar NodeID

"""Filter for entity relations in the graph"""
input EntityRelationFilter {
  """Filter by graph ID"""
  graph: ID = null

  """Filter by relation kind"""
  kind: ID = null

  """Filter by list of relation IDs"""
  ids: [ID!] = null

  """Filter by linked expression ID"""
  linkedExpression: ID = null

  """Search relations by text"""
  search: String = null

  """Include self-relations"""
  withSelf: Boolean = null

  """Filter by left entity ID"""
  leftId: ID = null

  """Filter by right entity ID"""
  rightId: ID = null
}

"""Playable Role in Protocol Event"""
type PlayableEntityRoleInProtocolEvent {
  """The unique identifier of the entity within its graph"""
  role: String!

  """The unique identifier of the entity within its graph"""
  category: ProtocolEventCategory!
}

interface Edge {
  """The unique identifier of the entity within its graph"""
  id: NodeID!
  label: String!

  """The unique identifier of the entity within its graph"""
  reverseLabel: String!
  leftId: String!
  rightId: String!
  right: Node!
  left: Node!
  target: Node!
  source: Node!
}

interface Node {
  """The unique identifier of the entity within its graph"""
  pinned: Boolean!

  """The unique identifier of the entity within its graph"""
  pinnedBy: [User!]!

  """The tags associated with this entity. Currently not implemented   """
  tags: [Tag!]

  """The unique identifier of the entity within its graph"""
  externalId: String

  """The unique identifier of the entity within its graph"""
  localId: String
  relevantQueries: [NodeQuery!]!
  views: [NodeQueryView!]!

  """The best view of the node given the current context"""
  bestView: NodeQueryView

  """The unique identifier of the entity within its graph"""
  graph: Graph!
  label(full: Boolean = null): String!

  """The unique identifier of the entity within its graph"""
  id: NodeID!

  """The unique identifier of the entity within its graph"""
  graphId: ID!

  """The unique identifier of the entity within its graph"""
  rightEdges: [Edge!]!

  """The unique identifier of the entity within its graph"""
  leftEdges: [Edge!]!

  """The unique identifier of the entity within its graph"""
  edges(filter: EntityRelationFilter = null, pagination: GraphPaginationInput = null): [Edge!]!
}

"""
A Structure is a recorded data point in a graph. It can measure a property of an entity through a direct measurement edge, that connects the entity to the structure. It of course can relate to other structures through relation edges.
"""
type Structure implements Node {
  """The unique identifier of the entity within its graph"""
  pinned: Boolean!

  """The unique identifier of the entity within its graph"""
  pinnedBy: [User!]!

  """The tags associated with this entity. Currently not implemented   """
  tags: [Tag!]

  """The unique identifier of the entity within its graph"""
  externalId: String

  """The unique identifier of the entity within its graph"""
  localId: String
  relevantQueries: [NodeQuery!]!
  views: [NodeQueryView!]!

  """The best view of the node given the current context"""
  bestView: NodeQueryView

  """The unique identifier of the entity within its graph"""
  graph: Graph!
  label(full: Boolean = null): String!

  """The unique identifier of the entity within its graph"""
  id: NodeID!

  """The unique identifier of the entity within its graph"""
  graphId: ID!

  """The unique identifier of the entity within its graph"""
  rightEdges: [Edge!]!

  """The unique identifier of the entity within its graph"""
  leftEdges: [Edge!]!

  """The unique identifier of the entity within its graph"""
  edges(filter: EntityRelationFilter = null, pagination: GraphPaginationInput = null): [Edge!]!

  """Protocol steps where this entity was the target"""
  category: StructureCategory!

  """The unique identifier of the entity within its graph"""
  identifier: String!

  """The expression that defines this entity's type"""
  object: String!

  """The active measurements of this entity according to the graph"""
  activeMeasurements: [Measurement!]!

  """The expression that defines this entity's type"""
  metrics: [Metric!]!

  """The unique identifier of the entity within its graph"""
  measures: [Entity!]!
}

"""
A Metric is a recorded data point in a graph. It always describes a structure and through the structure it can bring meaning to the measured entity. It can measure a property of an entity through a direct measurement edge, that connects the entity to the structure. It of course can relate to other structures through relation edges.
"""
type Metric implements Node {
  """The unique identifier of the entity within its graph"""
  pinned: Boolean!

  """The unique identifier of the entity within its graph"""
  pinnedBy: [User!]!

  """The tags associated with this entity. Currently not implemented   """
  tags: [Tag!]

  """The unique identifier of the entity within its graph"""
  externalId: String

  """The unique identifier of the entity within its graph"""
  localId: String
  relevantQueries: [NodeQuery!]!
  views: [NodeQueryView!]!

  """The best view of the node given the current context"""
  bestView: NodeQueryView

  """The unique identifier of the entity within its graph"""
  graph: Graph!
  label(full: Boolean = null): String!

  """The unique identifier of the entity within its graph"""
  id: NodeID!

  """The unique identifier of the entity within its graph"""
  graphId: ID!

  """The unique identifier of the entity within its graph"""
  rightEdges: [Edge!]!

  """The unique identifier of the entity within its graph"""
  leftEdges: [Edge!]!

  """The unique identifier of the entity within its graph"""
  edges(filter: EntityRelationFilter = null, pagination: GraphPaginationInput = null): [Edge!]!

  """Protocol steps where this entity was the target"""
  category: MetricCategory!

  """The value of the metric"""
  value: String!
}

"""
A Metric is a recorded data point in a graph. It always describes a structure and through the structure it can bring meaning to the measured entity. It can measure a property of an entity through a direct measurement edge, that connects the entity to the structure. It of course can relate to other structures through relation edges.
"""
type ProtocolEvent implements Node {
  """The unique identifier of the entity within its graph"""
  pinned: Boolean!

  """The unique identifier of the entity within its graph"""
  pinnedBy: [User!]!

  """The tags associated with this entity. Currently not implemented   """
  tags: [Tag!]

  """The unique identifier of the entity within its graph"""
  externalId: String

  """The unique identifier of the entity within its graph"""
  localId: String
  relevantQueries: [NodeQuery!]!
  views: [NodeQueryView!]!

  """The best view of the node given the current context"""
  bestView: NodeQueryView

  """The unique identifier of the entity within its graph"""
  graph: Graph!
  label(full: Boolean = null): String!

  """The unique identifier of the entity within its graph"""
  id: NodeID!

  """The unique identifier of the entity within its graph"""
  graphId: ID!

  """The unique identifier of the entity within its graph"""
  rightEdges: [Edge!]!

  """The unique identifier of the entity within its graph"""
  leftEdges: [Edge!]!

  """The unique identifier of the entity within its graph"""
  edges(filter: EntityRelationFilter = null, pagination: GraphPaginationInput = null): [Edge!]!

  """Protocol steps where this entity was the target"""
  category: ProtocolEventCategory!

  """Protocol steps where this entity was the target"""
  variables: [VariableMapping!]!

  """Protocol steps where this entity was the target"""
  validFrom: DateTime

  """Protocol steps where this entity was the target"""
  validTo: DateTime
}

type VariableMapping {
  role: String!
  value: String!
}

"""
A Metric is a recorded data point in a graph. It always describes a structure and through the structure it can bring meaning to the measured entity. It can measure a property of an entity through a direct measurement edge, that connects the entity to the structure. It of course can relate to other structures through relation edges.
"""
type NaturalEvent implements Node {
  """The unique identifier of the entity within its graph"""
  pinned: Boolean!

  """The unique identifier of the entity within its graph"""
  pinnedBy: [User!]!

  """The tags associated with this entity. Currently not implemented   """
  tags: [Tag!]

  """The unique identifier of the entity within its graph"""
  externalId: String

  """The unique identifier of the entity within its graph"""
  localId: String
  relevantQueries: [NodeQuery!]!
  views: [NodeQueryView!]!

  """The best view of the node given the current context"""
  bestView: NodeQueryView

  """The unique identifier of the entity within its graph"""
  graph: Graph!
  label(full: Boolean = null): String!

  """The unique identifier of the entity within its graph"""
  id: NodeID!

  """The unique identifier of the entity within its graph"""
  graphId: ID!

  """The unique identifier of the entity within its graph"""
  rightEdges: [Edge!]!

  """The unique identifier of the entity within its graph"""
  leftEdges: [Edge!]!

  """The unique identifier of the entity within its graph"""
  edges(filter: EntityRelationFilter = null, pagination: GraphPaginationInput = null): [Edge!]!

  """Protocol steps where this entity was the target"""
  category: NaturalEventCategory!

  """Protocol steps where this entity was the target"""
  validFrom: DateTime

  """Protocol steps where this entity was the target"""
  validTo: DateTime
}

"""
A measurement is an edge from a structure to an entity. Importantly Measurement are always directed from the structure to the entity, and never the other way around.
"""
type Measurement implements Edge {
  """The unique identifier of the entity within its graph"""
  id: NodeID!
  label: String!

  """The unique identifier of the entity within its graph"""
  reverseLabel: String!
  leftId: String!
  rightId: String!
  right: Node!
  left: Node!
  target: Node!
  source: Node!

  """Timestamp from when this entity is valid"""
  validFrom: DateTime

  """Timestamp until when this entity is valid"""
  validTo: DateTime

  """When this entity was created"""
  createdAt: DateTime!
  category: MeasurementCategory!
}

"A relation is an edge between two entities. It is a directed edge, that connects two entities and established a relationship\n                 that is not a measurement between them. I.e. when they are an subjective assertion about the entities.\n                 \n                 \n                 \n                 "
type Relation implements Edge {
  """The unique identifier of the entity within its graph"""
  id: NodeID!
  label: String!

  """The unique identifier of the entity within its graph"""
  reverseLabel: String!
  leftId: String!
  rightId: String!
  right: Node!
  left: Node!
  target: Node!
  source: Node!

  """Timestamp from when this entity is valid"""
  validFrom: DateTime!

  """Timestamp until when this entity is valid"""
  validTo: DateTime!

  """When this entity was created"""
  createdAt: DateTime!
  category: RelationCategory!
}

"A participant edge maps bioentitiy to an event (valid from is not necessary)\n                 "
type Participant implements Edge {
  """The unique identifier of the entity within its graph"""
  id: NodeID!
  label: String!

  """The unique identifier of the entity within its graph"""
  reverseLabel: String!
  leftId: String!
  rightId: String!
  right: Node!
  left: Node!
  target: Node!
  source: Node!

  """Timestamp from when this entity is valid"""
  quantity: Float

  """Timestamp from when this entity is valid"""
  role: String!
}

"""
A Entity is a recorded data point in a graph. It can measure a property of an entity through a direct measurement edge, that connects the entity to the structure. It of course can relate to other structures through relation edges.
"""
type Reagent implements Node {
  """The unique identifier of the entity within its graph"""
  pinned: Boolean!

  """The unique identifier of the entity within its graph"""
  pinnedBy: [User!]!

  """The tags associated with this entity. Currently not implemented   """
  tags: [Tag!]

  """The unique identifier of the entity within its graph"""
  externalId: String

  """The unique identifier of the entity within its graph"""
  localId: String
  relevantQueries: [NodeQuery!]!
  views: [NodeQueryView!]!

  """The best view of the node given the current context"""
  bestView: NodeQueryView

  """The unique identifier of the entity within its graph"""
  graph: Graph!
  label(full: Boolean = null): String!

  """The unique identifier of the entity within its graph"""
  id: NodeID!

  """The unique identifier of the entity within its graph"""
  graphId: ID!

  """The unique identifier of the entity within its graph"""
  rightEdges: [Edge!]!

  """The unique identifier of the entity within its graph"""
  leftEdges: [Edge!]!

  """The unique identifier of the entity within its graph"""
  edges(filter: EntityRelationFilter = null, pagination: GraphPaginationInput = null): [Edge!]!

  """Protocol steps where this entity was the target"""
  category: ReagentCategory!

  """Subjectable to"""
  usableIn: [ProtocolEventCategory!]!

  """Subjectable to"""
  createableFrom: [ProtocolEventCategory!]!
}

"A participant edge maps bioentitiy to an event (valid from is not necessary)\n                 "
type Description implements Edge {
  """The unique identifier of the entity within its graph"""
  id: NodeID!
  label: String!

  """The unique identifier of the entity within its graph"""
  reverseLabel: String!
  leftId: String!
  rightId: String!
  right: Node!
  left: Node!
  target: Node!
  source: Node!
}

type Query {
  """List of all knowledge graphs"""
  graphs(filters: GraphFilter, pagination: OffsetPaginationInput): [Graph!]!

  """List of all graph sequences"""
  graphSequences(filters: GraphSequenceFilter, pagination: OffsetPaginationInput): [GraphSequence!]!

  """List of all graph queries"""
  graphQueries(filters: GraphQueryFilter, pagination: OffsetPaginationInput): [GraphQuery!]!

  """List of all node queries"""
  nodeQueries(filters: NodeQueryFilter, pagination: OffsetPaginationInput): [NodeQuery!]!

  """List of all generic categories"""
  entityCategories(filters: EntityCategoryFilter, pagination: OffsetPaginationInput): [EntityCategory!]!

  """List of all structure categories"""
  structureCategories(filters: StructureCategoryFilter, pagination: OffsetPaginationInput): [StructureCategory!]!

  """List of all natural event categories"""
  naturalEventCategories(filters: NaturalEventCategoryFilter, pagination: OffsetPaginationInput): [NaturalEventCategory!]!

  """List of all protocol event categories"""
  protocolEventCategories(filters: ProtocolEventCategoryFilter, pagination: OffsetPaginationInput): [ProtocolEventCategory!]!

  """List of all metric categories"""
  metricCategories(filters: MetricCategoryFilter, pagination: OffsetPaginationInput): [MetricCategory!]!

  """List of all reagent categories"""
  reagentCategories(filters: ReagentCategoryFilter, pagination: OffsetPaginationInput): [ReagentCategory!]!

  """List of all relation categories"""
  relationCategories(filters: RelationCategoryFilter, pagination: OffsetPaginationInput): [RelationCategory!]!

  """List of all measurement categories"""
  measurementCategories(filters: MeasurementCategoryFilter, pagination: OffsetPaginationInput): [MeasurementCategory!]!

  """List of all structure relation categories"""
  structureRelationCategories(filters: StructureRelationCategoryFilter, pagination: OffsetPaginationInput): [StructureRelationCategory!]!

  """List of all scatter plots"""
  scatterPlots(filters: ScatterPlotFilter, pagination: OffsetPaginationInput): [ScatterPlot!]!

  """List of all deep learning models (e.g. neural networks)"""
  models(filters: ModelFilter, pagination: OffsetPaginationInput): [Model!]!

  """List of all entities in the system"""
  nodes(filters: NodeFilter = null, pagination: GraphPaginationInput = null): [Entity!]!

  """List of all relationships between entities"""
  edges(filters: EntityRelationFilter = null, pagination: GraphPaginationInput = null): [Edge!]!

  """List of all tags in the system"""
  tags(filters: TagFilter, pagination: OffsetPaginationInput): [Tag!]!
  structure(id: ID!): Structure!

  """Render a node query"""
  renderNodeQuery(id: ID!, nodeId: ID!): PairsPathTable!
  knowledgeViews(identifier: StructureIdentifier!, object: ID!): [KnowledgeView!]!

  """The best view of the node given the current context"""
  nodeView(query: ID!, nodeId: ID!): NodeQueryView!
  scatterPlot(id: ID!): ScatterPlot!
  graphSequence(id: ID!): GraphSequence!
  entityCategory(id: ID!): EntityCategory!
  getEntityByCategoryAndExternalId(category: ID!, externalId: String!): Entity!
  structureRelationCategory(id: ID!): StructureRelationCategory!
  metricCategory(id: ID!): MetricCategory!
  structureCategory(id: ID!): StructureCategory!
  naturalEventCategory(id: ID!): NaturalEventCategory!
  protocolEventCategory(id: ID!): ProtocolEventCategory!
  reagentCategory(id: ID!): ReagentCategory!
  relationCategory(id: ID!): RelationCategory!
  measurementCategory(id: ID!): MeasurementCategory!
  nodeCategories(input: OffsetPaginationInput = null, filters: NodeCategoryFilter = null): [NodeCategory!]!
  edgeCategories(input: OffsetPaginationInput = null, filters: NodeCategoryFilter = null): [EdgeCategory!]!
  nodeQuery(id: ID!): NodeQuery!
  graphQuery(id: ID!): GraphQuery!
  node(id: ID!): Node!
  edge(id: ID!): Edge!
  structureByIdentifier(graph: ID!, identifier: StructureIdentifier!, object: ID!): Structure!
  structures(filters: StructureFilter = null, pagination: GraphPaginationInput = null): [Structure!]!
  entity(id: ID!): Entity!
  entities(filters: EntityFilter = null, pagination: GraphPaginationInput = null): [Entity!]!
  reagent(id: ID!): Reagent!
  reagents(filters: ReagentFilter = null, pagination: GraphPaginationInput = null): [Reagent!]!
  protocolEvent(id: ID!): ProtocolEvent!
  protocolEvents(filters: ProtocolEventFilter = null, pagination: GraphPaginationInput = null): [ProtocolEvent!]!
  naturalEvent(id: ID!): NaturalEvent!
  naturalEvents(filters: NaturalEventFilter = null, pagination: GraphPaginationInput = null): [ProtocolEvent!]!
  metric(id: ID!): Metric!
  metrics(filters: MetricFilter = null, pagination: GraphPaginationInput = null): [Metric!]!
  measurement(id: ID!): Measurement!
  measurements(filters: MeasurementFilter = null, pagination: GraphPaginationInput = null): [Measurement!]!
  relation(id: ID!): Relation!
  relations(filters: RelationFilter = null, pagination: GraphPaginationInput = null): [Relation!]!
  structureRelation(id: ID!): StructureRelation!
  structureRelations(filters: StructureRelationFilter = null, pagination: GraphPaginationInput = null): [StructureRelation!]!
  participant(id: ID!): Participant!
  participants(filters: ParticipantFilter = null, pagination: GraphPaginationInput = null): [Participant!]!
  graph(id: ID!): Graph!
  model(id: ID!): Model!
  myActiveGraph: Graph!
}

input GraphFilter {
  """Filter by list of IDs"""
  ids: [ID!] = null

  """Search by text"""
  search: String = null
  id: ID
  pinned: Boolean = null
  AND: GraphFilter
  OR: GraphFilter
  NOT: GraphFilter
  DISTINCT: Boolean
}

input GraphSequenceFilter {
  """Filter by list of IDs"""
  ids: [ID!] = null

  """Search by text"""
  search: String = null
  id: ID
  AND: GraphSequenceFilter
  OR: GraphSequenceFilter
  NOT: GraphSequenceFilter
  DISTINCT: Boolean
}

"""
A model represents a trained machine learning model that can be used for analysis.
"""
type Model {
  """The unique identifier of the model"""
  id: ID!

  """The name of the model"""
  name: String!

  """Optional file storage location containing the model weights/parameters"""
  store: MediaStore
}

input ModelFilter {
  """Filter by list of IDs"""
  ids: [ID!] = null
  id: ID
  search: String
  AND: ModelFilter
  OR: ModelFilter
  NOT: ModelFilter
  DISTINCT: Boolean
}

"""Filter for entity relations in the graph"""
input NodeFilter {
  """Filter by graph ID"""
  graph: ID = null

  """Filter by relation kind"""
  kind: ID = null

  """Filter by list of relation IDs"""
  ids: [ID!] = null

  """Filter by linked expression ID"""
  linkedExpression: ID = null

  """Search relations by text"""
  search: String = null
}

union PairsPathTable = Pairs | Path | Table

type KnowledgeView {
  structureCategory: StructureCategory!
  structure: Structure
}

"""Filter for entity relations in the graph"""
input StructureFilter {
  """Filter by graph ID"""
  graph: ID = null

  """Filter by relation kind"""
  kind: ID = null

  """Filter by list of relation IDs"""
  ids: [ID!] = null

  """Filter by linked expression ID"""
  linkedExpression: ID = null

  """Search relations by text"""
  search: String = null
}

"""Filter for entities in the graph"""
input ReagentFilter {
  """Filter by list of entity IDs"""
  ids: [ID!] = null

  """Filter by list of entity IDs"""
  externalIds: [ID!] = null

  """Search entities by text"""
  search: String = null

  """Filter by list of categorie tags"""
  tags: [String!] = null

  """Filter by graph ID"""
  graph: ID = null

  """Filter by list of entity categories"""
  categories: [ID!] = null

  """Filter by creation date before this date"""
  createdBefore: DateTime = null

  """Filter by creation date after this date"""
  createdAfter: DateTime = null

  """Filter by active status"""
  active: Boolean = null
}

"""Filter for entity relations in the graph"""
input ProtocolEventFilter {
  """Filter by graph ID"""
  graph: ID = null

  """Filter by relation kind"""
  kind: ID = null

  """Filter by list of relation IDs"""
  ids: [ID!] = null

  """Filter by linked expression ID"""
  linkedExpression: ID = null

  """Search relations by text"""
  search: String = null
}

"""Filter for entity relations in the graph"""
input NaturalEventFilter {
  """Filter by graph ID"""
  graph: ID = null

  """Filter by relation kind"""
  kind: ID = null

  """Filter by list of relation IDs"""
  ids: [ID!] = null

  """Filter by linked expression ID"""
  linkedExpression: ID = null

  """Search relations by text"""
  search: String = null
}

"""Filter for entity relations in the graph"""
input MetricFilter {
  """Filter by graph ID"""
  graph: ID = null

  """Filter by relation kind"""
  kind: ID = null

  """Filter by list of relation IDs"""
  ids: [ID!] = null

  """Filter by linked expression ID"""
  linkedExpression: ID = null

  """Search relations by text"""
  search: String = null
}

"""Filter for entity relations in the graph"""
input MeasurementFilter {
  """Filter by graph ID"""
  graph: ID = null

  """Filter by relation kind"""
  kind: ID = null

  """Filter by list of relation IDs"""
  ids: [ID!] = null

  """Search relations by text"""
  search: String = null

  """Include self-relations"""
  withSelf: Boolean = null

  """Filter by left entity ID"""
  leftId: ID = null

  """Filter by right entity ID"""
  rightId: ID = null
}

"""Filter for entity relations in the graph"""
input RelationFilter {
  """Filter by graph ID"""
  graph: ID = null

  """Filter by relation kind"""
  kind: ID = null

  """Filter by list of relation IDs"""
  ids: [ID!] = null

  """Search relations by text"""
  search: String = null

  """Include self-relations"""
  withSelf: Boolean = null

  """Filter by left entity ID"""
  leftId: ID = null

  """Filter by right entity ID"""
  rightId: ID = null
}

"A relation is an edge between two entities. It is a directed edge, that connects two entities and established a relationship\n                 that is not a measurement between them. I.e. when they are an subjective assertion about the entities.\n                 \n                 \n                 \n                 "
type StructureRelation implements Edge {
  """The unique identifier of the entity within its graph"""
  id: NodeID!
  label: String!

  """The unique identifier of the entity within its graph"""
  reverseLabel: String!
  leftId: String!
  rightId: String!
  right: Node!
  left: Node!
  target: Node!
  source: Node!

  """Timestamp from when this entity is valid"""
  validFrom: DateTime

  """Timestamp until when this entity is valid"""
  validTo: DateTime

  """When this entity was created"""
  createdAt: DateTime
  category: StructureRelationCategory!
}

"""Filter for entity relations in the graph"""
input StructureRelationFilter {
  """Filter by graph ID"""
  graph: ID = null

  """Filter by relation kind"""
  kind: ID = null

  """Filter by list of relation IDs"""
  ids: [ID!] = null

  """Search relations by text"""
  search: String = null

  """Include self-relations"""
  withSelf: Boolean = null

  """Filter by left entity ID"""
  leftId: ID = null

  """Filter by right entity ID"""
  rightId: ID = null
}

"""Filter for entity relations in the graph"""
input ParticipantFilter {
  """Filter by graph ID"""
  graph: ID = null

  """Filter by relation kind"""
  kind: ID = null

  """Filter by list of relation IDs"""
  ids: [ID!] = null

  """Search relations by text"""
  search: String = null

  """Include self-relations"""
  withSelf: Boolean = null

  """Filter by left entity ID"""
  leftId: ID = null

  """Filter by right entity ID"""
  rightId: ID = null
}

type Mutation {
  """Create a new graph"""
  createGraph(input: GraphInput!): Graph!

  """Update an existing graph"""
  updateGraph(input: UpdateGraphInput!): Graph!

  """Delete an existing graph"""
  deleteGraph(input: DeleteGraphInput!): ID!

  """Pin or unpin a graph"""
  pinGraph(input: PinGraphInput!): Graph!

  """Create a new expression"""
  createMetricCategory(input: MetricCategoryInput!): MetricCategory!

  """Update an existing expression"""
  updateMetricCategory(input: UpdateMetricCategoryInput!): MetricCategory!

  """Delete an existing expression"""
  deleteMetricCategory(input: DeleteMetricCategoryInput!): ID!

  """Create a new expression"""
  createMeasurementCategory(input: MeasurementCategoryInput!): MeasurementCategory!

  """Update an existing expression"""
  updateMeasurementCategory(input: UpdateMeasurementCategoryInput!): MeasurementCategory!

  """Delete an existing expression"""
  deleteMeasurementCategory(input: DeleteMeasurementCategoryInput!): ID!

  """Create a new expression"""
  createStructureCategory(input: StructureCategoryInput!): StructureCategory!

  """Update an existing expression"""
  updateStructureCategory(input: UpdateStructureCategoryInput!): StructureCategory!

  """Delete an existing expression"""
  deleteStructureCategory(input: DeleteStructureCategoryInput!): ID!

  """Create a new expression"""
  createRelationCategory(input: RelationCategoryInput!): RelationCategory!

  """Update an existing expression"""
  updateRelationCategory(input: UpdateRelationCategoryInput!): RelationCategory!

  """Delete an existing expression"""
  deleteRelationCategory(input: DeleteRelationCategoryInput!): ID!

  """Create a new expression"""
  createStructureRelationCategory(input: StructureRelationCategoryInput!): StructureRelationCategory!

  """Update an existing expression"""
  updateStructureRelationCategory(input: UpdateStructureRelationCategoryInput!): StructureRelationCategory!

  """Delete an existing expression"""
  deleteStructureRelationCategory(input: DeleteStructureRelationCategoryInput!): ID!

  """Create a new expression"""
  createEntityCategory(input: EntityCategoryInput!): EntityCategory!

  """Update an existing expression"""
  updateEntityCategory(input: UpdateEntityCategoryInput!): EntityCategory!

  """Delete an existing expression"""
  deleteEntityCategory(input: DeleteEntityCategoryInput!): ID!

  """Create a new structure metric"""
  createStructureMetric(input: StructureMetricInput!): Metric!

  """Create a new expression"""
  createReagentCategory(input: ReagentCategoryInput!): ReagentCategory!

  """Update an existing expression"""
  updateReagentCategory(input: UpdateReagentCategoryInput!): ReagentCategory!

  """Delete an existing expression"""
  deleteReagentCategory(input: DeleteReagentCategoryInput!): ID!

  """Create a new natural event category"""
  createNaturalEventCategory(input: NaturalEventCategoryInput!): NaturalEventCategory!

  """Update an existing natural event category"""
  updateNaturalEventCategory(input: UpdateNaturalEventCategoryInput!): NaturalEventCategory!

  """Delete an existing natural event category"""
  deleteNaturalEventCategory(input: DeleteNaturalEventCategoryInput!): ID!

  """Create a new protocol event category"""
  createProtocolEventCategory(input: ProtocolEventCategoryInput!): ProtocolEventCategory!

  """Update an existing protocol event category"""
  updateProtocolEventCategory(input: UpdateProtocolEventCategoryInput!): ProtocolEventCategory!

  """Delete an existing protocol event category"""
  deleteProtocolEventCategory(input: DeleteProtocolEventCategoryInput!): ID!

  """Create a new scatter plot"""
  createScatterPlot(input: ScatterPlotInput!): ScatterPlot!

  """Delete an existing scatter plot"""
  deleteScatterPlot(input: DeleteScatterPlotInput!): ID!

  """Record a new natural event"""
  recordNaturalEvent(input: RecordNaturalEventInput!): NaturalEvent!

  """Record a new protocol event"""
  recordProtocolEvent(input: RecordProtocolEventInput!): ProtocolEvent!

  """Create a new 'told you so' supporting structure"""
  createToldyouso(input: ToldYouSoInput!): Structure!

  """Delete a 'told you so' supporting structure"""
  deleteToldyouso(input: DeleteToldYouSoInput!): ID!

  """Create a new measurement edge"""
  createMeasurement(input: MeasurementInput!): Measurement!

  """Create a new relation between entities"""
  createRelation(input: RelationInput!): Relation!

  """Create a new relation between entities"""
  createStructureRelation(input: StructureRelationInput!): StructureRelation!

  """Create a new metric for an entity"""
  createMetric(input: MetricInput!): Metric!

  """Update an existing entity"""
  updateEntity(input: UpdateEntityInput!): Entity!

  """Create a new structure"""
  createStructure(input: StructureInput!): Structure!

  """Create a new tag"""
  createTag(input: TagInput!): Tag!

  """Create a new model"""
  createModel(input: CreateModelInput!): Model!

  """Request a new file upload"""
  requestUpload(input: RequestMediaUploadInput!): PresignedPostCredentials!

  """Create a new entity"""
  createEntity(input: EntityInput!): Entity!

  """Delete an existing entity"""
  deleteEntity(input: DeleteEntityInput!): ID!

  """Create a new entity"""
  createReagent(input: ReagentInput!): Reagent!

  """Delete an existing entity"""
  deleteReagent(input: DeleteReagentInput!): ID!

  """Create a new graph query"""
  createGraphQuery(input: GraphQueryInput!): GraphQuery!

  """Update an existing graph query"""
  updateGraphQuery(input: UpdateGraphQueryInput!): GraphQuery!

  """Pin or unpin a graph query"""
  pinGraphQuery(input: PinGraphQueryInput!): GraphQuery!

  """Create a new node query"""
  createNodeQuery(input: NodeQueryInput!): NodeQuery!

  """Pin or unpin a node query"""
  pinNodeQuery(input: PinNodeQueryInput!): NodeQuery!
}

"""Input type for creating a new ontology"""
input GraphInput {
  """The name of the ontology (will be converted to snake_case)"""
  name: String!

  """An optional description of the ontology"""
  description: String = null

  """An optional ID reference to an associated image"""
  image: ID = null

  """Whether this ontology should be pinned or not"""
  pin: Boolean = null
}

"""Input type for updating an existing ontology"""
input UpdateGraphInput {
  """The ID of the ontology to update"""
  id: ID!

  """New name for the ontology (will be converted to snake_case)"""
  name: String = null

  """A new PURL for the ontology (will be converted to snake_case)"""
  purl: String = null

  """New description for the ontology"""
  description: String = null

  """New ID reference to an associated image"""
  image: ID = null

  """New nodes for the ontology"""
  nodes: [GraphNodeInput!] = null

  """Whether this ontology should be pinned or not"""
  pin: Boolean = null
}

"""Input type for creating a new ontology node"""
input GraphNodeInput {
  """The AGE_NAME of the ontology"""
  id: String!

  """An optional x position for the ontology node"""
  positionX: Float = null

  """An optional y position for the ontology node"""
  positionY: Float = null

  """An optional height for the ontology node"""
  height: Float = null

  """An optional width for the ontology node"""
  width: Float = null

  """An optional RGBA color for the ontology node"""
  color: [Int!] = null
}

"""Input type for deleting an ontology"""
input DeleteGraphInput {
  """The ID of the ontology to delete"""
  id: ID!
}

"""Input type for pinning an ontology"""
input PinGraphInput {
  """The ID of the ontology to pin"""
  id: ID!

  """Whether to pin the ontology or not"""
  pinned: Boolean!
}

"""Input for creating a new expression"""
input MetricCategoryInput {
  """
  The ID of the graph this expression belongs to. If not provided, uses default ontology
  """
  graph: ID!

  """A detailed description of the expression"""
  description: String = null

  """Permanent URL identifier for the expression"""
  purl: String = null

  """RGBA color values as list of 3 or 4 integers"""
  color: [Int!] = null

  """An optional image associated with this expression"""
  image: ID = null

  """A list of tags associated with this expression"""
  tags: [String!] = null

  """Whether this expression should be pinned or not"""
  pin: Boolean = null

  """The ID of the sequence this category will get internal_ids from"""
  sequence: ID = null

  """Whether to create a sequence if it does not exist"""
  autoCreateSequence: Boolean = false

  """An optional x position for the ontology node"""
  positionX: Float = null

  """An optional y position for the ontology node"""
  positionY: Float = null

  """An optional height for the ontology node"""
  height: Float = null

  """An optional width for the ontology node"""
  width: Float = null

  """The structure category that this metric describes"""
  structureCategory: ID = null

  """The structure identifier within the structure category"""
  structureIdentifier: StructureIdentifier = null

  """The label/name of the expression"""
  label: String!

  """The type of metric data this expression represents"""
  kind: MetricKind!
}

"""Input for updating an existing expression"""
input UpdateMetricCategoryInput {
  """A detailed description of the expression"""
  description: String = null

  """Permanent URL identifier for the expression"""
  purl: String = null

  """RGBA color values as list of 3 or 4 integers"""
  color: [Int!] = null

  """An optional image associated with this expression"""
  image: ID = null

  """A list of tags associated with this expression"""
  tags: [String!] = null

  """Whether this expression should be pinned or not"""
  pin: Boolean = null

  """An optional x position for the ontology node"""
  positionX: Float = null

  """An optional y position for the ontology node"""
  positionY: Float = null

  """An optional height for the ontology node"""
  height: Float = null

  """An optional width for the ontology node"""
  width: Float = null

  """The type of metric data this expression represents"""
  kind: MetricKind = null

  """The structure category for this expression"""
  structureDefinition: StructureCategoryDefinitionInput = null
}

"""Input for creating a new expression"""
input StructureCategoryDefinitionInput {
  """A list of classes to filter the entities"""
  categoryFilters: [ID!] = null

  """A list of StructureIdentifier to filter the entities"""
  identifierFilters: [StructureIdentifier!] = null

  """A list of tags to filter the entities by"""
  tagFilters: [String!] = null

  """
  The default ACTIVE reagent to use for this port if a reagent is not provided
  """
  defaultUseActive: ID = null

  """
  The default creation of entity or reagent to use for this port if a reagent is not provided
  """
  defaultUseNew: ID = null
}

"""Input for deleting an expression"""
input DeleteMetricCategoryInput {
  """The ID of the expression to delete"""
  id: ID!
}

"""Input for creating a new expression"""
input MeasurementCategoryInput {
  """
  The ID of the graph this expression belongs to. If not provided, uses default ontology
  """
  graph: ID!

  """A detailed description of the expression"""
  description: String = null

  """Permanent URL identifier for the expression"""
  purl: String = null

  """RGBA color values as list of 3 or 4 integers"""
  color: [Int!] = null

  """An optional image associated with this expression"""
  image: ID = null

  """A list of tags associated with this expression"""
  tags: [String!] = null

  """Whether this expression should be pinned or not"""
  pin: Boolean = null

  """The ID of the sequence this category will get internal_ids from"""
  sequence: ID = null

  """Whether to create a sequence if it does not exist"""
  autoCreateSequence: Boolean = false

  """The label/name of the expression"""
  label: String!

  """The source definition for this expression"""
  structureDefinition: StructureCategoryDefinitionInput!

  """The target definition for this expression"""
  entityDefinition: EntityCategoryDefinitionInput!
}

"""Input for creating a new expression"""
input EntityCategoryDefinitionInput {
  """A list of classes to filter the entities"""
  categoryFilters: [ID!] = null

  """A list of tags to filter the entities by"""
  tagFilters: [String!] = null

  """
  The default creation of entity or reagent to use for this port if a reagent is not provided
  """
  defaultUseNew: ID = null
}

"""Input for updating an existing expression"""
input UpdateMeasurementCategoryInput {
  """The ID of the expression to update"""
  id: ID!

  """New label for the expression"""
  label: String = null

  """New description for the expression"""
  description: String = null

  """New permanent URL for the expression"""
  purl: String = null

  """New RGBA color values as list of 3 or 4 integers"""
  color: [Int!] = null

  """New image ID for the expression"""
  image: ID = null
}

"""Input for deleting an expression"""
input DeleteMeasurementCategoryInput {
  """The ID of the expression to delete"""
  id: ID!
}

"""Input for creating a new expression"""
input StructureCategoryInput {
  """
  The ID of the graph this expression belongs to. If not provided, uses default ontology
  """
  graph: ID!

  """A detailed description of the expression"""
  description: String = null

  """Permanent URL identifier for the expression"""
  purl: String = null

  """RGBA color values as list of 3 or 4 integers"""
  color: [Int!] = null

  """An optional image associated with this expression"""
  image: RemoteUpload = null

  """A list of tags associated with this expression"""
  tags: [String!] = null

  """Whether this expression should be pinned or not"""
  pin: Boolean = null

  """The ID of the sequence this category will get internal_ids from"""
  sequence: ID = null

  """Whether to create a sequence if it does not exist"""
  autoCreateSequence: Boolean = false

  """The label/name of the expression"""
  identifier: StructureIdentifier!
}

"""
The `RemoteUpload` scalar type represents a reference to a remote upload on a datalayer
"""
scalar RemoteUpload

"""Input for updating an existing expression"""
input UpdateStructureCategoryInput {
  """A detailed description of the expression"""
  description: String = null

  """Permanent URL identifier for the expression"""
  purl: String = null

  """RGBA color values as list of 3 or 4 integers"""
  color: [Int!] = null

  """An optional image associated with this expression"""
  image: ID = null

  """A list of tags associated with this expression"""
  tags: [String!] = null

  """Whether this expression should be pinned or not"""
  pin: Boolean = null

  """The ID of the expression to update"""
  id: ID!

  """The label/name of the expression"""
  identifier: String = null
}

"""Input for deleting an expression"""
input DeleteStructureCategoryInput {
  """The ID of the expression to delete"""
  id: ID!
}

"""Input for creating a new expression"""
input RelationCategoryInput {
  """
  The ID of the graph this expression belongs to. If not provided, uses default ontology
  """
  graph: ID!

  """A detailed description of the expression"""
  description: String = null

  """Permanent URL identifier for the expression"""
  purl: String = null

  """RGBA color values as list of 3 or 4 integers"""
  color: [Int!] = null

  """An optional image associated with this expression"""
  image: ID = null

  """A list of tags associated with this expression"""
  tags: [String!] = null

  """Whether this expression should be pinned or not"""
  pin: Boolean = null

  """The ID of the sequence this category will get internal_ids from"""
  sequence: ID = null

  """Whether to create a sequence if it does not exist"""
  autoCreateSequence: Boolean = false

  """The label/name of the expression"""
  label: String!

  """The source definition for this expression"""
  sourceDefinition: EntityCategoryDefinitionInput!

  """The target definition for this expression"""
  targetDefinition: EntityCategoryDefinitionInput!
}

"""Input for updating an existing expression"""
input UpdateRelationCategoryInput {
  """A detailed description of the expression"""
  description: String = null

  """Permanent URL identifier for the expression"""
  purl: String = null

  """RGBA color values as list of 3 or 4 integers"""
  color: [Int!] = null

  """An optional image associated with this expression"""
  image: ID = null

  """A list of tags associated with this expression"""
  tags: [String!] = null

  """Whether this expression should be pinned or not"""
  pin: Boolean = null

  """New label for the expression"""
  label: String = null
}

"""Input for deleting an expression"""
input DeleteRelationCategoryInput {
  """The ID of the expression to delete"""
  id: ID!
}

"""Input for creating a new expression"""
input StructureRelationCategoryInput {
  """
  The ID of the graph this expression belongs to. If not provided, uses default ontology
  """
  graph: ID!

  """A detailed description of the expression"""
  description: String = null

  """Permanent URL identifier for the expression"""
  purl: String = null

  """RGBA color values as list of 3 or 4 integers"""
  color: [Int!] = null

  """An optional image associated with this expression"""
  image: ID = null

  """A list of tags associated with this expression"""
  tags: [String!] = null

  """Whether this expression should be pinned or not"""
  pin: Boolean = null

  """The ID of the sequence this category will get internal_ids from"""
  sequence: ID = null

  """Whether to create a sequence if it does not exist"""
  autoCreateSequence: Boolean = false

  """The label/name of the expression"""
  label: String!

  """The source definition for this expression"""
  sourceDefinition: StructureCategoryDefinitionInput!

  """The target definition for this expression"""
  targetDefinition: StructureCategoryDefinitionInput!
}

"""Input for updating an existing expression"""
input UpdateStructureRelationCategoryInput {
  """A detailed description of the expression"""
  description: String = null

  """Permanent URL identifier for the expression"""
  purl: String = null

  """RGBA color values as list of 3 or 4 integers"""
  color: [Int!] = null

  """An optional image associated with this expression"""
  image: ID = null

  """A list of tags associated with this expression"""
  tags: [String!] = null

  """Whether this expression should be pinned or not"""
  pin: Boolean = null

  """New label for the expression"""
  label: String = null

  """The ID of the expression to update"""
  id: ID!
}

"""Input for deleting an expression"""
input DeleteStructureRelationCategoryInput {
  """The ID of the expression to delete"""
  id: ID!
}

"""Input for creating a new expression"""
input EntityCategoryInput {
  """
  The ID of the graph this expression belongs to. If not provided, uses default ontology
  """
  graph: ID!

  """A detailed description of the expression"""
  description: String = null

  """Permanent URL identifier for the expression"""
  purl: String = null

  """RGBA color values as list of 3 or 4 integers"""
  color: [Int!] = null

  """An optional image associated with this expression"""
  image: ID = null

  """A list of tags associated with this expression"""
  tags: [String!] = null

  """Whether this expression should be pinned or not"""
  pin: Boolean = null

  """The ID of the sequence this category will get internal_ids from"""
  sequence: ID = null

  """Whether to create a sequence if it does not exist"""
  autoCreateSequence: Boolean = false

  """An optional x position for the ontology node"""
  positionX: Float = null

  """An optional y position for the ontology node"""
  positionY: Float = null

  """An optional height for the ontology node"""
  height: Float = null

  """An optional width for the ontology node"""
  width: Float = null

  """The label/name of the expression"""
  label: String!
}

"""Input for updating an existing generic category"""
input UpdateEntityCategoryInput {
  """New description for the expression"""
  description: String = null

  """New permanent URL for the expression"""
  purl: String = null

  """New RGBA color values as list of 3 or 4 integers"""
  color: [Int!] = null

  """New image ID for the expression"""
  image: ID = null

  """A list of tags associated with this expression"""
  tags: [String!] = null

  """Whether this expression should be pinned or not"""
  pin: Boolean = null

  """An optional x position for the ontology node"""
  positionX: Float = null

  """An optional y position for the ontology node"""
  positionY: Float = null

  """An optional height for the ontology node"""
  height: Float = null

  """An optional width for the ontology node"""
  width: Float = null

  """The ID of the expression to update"""
  id: ID!

  """New label for the generic category"""
  label: String = null
}

"""Input for deleting a generic category"""
input DeleteEntityCategoryInput {
  """The ID of the expression to delete"""
  id: ID!
}

input StructureMetricInput {
  structure: StructureString!

  """The name of the measurement"""
  label: String!

  """The description of the measurement"""
  description: String = null

  """The kind of the metric"""
  metricKind: MetricKind! = FLOAT

  """The value of the measurement"""
  value: Any!
  graph: ID!
}

"""The `StructureString` scalar type represents a string with a structure"""
scalar StructureString

"""Input for creating a new expression"""
input ReagentCategoryInput {
  """
  The ID of the graph this expression belongs to. If not provided, uses default ontology
  """
  graph: ID!

  """A detailed description of the expression"""
  description: String = null

  """Permanent URL identifier for the expression"""
  purl: String = null

  """RGBA color values as list of 3 or 4 integers"""
  color: [Int!] = null

  """An optional image associated with this expression"""
  image: ID = null

  """A list of tags associated with this expression"""
  tags: [String!] = null

  """Whether this expression should be pinned or not"""
  pin: Boolean = null

  """The ID of the sequence this category will get internal_ids from"""
  sequence: ID = null

  """Whether to create a sequence if it does not exist"""
  autoCreateSequence: Boolean = false

  """An optional x position for the ontology node"""
  positionX: Float = null

  """An optional y position for the ontology node"""
  positionY: Float = null

  """An optional height for the ontology node"""
  height: Float = null

  """An optional width for the ontology node"""
  width: Float = null

  """The label/name of the expression"""
  label: String!
}

"""Input for updating an existing generic category"""
input UpdateReagentCategoryInput {
  """A detailed description of the expression"""
  description: String = null

  """Permanent URL identifier for the expression"""
  purl: String = null

  """RGBA color values as list of 3 or 4 integers"""
  color: [Int!] = null

  """An optional image associated with this expression"""
  image: ID = null

  """A list of tags associated with this expression"""
  tags: [String!] = null

  """Whether this expression should be pinned or not"""
  pin: Boolean = null

  """An optional x position for the ontology node"""
  positionX: Float = null

  """An optional y position for the ontology node"""
  positionY: Float = null

  """An optional height for the ontology node"""
  height: Float = null

  """An optional width for the ontology node"""
  width: Float = null

  """The ID of the expression to update"""
  id: ID!

  """The label/name of the expression"""
  label: String = null
}

"""Input for deleting a generic category"""
input DeleteReagentCategoryInput {
  """The ID of the expression to delete"""
  id: ID!
}

"""Input for creating a new expression"""
input NaturalEventCategoryInput {
  """
  The ID of the graph this expression belongs to. If not provided, uses default ontology
  """
  graph: ID!

  """A detailed description of the expression"""
  description: String = null

  """Permanent URL identifier for the expression"""
  purl: String = null

  """RGBA color values as list of 3 or 4 integers"""
  color: [Int!] = null

  """An optional image associated with this expression"""
  image: ID = null

  """A list of tags associated with this expression"""
  tags: [String!] = null

  """Whether this expression should be pinned or not"""
  pin: Boolean = null

  """The ID of the sequence this category will get internal_ids from"""
  sequence: ID = null

  """Whether to create a sequence if it does not exist"""
  autoCreateSequence: Boolean = false

  """An optional x position for the ontology node"""
  positionX: Float = null

  """An optional y position for the ontology node"""
  positionY: Float = null

  """An optional height for the ontology node"""
  height: Float = null

  """An optional width for the ontology node"""
  width: Float = null

  """The label/name of the expression"""
  label: String!

  """The source definitions for this expression"""
  sourceEntityRoles: [EntityRoleDefinitionInput!]!

  """The target definitions for this expression"""
  targetEntityRoles: [EntityRoleDefinitionInput!]!

  """The support definition for this expression"""
  supportDefinition: CategoryDefinitionInput!

  """A list of children for the plate"""
  plateChildren: [PlateChildInput!] = null
}

"""Input for creating a new expression"""
input EntityRoleDefinitionInput {
  """The parameter name"""
  role: String!

  """Whether this port allows a variable amount of entities or not"""
  variableAmount: Boolean = true

  """Whether this port is optional or not"""
  optional: Boolean = false

  """The category definition for this expression"""
  categoryDefinition: EntityCategoryDefinitionInput!

  """A detailed description of the role"""
  description: String = null

  """The label/name of the role"""
  label: String = null

  """Whether this port allows multiple entities or not"""
  allowMultiple: Boolean = false

  """The ID of the category to create an entity for if it doesn't exist"""
  createCategory: ID = null
}

"""Input for creating a new expression"""
input CategoryDefinitionInput {
  """A list of classes to filter the entities"""
  categoryFilters: [ID!] = null

  """A list of tags to filter the entities by"""
  tagFilters: [String!] = null

  """
  The default ACTIVE reagent category to use for this port if a reagent is not provided
  """
  defaultUseActive: ID = null

  """
  The default creation of entity or reagent to use for this port if a reagent is not provided
  """
  defaultUseNew: ID = null
}

input PlateChildInput {
  id: ID = null
  type: String = null
  text: String = null
  children: [PlateChildInput!] = null
  value: String = null
  color: String = null
  fontSize: String = null
  backgroundColor: String = null
  bold: Boolean = null
  italic: Boolean = null
  underline: Boolean = null
}

"""Input for updating an existing expression"""
input UpdateNaturalEventCategoryInput {
  """A detailed description of the expression"""
  description: String = null

  """Permanent URL identifier for the expression"""
  purl: String = null

  """RGBA color values as list of 3 or 4 integers"""
  color: [Int!] = null

  """An optional ID reference to an associated image"""
  image: ID = null

  """A list of tags associated with this expression"""
  tags: [String!] = null

  """Whether this expression should be pinned or not"""
  pin: Boolean = null

  """An optional x position for the ontology node"""
  positionX: Float = null

  """An optional y position for the ontology node"""
  positionY: Float = null

  """An optional height for the ontology node"""
  height: Float = null

  """An optional width for the ontology node"""
  width: Float = null

  """The ID of the expression to update"""
  id: ID!

  """The label/name of the expression"""
  label: String = null

  """The source definitions for this expression"""
  sourceEntityRoles: [EntityRoleDefinitionInput!] = null

  """The target definitions for this expression"""
  targetEntityRoles: [EntityRoleDefinitionInput!] = null

  """The support definition for this expression"""
  supportDefinition: CategoryDefinitionInput = null

  """A list of children for the plate"""
  plateChildren: [PlateChildInput!] = null
}

"""Input for deleting an expression"""
input DeleteNaturalEventCategoryInput {
  """The ID of the expression to delete"""
  id: ID!
}

"""Input for creating a new expression"""
input ProtocolEventCategoryInput {
  """
  The ID of the graph this expression belongs to. If not provided, uses default ontology
  """
  graph: ID!

  """A detailed description of the expression"""
  description: String = null

  """Permanent URL identifier for the expression"""
  purl: String = null

  """RGBA color values as list of 3 or 4 integers"""
  color: [Int!] = null

  """An optional image associated with this expression"""
  image: ID = null

  """A list of tags associated with this expression"""
  tags: [String!] = null

  """Whether this expression should be pinned or not"""
  pin: Boolean = null

  """The ID of the sequence this category will get internal_ids from"""
  sequence: ID = null

  """Whether to create a sequence if it does not exist"""
  autoCreateSequence: Boolean = false

  """An optional x position for the ontology node"""
  positionX: Float = null

  """An optional y position for the ontology node"""
  positionY: Float = null

  """An optional height for the ontology node"""
  height: Float = null

  """An optional width for the ontology node"""
  width: Float = null

  """The label/name of the expression"""
  label: String!

  """A list of children for the plate"""
  plateChildren: [PlateChildInput!] = null

  """The source definitions for this expression"""
  sourceEntityRoles: [EntityRoleDefinitionInput!] = null

  """The target definitions for this expression"""
  sourceReagentRoles: [ReagentRoleDefinitionInput!] = null

  """The target definitions for this expression"""
  targetEntityRoles: [EntityRoleDefinitionInput!] = null

  """The target definitions for this expression"""
  targetReagentRoles: [ReagentRoleDefinitionInput!] = null

  """The variable definitions for this expression"""
  variableDefinitions: [VariableDefinitionInput!] = null
}

"""Input for creating a new expression"""
input ReagentRoleDefinitionInput {
  """The parameter name"""
  role: String!

  """Whether this port needs a quantity or not"""
  needsQuantity: Boolean = false

  """Whether this port allows a variable amount of entities or not"""
  variableAmount: Boolean = true

  """Whether this port is optional or not"""
  optional: Boolean = false

  """The category definition for this expression"""
  categoryDefinition: ReagentCategoryDefinitionInput!

  """A detailed description of the role"""
  description: String = null

  """The label/name of the role"""
  label: String = null

  """Whether this port allows multiple entities or not"""
  allowMultiple: Boolean = false

  """The ID of the category to create a new reagent for if it doesn't exist"""
  createCategory: ID = null
}

"""Input for creating a new expression"""
input ReagentCategoryDefinitionInput {
  """A list of classes to filter the entities"""
  categoryFilters: [ID!] = null

  """A list of tags to filter the entities by"""
  tagFilters: [String!] = null

  """
  The default ACTIVE reagent category to use for this port if a reagent is not provided
  """
  defaultUseActive: ID = null

  """
  The default creation of entity or reagent to use for this port if a reagent is not provided
  """
  defaultUseNew: ID = null
}

"""Input for creating a new expression"""
input VariableDefinitionInput {
  """The parameter name"""
  param: String!

  """The type of metric data this expression represents"""
  valueKind: MetricKind!

  """Whether this port is optional or not"""
  optional: Boolean = false

  """The default value for this port"""
  default: Any = null

  """A detailed description of the role"""
  description: String = null

  """The label/name of the role"""
  label: String = null

  """A list of options for this port (if only a few values are allowed)"""
  options: [OptionInput!] = null
}

input OptionInput {
  """The label of the option"""
  label: String!

  """The value of the option. This can be a string, number, or boolean"""
  value: Any!

  """A detailed description of the option"""
  description: String = null
}

"""Input for updating an existing expression"""
input UpdateProtocolEventCategoryInput {
  """A detailed description of the expression"""
  description: String = null

  """Permanent URL identifier for the expression"""
  purl: String = null

  """RGBA color values as list of 3 or 4 integers"""
  color: [Int!] = null

  """An optional ID reference to an associated image"""
  image: ID = null

  """A list of tags associated with this expression"""
  tags: [String!] = null

  """Whether this expression should be pinned or not"""
  pin: Boolean = null

  """An optional x position for the ontology node"""
  positionX: Float = null

  """An optional y position for the ontology node"""
  positionY: Float = null

  """An optional height for the ontology node"""
  height: Float = null

  """An optional width for the ontology node"""
  width: Float = null

  """The ID of the expression to update"""
  id: ID!

  """The label/name of the expression"""
  label: String = null

  """A list of children for the plate"""
  plateChildren: [PlateChildInput!] = null

  """The source definitions for this expression"""
  sourceEntityRoles: [EntityRoleDefinitionInput!] = null

  """The target definitions for this expression"""
  sourceReagentRoles: [ReagentRoleDefinitionInput!] = null

  """The target definitions for this expression"""
  targetEntityRoles: [EntityRoleDefinitionInput!] = null

  """The target definitions for this expression"""
  targetReagentRoles: [ReagentRoleDefinitionInput!] = null

  """The variable definitions for this expression"""
  variableDefinitions: [VariableDefinitionInput!] = null
}

"""Input for deleting an expression"""
input DeleteProtocolEventCategoryInput {
  """The ID of the expression to delete"""
  id: ID!
}

"""Input for creating a new expression"""
input ScatterPlotInput {
  """The query to use"""
  query: ID!

  """The label/name of the expression"""
  name: String!

  """A detailed description of the expression"""
  description: String = null

  """The column to use for the ID of the points"""
  idColumn: String!

  """The column to use for the x-axis"""
  xColumn: String!

  """The column to use for the x-axis ID (node, or edge)"""
  xIdColumn: String = null

  """The column to use for the y-axis"""
  yColumn: String!

  """The column to use for the y-axis ID (node, or edge)"""
  yIdColumn: String = null

  """The column to use for the size of the points"""
  sizeColumn: String = null

  """The column to use for the color of the points"""
  colorColumn: String = null

  """The column to use for the shape of the points"""
  shapeColumn: String = null

  """The graph to test against"""
  testAgainst: ID = null
}

"""Input for deleting an expression"""
input DeleteScatterPlotInput {
  """The ID of the expression to delete"""
  id: ID!
}

input RecordNaturalEventInput {
  category: ID!
  entitySources: [NodeMapping!] = null
  entityTargets: [NodeMapping!] = null
  supportingStructure: ID = null
  externalId: String = null
  validFrom: DateTime = null
  validTo: DateTime = null
}

input NodeMapping {
  key: String!
  node: ID!
  quantity: Float = null
}

input RecordProtocolEventInput {
  category: ID!
  externalId: String = null
  entitySources: [NodeMapping!] = null
  entityTargets: [NodeMapping!] = null
  reagentSources: [NodeMapping!] = null
  reagentTargets: [NodeMapping!] = null
  variables: [VariableMappingInput!] = null
  validFrom: DateTime = null
  validTo: DateTime = null
  performedBy: ID = null
}

input VariableMappingInput {
  key: String!
  value: Any!
}

"""Input type for creating a new entity"""
input ToldYouSoInput {
  """The reason why you made this assumption"""
  reason: String = null

  """Optional name for the entity"""
  name: String = null

  """An optional external ID for the entity (will upsert if exists)"""
  externalId: String = null

  """The context of the measurement"""
  context: ContextInput = null

  """The start date of the measurement"""
  validFrom: String = null

  """The end date of the measurement"""
  validTo: String = null
}

input ContextInput {
  assignationId: ID = null
  assigneeId: ID = null
  templateId: ID = null
  nodeId: ID = null
  args: Any = null
}

input DeleteToldYouSoInput {
  id: ID!
}

input MeasurementInput {
  category: ID!
  structure: NodeID!
  entity: NodeID!
  validFrom: DateTime = null
  validTo: DateTime = null

  """The context of the measurement"""
  context: ContextInput = null
}

"""Input type for creating a relation between two entities"""
input RelationInput {
  """ID of the left entity (format: graph:id)"""
  source: ID!

  """ID of the right entity (format: graph:id)"""
  target: ID!

  """ID of the relation category (LinkedExpression)"""
  category: ID!

  """The context of the measurement"""
  context: ContextInput = null
}

"""Input type for creating a relation between two entities"""
input StructureRelationInput {
  """ID of the left entity (format: graph:id)"""
  source: ID!

  """ID of the right entity (format: graph:id)"""
  target: ID!

  """ID of the relation category (LinkedExpression)"""
  category: ID!

  """The context of the measurement"""
  context: ContextInput = null
}

input MetricInput {
  structure: NodeID!
  category: ID!

  """The value of the measurement"""
  value: Any!

  """The context of the measurement"""
  context: ContextInput = null
}

"""Input type for creating a new entity"""
input UpdateEntityInput {
  id: ID!

  """Optional name for the entity"""
  name: String = null

  """An optional external ID for the entity (will upsert if exists)"""
  externalId: String = null

  """Optional tags for the entity"""
  tags: [String!] = null

  """Whether the entity should be pinned by this user"""
  pinned: Boolean = null
}

input StructureInput {
  structure: StructureString!
  graph: ID!

  """The context of the measurement"""
  context: ContextInput = null
}

input TagInput {
  value: String!
  graph: ID!
}

"""Input type for creating a new model"""
input CreateModelInput {
  """The name of the model"""
  name: String!

  """The uploaded model file (e.g. .h5, .onnx, .pt)"""
  model: RemoteUpload!

  """Optional view ID to associate with the model"""
  view: ID = null
}

"""
Temporary Credentials for a file upload that can be used by a Client (e.g. in a python datalayer)
"""
type PresignedPostCredentials {
  key: String!
  xAmzAlgorithm: String!
  xAmzCredential: String!
  xAmzDate: String!
  xAmzSignature: String!
  policy: String!
  datalayer: String!
  bucket: String!
  store: String!
}

input RequestMediaUploadInput {
  key: String!
  datalayer: String!
}

"""Input type for creating a new entity"""
input EntityInput {
  """The ID of the kind (LinkedExpression) to create the entity from"""
  entityCategory: ID!

  """Optional name for the entity"""
  name: String = null

  """An optional external ID for the entity (will upsert if exists)"""
  externalId: String = null

  """Whether the entity should be pinned"""
  pinned: Boolean = null
}

input DeleteEntityInput {
  id: ID!
}

"""Input type for creating a new entity"""
input ReagentInput {
  """The ID of the kind (LinkedExpression) to create the entity from"""
  reagentCategory: ID!

  """Optional name for the entity"""
  name: String = null

  """An optional external ID for the entity (will upsert if exists)"""
  externalId: String = null

  """Set the reagent as active"""
  setActive: Boolean = false
}

input DeleteReagentInput {
  id: ID!
}

"""Input for creating a new expression"""
input GraphQueryInput {
  """
  The ID of the ontology this expression belongs to. If not provided, uses default ontology
  """
  graph: ID!

  """The label/name of the expression"""
  name: String!

  """The label/name of the expression"""
  query: Cypher!

  """A detailed description of the expression"""
  description: String = null

  """The kind/type of this expression"""
  kind: ViewKind!

  """The columns (if ViewKind is Table)"""
  columns: [ColumnInput!] = null

  """A list of categories where this query is releveant and should be shown"""
  relevantFor: [ID!] = null

  """Whether to pin this expression for the current user"""
  pin: Boolean = null
}

"""The `Cypher` scalar type represents a cypher query"""
scalar Cypher

input ColumnInput {
  name: String!
  kind: ColumnKind!
  label: String = null
  description: String = null
  category: ID = null
  valueKind: MetricKind = null
  searchable: Boolean = null
  idfor: [ID!] = null
  preferhidden: Boolean = null
  identifier: String = null
}

"""Input for updating an existing expression"""
input UpdateGraphQueryInput {
  """
  The ID of the ontology this expression belongs to. If not provided, uses default ontology
  """
  graph: ID!

  """The label/name of the expression"""
  name: String!

  """The label/name of the expression"""
  query: Cypher!

  """A detailed description of the expression"""
  description: String = null

  """The kind/type of this expression"""
  kind: ViewKind!

  """The columns (if ViewKind is Table)"""
  columns: [ColumnInput!] = null

  """A list of categories where this query is releveant and should be shown"""
  relevantFor: [ID!] = null

  """Whether to pin this expression for the current user"""
  pin: Boolean = null

  """The ID of the expression to update"""
  id: ID!
}

input PinGraphQueryInput {
  id: ID!
  pin: Boolean!
}

"""Input for creating a new expression"""
input NodeQueryInput {
  """
  The ID of the ontology this expression belongs to. If not provided, uses default ontology
  """
  graph: ID!

  """The label/name of the expression"""
  name: String!

  """The label/name of the expression"""
  query: Cypher!

  """A detailed description of the expression"""
  description: String = null

  """The kind/type of this expression"""
  kind: ViewKind!

  """The columns (if ViewKind is Table)"""
  columns: [ColumnInput!] = null

  """The node to test against"""
  testAgainst: ID = null

  """The list of categories this expression is relevant for"""
  relevantFor: [ID!] = null

  """Whether to pin this expression for the current user"""
  pin: Boolean = null
}

input PinNodeQueryInput {
  id: ID!
  pin: Boolean!
}

type Subscription {
  historyEvents(
    """The user to get history events for"""
    user: String!
  ): Entity!
}